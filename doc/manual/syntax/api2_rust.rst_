
  **Free-form**

    This style is enabled with configuration ``re2c:api:style = free-form;``.
    It is the default for the Rust backend.
    In this style interface primitives should be defined as free-form pieces of
    code with interpolated variables of the form ``@@{var}`` or optionally just
    ``@@`` if there is a single variable.
    The set of variables is specific to each primitive.
    Assuming that the input is a byte slice ``buffer`` of type ``&[u8]``,
    variables ``cursor``, ``limit``, ``marker`` and ``ctxmarker``
    of type ``usize`` represent input positions,
    and a constant ``NONE`` represents invalid position,
    free-form style generic API can be defined as follows:

    .. code-block:: go

        /*!re2c
          re2c:define:YYPEEK       = "*buffer.get_unchecked(cursor)";
          re2c:define:YYSKIP       = "cursor += 1;";
          re2c:define:YYBACKUP     = "marker = cursor;";
          re2c:define:YYRESTORE    = "cursor = marker;";
          re2c:define:YYBACKUPCTX  = "ctxmarker = cursor;";
          re2c:define:YYRESTORECTX = "cursor = ctxmarker;";
          re2c:define:YYRESTORETAG = "cursor = @@{tag};";
          re2c:define:YYLESSTHAN   = "limit - cursor < @@{len}";
          re2c:define:YYSTAGP      = "@@{tag} = cursor;";
          re2c:define:YYSTAGN      = "@@{tag} = NONE;";
          re2c:define:YYSHIFT      = "cursor = (cursor as isize + @@{shift}) as usize;";
          re2c:define:YYSHIFTSTAG  = "@@{tag} = (@@{tag} as isize + @@{shift}) as usize;";
        */

    |

  **Function-like**

    This style is enabled with configuration ``re2c:api:style = functions;``.
    Primitives are expected to be callable: they are emitted with parentheses,
    and some of them accept arguments. This style works well with C/C++ macros
    or Go closures, but it is problematic in Rust. Primitives cannot be defined
    as top-level functions or hygienic macros (they do not accept all necessary
    arguments), nor can they be defined as closures (due to borrow-checker
    issues). Use free-form style instead.
