// Code generated by re2c, DO NOT EDIT.
//go:generate re2go $INPUT -o $OUTPUT --loop-switch -i
package main

import "testing"

// Returns "fake" terminating null if cursor has reached limit.
func peek(str string, cursor int, limit int) byte {
	if cursor >= limit {
		return 0 // fake null
	} else {
		return str[cursor]
	}
}

// Expects a string without terminating null.
func lex(str string) int {
	var cursor int
	limit := len(str)
	count := 0
loop:
	
{
	var yych byte
	yystate := 1
	for {
		switch (yystate) {
		case 1:
			yych = peek(str, cursor, limit)
			cursor += 1
			switch (yych) {
			case 0x00:
				yystate = 2
				continue
			case ' ':
				yystate = 6
				continue
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				yystate = 9
				continue
			default:
				yystate = 4
				continue
			}
		case 2:
			yystate = 3
			continue
		case 3:
			{ return count }
		case 4:
			yystate = 5
			continue
		case 5:
			{ return -1 }
		case 6:
			yych = peek(str, cursor, limit)
			yystate = 7
			continue
		case 7:
			switch (yych) {
			case ' ':
				cursor += 1
				yystate = 6
				continue
			default:
				yystate = 8
				continue
			}
		case 8:
			{ goto loop }
		case 9:
			yych = peek(str, cursor, limit)
			yystate = 10
			continue
		case 10:
			switch (yych) {
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				cursor += 1
				yystate = 9
				continue
			default:
				yystate = 11
				continue
			}
		case 11:
			{ count += 1; goto loop }
		}
	}
}

}

func TestLex(t *testing.T) {
	var tests = []struct {
		res int
		str string
	}{
		{0, ""},
		{3, "one two three"},
		{-1, "f0ur"},
	}

	for _, x := range tests {
		t.Run(x.str, func(t *testing.T) {
			res := lex(x.str)
			if res != x.res {
				t.Errorf("got %d, want %d", res, x.res)
			}
		})
	}
}
