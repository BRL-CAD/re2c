// Code generated by re2c, DO NOT EDIT.
//go:generate re2go $INPUT -o $OUTPUT --loop-switch -i
package main

import "testing"

// Expects a null-terminated string.
func lex(str string) int {
	var cursor, marker int
	limit := len(str) - 1 // limit points at the terminating null
	count := 0
loop:
	
{
	var yych byte
	yystate := 1
	for {
		switch (yystate) {
		case 1:
			yych = str[cursor]
			switch (yych) {
			case ' ':
				cursor += 1
				yystate = 4
				continue
			case '\'':
				cursor += 1
				yystate = 7
				continue
			default:
				if (limit <= cursor) {
					yystate = 13
					continue
				}
				cursor += 1
				yystate = 2
				continue
			}
		case 2:
			yystate = 3
			continue
		case 3:
			{ return -1 }
		case 4:
			yych = str[cursor]
			yystate = 5
			continue
		case 5:
			switch (yych) {
			case ' ':
				cursor += 1
				yystate = 4
				continue
			default:
				yystate = 6
				continue
			}
		case 6:
			{ goto loop }
		case 7:
			marker = cursor
			yych = str[cursor]
			if (yych >= 0x01) {
				yystate = 9
				continue
			}
			if (limit <= cursor) {
				yystate = 3
				continue
			}
			cursor += 1
			yystate = 8
			continue
		case 8:
			yych = str[cursor]
			yystate = 9
			continue
		case 9:
			switch (yych) {
			case '\'':
				cursor += 1
				yystate = 10
				continue
			case '\\':
				cursor += 1
				yystate = 12
				continue
			default:
				if (limit <= cursor) {
					yystate = 14
					continue
				}
				cursor += 1
				yystate = 8
				continue
			}
		case 10:
			yystate = 11
			continue
		case 11:
			{ count += 1; goto loop }
		case 12:
			yych = str[cursor]
			if (yych <= 0x00) {
				if (limit <= cursor) {
					yystate = 14
					continue
				}
				cursor += 1
				yystate = 8
				continue
			}
			cursor += 1
			yystate = 8
			continue
		case 13:
			{ return count }
		case 14:
			cursor = marker
			yystate = 3
			continue
		}
	}
}

}

func TestLex(t *testing.T) {
	var tests = []struct {
		res int
		str string
	}{
		{0, "\000"},
		{3, "'qu\000tes' 'are' 'fine: \\'' \000"},
		{-1, "'unterminated\\'\000"},
	}

	for _, x := range tests {
		t.Run(x.str, func(t *testing.T) {
			res := lex(x.str)
			if res != x.res {
				t.Errorf("got %d, want %d", res, x.res)
			}
		})
	}
}
