/* Generated by re2c 2.2 on Sat Dec  4 20:57:16 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/file_utils.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

// Global re2c configurations and definitions.
#line 64 "../src/parse/lex.re"


#line 123 "../src/parse/lex.re"


InputBlockKind Scanner::echo(Output &out, std::string &block_name)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;

    if (is_eof()) return INPUT_END;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 55 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) { if (!fill(18)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++cur;
#line 262 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return INPUT_END;
        }
        goto loop;
    }
#line 121 "src/parse/lex.cc"
yy4:
	++cur;
yy5:
#line 282 "../src/parse/lex.re"
	{ goto loop; }
#line 127 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 277 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 141 "src/parse/lex.cc"
yy8:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy7;
			} else {
				goto yy5;
			}
		} else {
			goto yy161;
		}
	} else {
		if (yyaccept == 3) {
			goto yy163;
		} else {
			goto yy172;
		}
	}
yy14:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++cur;
#line 139 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        block_name.clear();
        return INPUT_GLOBAL;
    }
#line 202 "src/parse/lex.cc"
yy18:
	yych = (unsigned char)*++cur;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (unsigned char)*++cur;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'l':	goto yy25;
	case 'm':	goto yy26;
	case 'r':	goto yy27;
	case 's':	goto yy28;
	case 't':	goto yy29;
	case 'u':	goto yy30;
	default:	goto yy13;
	}
yy21:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy31;
	goto yy13;
yy22:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy32;
	goto yy13;
yy23:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy33;
	goto yy13;
yy24:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy13;
yy25:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy36;
	goto yy13;
yy26:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy13;
yy27:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy13;
yy28:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy41;
	goto yy13;
yy29:
	yych = (unsigned char)*++cur;
	if (yych == 'y') goto yy42;
	goto yy13;
yy30:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy43;
	goto yy13;
yy31:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy44;
	goto yy13;
yy32:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy45;
	goto yy13;
yy33:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy46;
	goto yy13;
yy34:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy47;
	goto yy13;
yy35:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy48;
	goto yy13;
yy36:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy49;
	goto yy13;
yy37:
	yych = (unsigned char)*++cur;
	if (yych == 'x') goto yy50;
	goto yy13;
yy38:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy51;
	goto yy13;
yy39:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy52;
	goto yy13;
yy40:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy53;
	goto yy13;
yy41:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy54;
	goto yy13;
yy42:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy55;
	goto yy13;
yy43:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy56;
	goto yy13;
yy44:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy58;
	if (yych <= '9') goto yy13;
	goto yy58;
yy45:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy59;
	goto yy13;
yy46:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy60;
	goto yy13;
yy47:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy61;
	goto yy13;
yy48:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy62;
	goto yy13;
yy49:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy63;
	goto yy13;
yy50:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy64;
	if (yych == 'n') goto yy65;
	goto yy13;
yy51:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy66;
	goto yy13;
yy52:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy67;
	goto yy13;
yy53:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy69;
	goto yy13;
yy54:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy70;
	goto yy13;
yy55:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy71;
	goto yy13;
yy56:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy72;
	goto yy13;
yy57:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy58:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy57;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy57;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy73;
		}
		goto yy13;
	}
yy59:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy75;
	goto yy13;
yy60:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy76;
	goto yy13;
yy61:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy77;
	goto yy13;
yy62:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy78;
	goto yy13;
yy63:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy79;
	goto yy13;
yy64:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy80;
	goto yy13;
yy65:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy81;
	goto yy13;
yy66:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy82;
	goto yy13;
yy67:
	++cur;
#line 145 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_GLOBAL;
    }
#line 431 "src/parse/lex.cc"
yy69:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy83;
	goto yy13;
yy70:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy84;
	goto yy13;
yy71:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy85;
	goto yy13;
yy72:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy86;
	goto yy13;
yy73:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy73;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy87;
		if (yych <= '\n') goto yy89;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy91;
		if (yych == ' ') goto yy87;
		goto yy13;
	}
yy75:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy92;
	goto yy13;
yy76:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy93;
	goto yy13;
yy77:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy94;
	goto yy13;
yy78:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy95;
	goto yy13;
yy79:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy96;
	goto yy13;
yy80:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy97;
	goto yy13;
yy81:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy98;
	goto yy13;
yy82:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy99;
	goto yy13;
yy83:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy100;
	goto yy13;
yy84:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy101;
	goto yy13;
yy85:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy102;
	goto yy13;
yy86:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy103;
	goto yy13;
yy87:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy87;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy87;
		if (yych == '"') goto yy104;
		goto yy13;
	}
yy89:
	++cur;
	cur = yyt1;
#line 270 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 535 "src/parse/lex.cc"
yy91:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy89;
	goto yy13;
yy92:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy106;
	goto yy13;
yy93:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy107;
	goto yy13;
yy94:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy108;
	goto yy13;
yy95:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy109;
	goto yy13;
yy96:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy110;
	goto yy13;
yy97:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy111;
	goto yy13;
yy98:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy112;
	goto yy13;
yy99:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy113;
	goto yy13;
yy100:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy114;
	goto yy13;
yy101:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy115;
	goto yy13;
yy102:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy116;
	goto yy13;
yy103:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy117;
	goto yy13;
yy104:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy104;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy118;
	goto yy119;
yy106:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy121;
	goto yy13;
yy108:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy122;
	goto yy13;
yy109:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy123;
	goto yy13;
yy110:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy124;
	goto yy13;
yy111:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy125;
	goto yy13;
yy112:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy127;
	goto yy13;
yy113:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy128;
	goto yy13;
yy114:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy129;
	goto yy13;
yy115:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy130;
	goto yy13;
yy116:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy131;
	goto yy13;
yy117:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy132;
	goto yy13;
yy118:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy89;
	if (yych == '\r') goto yy91;
	goto yy13;
yy119:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy104;
yy120:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy134;
	goto yy13;
yy121:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy135;
	goto yy13;
yy122:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy136;
	goto yy13;
yy123:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy137;
	goto yy13;
yy124:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy138;
	goto yy13;
yy125:
	++cur;
#line 169 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXFILL, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 685 "src/parse/lex.cc"
yy127:
	yych = (unsigned char)*++cur;
	if (yych == 'h') goto yy139;
	goto yy13;
yy128:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy140;
	goto yy13;
yy129:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy141;
	goto yy13;
yy130:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy142;
	goto yy13;
yy131:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy143;
	goto yy13;
yy132:
	++cur;
#line 163 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_USE;
    }
#line 714 "src/parse/lex.cc"
yy134:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy144;
	goto yy13;
yy135:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy145;
	goto yy13;
yy136:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy146;
	goto yy13;
yy137:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy147;
	goto yy13;
yy138:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy148;
	goto yy13;
yy139:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy150;
	goto yy13;
yy140:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy151;
	goto yy13;
yy141:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy153;
	goto yy13;
yy142:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy155;
	goto yy13;
yy143:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy157;
	goto yy13;
yy144:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy159;
	goto yy13;
yy145:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy160;
	goto yy13;
yy146:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy162;
	goto yy13;
yy147:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy164;
	goto yy13;
yy148:
	++cur;
#line 151 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_LOCAL;
    }
#line 779 "src/parse/lex.cc"
yy150:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy165;
	goto yy13;
yy151:
	++cur;
#line 185 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_MTAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 792 "src/parse/lex.cc"
yy153:
	++cur;
#line 157 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_RULES;
    }
#line 801 "src/parse/lex.cc"
yy155:
	++cur;
#line 179 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_STAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 810 "src/parse/lex.cc"
yy157:
	++cur;
#line 191 "../src/parse/lex.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_COND_ENUM, opts->topIndent, allow)) return INPUT_ERROR;
        goto next;
    }
#line 821 "src/parse/lex.cc"
yy159:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy166;
	goto yy13;
yy160:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy167;
yy161:
#line 230 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed header directive: expected"
            " `/*!header:re2c:<on|off>` followed by a space, a newline or the"
            " end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 838 "src/parse/lex.cc"
yy162:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy163;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy168;
		}
		if (yych >= '\r') {
			yyt1 = cur;
			goto yy168;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy168;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy170;
			}
		}
	}
yy163:
#line 256 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of `ignore:re2c` block: expected"
            " a space, a newline, or the end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 872 "src/parse/lex.cc"
yy164:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy171;
	goto yy13;
yy165:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy173;
	goto yy13;
yy166:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy174;
	goto yy13;
yy167:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy176;
	goto yy13;
yy168:
	++cur;
	cur = yyt1;
#line 250 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        if (!lex_block_end(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 899 "src/parse/lex.cc"
yy170:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy168;
	goto yy13;
yy171:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy177;
	if (yych == ' ') goto yy177;
yy172:
#line 244 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed include directive: expected"
            " `/*!include:re2c \"<file>\" *" "/`");
        return INPUT_ERROR;
    }
#line 916 "src/parse/lex.cc"
yy173:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy179;
	goto yy13;
yy174:
	++cur;
#line 199 "../src/parse/lex.re"
	{
        out.state_goto = true;
        if (!opts->fFlag) {
            msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option");
            return INPUT_ERROR;
        }
        if (opts->loop_switch) {
            msg.error(cur_loc(), "`getstate:re2c` is incompatible with the --loop-switch "
                "option, as it requires cross-block transitions that are unsupported "
                "without the `goto` statement");
            return INPUT_ERROR;
        }
        if (!lex_block(out, CODE_STATE_GOTO, opts->topIndent, 0)) return INPUT_ERROR;
        goto next;
    }
#line 939 "src/parse/lex.cc"
yy176:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy180;
	if (yych == 'n') goto yy181;
	goto yy13;
yy177:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy177;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy177;
		if (yych == '"') {
			yyt1 = cur;
			goto yy183;
		}
		goto yy13;
	}
yy179:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy185;
	goto yy13;
yy180:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy187;
	goto yy13;
yy181:
	++cur;
#line 215 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 978 "src/parse/lex.cc"
yy183:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy183;
	} else {
		if (yych <= '"') goto yy189;
		if (yych == '\\') goto yy190;
		goto yy183;
	}
yy185:
	++cur;
#line 174 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXNMATCH, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 999 "src/parse/lex.cc"
yy187:
	++cur;
#line 223 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1010 "src/parse/lex.cc"
yy189:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt2 = cur;
			goto yy191;
		}
		if (yych <= '\f') goto yy13;
		yyt2 = cur;
		goto yy191;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt2 = cur;
			goto yy191;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy193;
			}
			goto yy13;
		}
	}
yy190:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy183;
yy191:
	++cur;
	x = yyt1;
	cur = yyt2;
	y = yyt2;
#line 237 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_block_end(out)) return INPUT_ERROR;
        include(getstr(x + 1, y - 1), ptr);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1055 "src/parse/lex.cc"
yy193:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy191;
	goto yy13;
}
#line 283 "../src/parse/lex.re"

}

bool Scanner::lex_opt_name(std::string &name)
{
    tok = cur;

#line 1069 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy197;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy197;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy197;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy199;
			}
		} else {
			if (yych == ':') goto yy201;
		}
	}
yy196:
#line 290 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a block name, or the end of block `*"
            "/`");
        return false;
    }
#line 1142 "src/parse/lex.cc"
yy197:
	++cur;
	cur = yyt1;
#line 297 "../src/parse/lex.re"
	{ name.clear();              return true; }
#line 1148 "src/parse/lex.cc"
yy199:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy197;
yy200:
	cur = mar;
	goto yy196;
yy201:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy200;
		if (yych >= '[') goto yy200;
	} else {
		if (yych == '`') goto yy200;
		if (yych >= '{') goto yy200;
	}
yy202:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy202;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy200;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy204;
		}
		if (yych <= '\f') goto yy200;
		yyt1 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy200;
			yyt1 = cur;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy206;
			}
			goto yy200;
		}
	}
yy204:
	++cur;
	cur = yyt1;
#line 298 "../src/parse/lex.re"
	{ name.assign(tok + 1, cur); return true; }
#line 1196 "src/parse/lex.cc"
yy206:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy204;
	goto yy200;
}
#line 299 "../src/parse/lex.re"

}

bool Scanner::lex_name_list(code_alc_t &alc, BlockNameList **ptail)
{
    BlockNameList **phead = ptail;
loop:
    tok = cur;

#line 1212 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy210;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy210;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy210;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy212;
			}
		} else {
			if (yych == ':') goto yy214;
		}
	}
yy209:
#line 308 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a list of colon-separated block"
            " names, or the end of block `*" "/`");
        return false;
    }
#line 1285 "src/parse/lex.cc"
yy210:
	++cur;
	cur = yyt1;
#line 315 "../src/parse/lex.re"
	{
        *ptail = NULL;
        return true;
    }
#line 1294 "src/parse/lex.cc"
yy212:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy210;
yy213:
	cur = mar;
	goto yy209;
yy214:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy213;
		if (yych >= '[') goto yy213;
	} else {
		if (yych == '`') goto yy213;
		if (yych >= '{') goto yy213;
	}
yy215:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy215;
	}
#line 320 "../src/parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = NULL;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                msg.error(cur_loc(), "duplicate block '%s' on the list", p->name);
                return false;
            }
        }

        goto loop;
    }
#line 1335 "src/parse/lex.cc"
}
#line 337 "../src/parse/lex.re"

}

bool Scanner::lex_block_end(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1346 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy222;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy220;
		if (yych <= '\n') goto yy225;
	} else {
		if (yych <= '\r') goto yy227;
		if (yych == '*') goto yy228;
	}
yy220:
	++cur;
yy221:
#line 345 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "ill-formed end of block: expected optional"
            " whitespaces followed by `*" "/`");
        return false;
    }
#line 1405 "src/parse/lex.cc"
yy222:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy222;
	}
#line 355 "../src/parse/lex.re"
	{ goto loop; }
#line 1415 "src/parse/lex.cc"
yy225:
	++cur;
#line 356 "../src/parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1420 "src/parse/lex.cc"
yy227:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy225;
	goto yy221;
yy228:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy221;
	++cur;
#line 351 "../src/parse/lex.re"
	{
        if (multiline) out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        return true;
    }
#line 1434 "src/parse/lex.cc"
}
#line 357 "../src/parse/lex.re"

}

bool Scanner::lex_block(Output &out, CodeKind kind, uint32_t indent, uint32_t mask)
{
    code_alc_t &alc = out.allocator;
    const char *fmt = NULL, *sep = NULL;
    BlockNameList *blocks;

    out.wraw(tok, ptr, !globopts->iFlag);
    if (!lex_name_list(alc, &blocks)) return false;

loop:

#line 1451 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy235;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy238;
		} else {
			if (yych == '\r') goto yy240;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy241;
			if (yych >= 'f') goto yy242;
		} else {
			if (yych == 's') goto yy243;
		}
	}
	++cur;
yy234:
#line 371 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed directive: expected optional "
            "configurations followed by the end of block `*" "/`");
        return false;
    }
#line 1515 "src/parse/lex.cc"
yy235:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy235;
	}
#line 395 "../src/parse/lex.re"
	{ goto loop; }
#line 1525 "src/parse/lex.cc"
yy238:
	++cur;
#line 397 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 1530 "src/parse/lex.cc"
yy240:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy238;
	goto yy234;
yy241:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy244;
	goto yy234;
yy242:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'o') goto yy246;
	goto yy234;
yy243:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'e') goto yy248;
	goto yy234;
yy244:
	++cur;
#line 399 "../src/parse/lex.re"
	{
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(indent, code_fmt(alc, kind, blocks, fmt, sep));
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        return true;
    }
#line 1556 "src/parse/lex.cc"
yy246:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy249;
yy247:
	cur = mar;
	goto yy234;
yy248:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy250;
	goto yy247;
yy249:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy251;
	goto yy247;
yy250:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy252;
	goto yy247;
yy251:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy253;
	goto yy247;
yy252:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy254;
	goto yy247;
yy253:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy255;
	goto yy247;
yy254:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy257;
	goto yy247;
yy255:
	++cur;
#line 377 "../src/parse/lex.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'format'");
            return false;
        }
        fmt = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1602 "src/parse/lex.cc"
yy257:
	yych = (unsigned char)*++cur;
	if (yych != 't') goto yy247;
	yych = (unsigned char)*++cur;
	if (yych != 'o') goto yy247;
	yych = (unsigned char)*++cur;
	if (yych != 'r') goto yy247;
	++cur;
#line 386 "../src/parse/lex.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'separator'");
            return false;
        }
        sep = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1620 "src/parse/lex.cc"
}
#line 405 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1633 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy266;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy264;
				if (yych <= '\n') goto yy269;
				if (yych >= '\r') goto yy271;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy272;
				} else {
					if (yych <= '"') goto yy273;
					if (yych <= '#') goto yy275;
					goto yy276;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy278;
				} else {
					if (yych <= '\'') goto yy279;
					if (yych <= ')') goto yy276;
					goto yy281;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy276;
				} else {
					if (yych <= '.') goto yy282;
					if (yych <= '/') goto yy284;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy285;
				if (yych <= ';') goto yy276;
				if (yych <= '<') goto yy286;
				goto yy288;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy276;
				} else {
					if (yych <= '@') goto yy275;
					if (yych <= 'Z') goto yy289;
					goto yy292;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy276;
				} else {
					if (yych != '`') goto yy289;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy294;
					goto yy289;
				} else {
					if (yych <= '{') goto yy295;
					if (yych <= '|') goto yy276;
				}
			}
		}
	}
yy264:
	++cur;
yy265:
#line 558 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1751 "src/parse/lex.cc"
yy266:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy266;
	}
#line 540 "../src/parse/lex.re"
	{ goto scan; }
#line 1761 "src/parse/lex.cc"
yy269:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy297;
	} else {
		if (yych <= ' ') goto yy297;
		if (yych == '#') goto yy300;
	}
yy270:
#line 547 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1783 "src/parse/lex.cc"
yy271:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy269;
	goto yy265;
yy272:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'i') goto yy302;
	if (yych == 'u') goto yy303;
	goto yy265;
yy273:
	++cur;
#line 432 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1798 "src/parse/lex.cc"
yy275:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy265;
		if (yych <= 'Z') goto yy304;
		goto yy265;
	} else {
		if (yych == '`') goto yy265;
		if (yych <= 'z') goto yy304;
		goto yy265;
	}
yy276:
	++cur;
yy277:
#line 441 "../src/parse/lex.re"
	{ return *tok; }
#line 1815 "src/parse/lex.cc"
yy278:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy307;
	goto yy265;
yy279:
	++cur;
#line 431 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1824 "src/parse/lex.cc"
yy281:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy307;
	goto yy277;
yy282:
	++cur;
#line 535 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1836 "src/parse/lex.cc"
yy284:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy309;
	if (yych == '/') goto yy311;
	goto yy277;
yy285:
	yych = (unsigned char)*++cur;
	if (yych == '=') goto yy313;
	goto yy265;
yy286:
	++cur;
#line 424 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1850 "src/parse/lex.cc"
yy288:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy315;
	goto yy277;
yy289:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy290:
	if (yybm[0+yych] & 32) {
		goto yy289;
	}
#line 490 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1887 "src/parse/lex.cc"
yy292:
	yych = (unsigned char)*++cur;
	if (yych == '^') goto yy317;
#line 433 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1893 "src/parse/lex.cc"
yy294:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy319;
	goto yy290;
yy295:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy322;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy320;
		if (yych >= 'A') goto yy324;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy324;
		} else {
			if (yych <= '`') goto yy296;
			if (yych <= 'z') goto yy324;
		}
	}
yy296:
#line 416 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1918 "src/parse/lex.cc"
yy297:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy297;
	} else {
		if (yych <= ' ') goto yy297;
		if (yych == '#') goto yy300;
	}
yy299:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy270;
			} else {
				goto yy265;
			}
		} else {
			if (yyaccept == 2) {
				goto yy277;
			} else {
				goto yy296;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy314;
			} else {
				goto yy321;
			}
		} else {
			if (yyaccept == 6) {
				goto yy341;
			} else {
				goto yy367;
			}
		}
	}
yy300:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy300;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy300;
		if (yych == 'l') goto yy326;
		goto yy299;
	}
yy302:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy327;
	goto yy299;
yy303:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy328;
	goto yy299;
yy304:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy306;
		if (yych <= '9') goto yy304;
		if (yych >= 'A') goto yy304;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy304;
		} else {
			if (yych <= '`') goto yy306;
			if (yych <= 'z') goto yy304;
		}
	}
yy306:
#line 436 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 2002 "src/parse/lex.cc"
yy307:
	++cur;
#line 429 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 2007 "src/parse/lex.cc"
yy309:
	++cur;
#line 427 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 2012 "src/parse/lex.cc"
yy311:
	++cur;
#line 426 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 2017 "src/parse/lex.cc"
yy313:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy315;
yy314:
#line 417 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 2025 "src/parse/lex.cc"
yy315:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy299;
			goto yy315;
		} else {
			if (yych == ' ') goto yy315;
			goto yy299;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy329;
			}
			if (yych <= '^') goto yy299;
			yyt1 = cur;
			goto yy329;
		} else {
			if (yych <= '`') goto yy299;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy329;
			}
			goto yy299;
		}
	}
yy317:
	++cur;
#line 434 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2060 "src/parse/lex.cc"
yy319:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy332;
	goto yy290;
yy320:
	++cur;
yy321:
#line 473 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2074 "src/parse/lex.cc"
yy322:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy322;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy333;
	}
	if (yych == '}') goto yy334;
	goto yy299;
yy324:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy299;
			goto yy324;
		} else {
			if (yych <= '@') goto yy299;
			if (yych <= 'Z') goto yy324;
			goto yy299;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy299;
			goto yy324;
		} else {
			if (yych == '}') goto yy336;
			goto yy299;
		}
	}
yy326:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy338;
	goto yy299;
yy327:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy339;
	goto yy299;
yy328:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy340;
	goto yy299;
yy329:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy331;
		if (yych <= '9') goto yy329;
		if (yych >= 'A') goto yy329;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy329;
		} else {
			if (yych <= '`') goto yy331;
			if (yych <= 'z') goto yy329;
		}
	}
yy331:
	p = yyt1;
#line 419 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2145 "src/parse/lex.cc"
yy332:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy342;
	goto yy290;
yy333:
	yyaccept = 5;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy321;
	if (yych <= '9') goto yy343;
	if (yych == '}') goto yy345;
	goto yy321;
yy334:
	++cur;
#line 443 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2168 "src/parse/lex.cc"
yy336:
	++cur;
#line 479 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2180 "src/parse/lex.cc"
yy338:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy347;
	goto yy299;
yy339:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy348;
	goto yy299;
yy340:
	yyaccept = 6;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy349;
yy341:
#line 528 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive: expected `!use`"
            " followed by a colon, a block name, optional spaces, a semicolon,"
            " and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2201 "src/parse/lex.cc"
yy342:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy350;
	goto yy290;
yy343:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '/') goto yy299;
	if (yych <= '9') goto yy343;
	if (yych == '}') goto yy352;
	goto yy299;
yy345:
	++cur;
#line 464 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2225 "src/parse/lex.cc"
yy347:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy354;
	goto yy299;
yy348:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy355;
	goto yy299;
yy349:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy299;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy356;
		}
		goto yy299;
	} else {
		if (yych == '`') goto yy299;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy356;
		}
		goto yy299;
	}
yy350:
	++cur;
#line 488 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2255 "src/parse/lex.cc"
yy352:
	++cur;
	p = yyt1;
#line 452 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2271 "src/parse/lex.cc"
yy354:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy359;
	if (yych <= '9') goto yy299;
	goto yy359;
yy355:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy360;
	goto yy299;
yy356:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy361;
			}
			goto yy299;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy361;
			}
			if (yych <= '/') goto yy299;
			if (yych <= '9') goto yy356;
			goto yy299;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy363;
			}
			if (yych <= '@') goto yy299;
			if (yych <= 'Z') goto yy356;
			goto yy299;
		} else {
			if (yych == '`') goto yy299;
			if (yych <= 'z') goto yy356;
			goto yy299;
		}
	}
yy358:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy359:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy358;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy358;
		if (yych <= '0') goto yy299;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy364;
		}
		goto yy299;
	}
yy360:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy366;
	goto yy299;
yy361:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy361;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy361;
		if (yych != ';') goto yy299;
	}
yy363:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy299;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy368;
		}
		if (yych <= '\f') goto yy299;
		yyt3 = cur;
		goto yy368;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy299;
			yyt3 = cur;
			goto yy368;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy370;
			}
			goto yy299;
		}
	}
yy364:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy299;
			goto yy371;
		} else {
			if (yych <= '\n') goto yy373;
			if (yych <= '\f') goto yy299;
			goto yy375;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy299;
			goto yy371;
		} else {
			if (yych <= '/') goto yy299;
			if (yych <= '9') goto yy364;
			goto yy299;
		}
	}
yy366:
	yyaccept = 7;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy376;
	if (yych == ' ') goto yy376;
yy367:
#line 517 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive: expected `!include`"
            " followed by spaces, a double-quoted file path, optional spaces, a"
            " semicolon, and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2408 "src/parse/lex.cc"
yy368:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 524 "../src/parse/lex.re"
	{
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2419 "src/parse/lex.cc"
yy370:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy368;
	goto yy299;
yy371:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy371;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy371;
		if (yych == '"') goto yy378;
		goto yy299;
	}
yy373:
	++cur;
	cur = yyt1;
#line 542 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2444 "src/parse/lex.cc"
yy375:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy373;
	goto yy299;
yy376:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy376;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy376;
		if (yych == '"') {
			yyt1 = cur;
			goto yy380;
		}
		goto yy299;
	}
yy378:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy378;
	}
	if (yych <= '\n') goto yy299;
	if (yych <= '"') goto yy382;
	goto yy383;
yy380:
	++cur;
	if ((lim - cur) < 4) { if (!fill(4)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy299;
		if (yych == '\n') goto yy299;
		goto yy380;
	} else {
		if (yych <= '"') goto yy384;
		if (yych == '\\') goto yy385;
		goto yy380;
	}
yy382:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy373;
	if (yych == '\r') goto yy375;
	goto yy299;
yy383:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy299;
	if (yych == '\n') goto yy299;
	goto yy378;
yy384:
	yych = (unsigned char)*++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy386;
		}
		goto yy299;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy386;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy388;
		}
		goto yy299;
	}
yy385:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy299;
	if (yych == '\n') goto yy299;
	goto yy380;
yy386:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy386;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy386;
		if (yych != ';') goto yy299;
	}
yy388:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy299;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy389;
		}
		if (yych <= '\f') goto yy299;
		yyt3 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy299;
			yyt3 = cur;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy391;
			}
			goto yy299;
		}
	}
yy389:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 513 "../src/parse/lex.re"
	{
        include(getstr(x + 1, y - 1), tok);
        goto scan;
    }
#line 2568 "src/parse/lex.cc"
yy391:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy389;
	goto yy299;
}
#line 562 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2581 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy395;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy395;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy398;
		}
	}
yy394:
#line 569 "../src/parse/lex.re"
	{ return false; }
#line 2638 "src/parse/lex.cc"
yy395:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy395;
	}
	if (yych == '=') goto yy398;
yy397:
	cur = mar;
	goto yy394;
yy398:
	yych = (unsigned char)*++cur;
	if (yych == '>') goto yy397;
	++cur;
	cur = yyt1;
#line 568 "../src/parse/lex.re"
	{ return true; }
#line 2657 "src/parse/lex.cc"
}
#line 570 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2666 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy404;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy404;
	}
#line 578 "../src/parse/lex.re"
	{ return false; }
#line 2715 "src/parse/lex.cc"
yy404:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy404;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy407;
	} else {
		if (yych <= '=') goto yy407;
		if (yych == '{') goto yy407;
	}
	cur = yyt1;
#line 577 "../src/parse/lex.re"
	{ return true; }
#line 2732 "src/parse/lex.cc"
yy407:
	++cur;
	cur = yyt1;
#line 576 "../src/parse/lex.re"
	{ return false; }
#line 2738 "src/parse/lex.cc"
}
#line 579 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2749 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy409;
yy410:
	++cur;
yy409:
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy410;
	}
	if (yych <= 0x1F) goto yy412;
	if (yych <= '!') goto yy413;
	if (yych == '>') goto yy416;
yy412:
#line 589 "../src/parse/lex.re"
	{ goto cond; }
#line 2801 "src/parse/lex.cc"
yy413:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') goto yy413;
	if (yych == ' ') goto yy413;
#line 587 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2810 "src/parse/lex.cc"
yy416:
	++cur;
#line 588 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2815 "src/parse/lex.cc"
}
#line 590 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2822 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy422;
		if (yych >= 'A') goto yy424;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy424;
		} else {
			if (yych <= '`') goto yy420;
			if (yych <= 'z') goto yy424;
		}
	}
yy420:
	++cur;
#line 596 "../src/parse/lex.re"
	{ goto error; }
#line 2876 "src/parse/lex.cc"
yy422:
	++cur;
#line 595 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2881 "src/parse/lex.cc"
yy424:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy424;
	}
#line 594 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2891 "src/parse/lex.cc"
}
#line 597 "../src/parse/lex.re"

next:

#line 2897 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy431;
		if (yych >= ' ') goto yy431;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy432;
		} else {
			if (yych == '>') goto yy435;
		}
	}
	++cur;
yy430:
#line 602 "../src/parse/lex.re"
	{ goto error; }
#line 2950 "src/parse/lex.cc"
yy431:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy437;
		if (yych <= 0x1F) goto yy430;
		goto yy437;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy430;
		} else {
			if (yych == '>') goto yy435;
			goto yy430;
		}
	}
yy432:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy432;
	}
#line 600 "../src/parse/lex.re"
	{ goto cond; }
#line 2974 "src/parse/lex.cc"
yy435:
	++cur;
#line 601 "../src/parse/lex.re"
	{ goto end; }
#line 2979 "src/parse/lex.cc"
yy437:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy437;
		if (yych >= ' ') goto yy437;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy432;
		} else {
			if (yych == '>') goto yy435;
		}
	}
	cur = mar;
	goto yy430;
}
#line 603 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 3014 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy442;
			if (yych == '\n') goto yy446;
			goto yy444;
		} else {
			if (yych <= '\r') goto yy448;
			if (yych == '"') goto yy449;
			goto yy444;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy449;
			if (yych == '/') goto yy451;
			goto yy444;
		} else {
			if (yych == '|') goto yy444;
			if (yych <= '}') goto yy452;
			goto yy444;
		}
	}
yy442:
	++cur;
#line 629 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3044 "src/parse/lex.cc"
yy444:
	++cur;
yy445:
#line 637 "../src/parse/lex.re"
	{ goto code; }
#line 3050 "src/parse/lex.cc"
yy446:
	yych = (unsigned char)*++cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy447;
		if (yych <= '\n') goto yy454;
	} else {
		if (yych <= '\r') goto yy454;
		if (yych == ' ') goto yy454;
	}
yy447:
#line 620 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 3070 "src/parse/lex.cc"
yy448:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy446;
	goto yy445;
yy449:
	++cur;
#line 636 "../src/parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3079 "src/parse/lex.cc"
yy451:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy456;
	if (yych == '/') goto yy458;
	goto yy445;
yy452:
	++cur;
#line 630 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 3092 "src/parse/lex.cc"
yy454:
	++cur;
	cur -= 1;
#line 619 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3098 "src/parse/lex.cc"
yy456:
	++cur;
#line 634 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3103 "src/parse/lex.cc"
yy458:
	++cur;
#line 635 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3108 "src/parse/lex.cc"
}
#line 638 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3120 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy462;
			if (yych == '\n') goto yy466;
			goto yy464;
		} else {
			if (yych <= '\r') goto yy468;
			if (yych == '"') goto yy469;
			goto yy464;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy469;
			if (yych == '/') goto yy471;
			goto yy464;
		} else {
			if (yych <= '{') goto yy472;
			if (yych == '}') goto yy474;
			goto yy464;
		}
	}
yy462:
	++cur;
#line 658 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3184 "src/parse/lex.cc"
yy464:
	++cur;
yy465:
#line 662 "../src/parse/lex.re"
	{ goto code; }
#line 3190 "src/parse/lex.cc"
yy466:
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy476;
	}
	if (yych == '#') goto yy479;
yy467:
#line 657 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3200 "src/parse/lex.cc"
yy468:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy466;
	goto yy465;
yy469:
	++cur;
#line 661 "../src/parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3209 "src/parse/lex.cc"
yy471:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy481;
	if (yych == '/') goto yy483;
	goto yy465;
yy472:
	++cur;
#line 655 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3219 "src/parse/lex.cc"
yy474:
	++cur;
#line 647 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3230 "src/parse/lex.cc"
yy476:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy476;
	}
	if (yych == '#') goto yy479;
yy478:
	cur = mar;
	goto yy467;
yy479:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy479;
		goto yy478;
	} else {
		if (yych <= ' ') goto yy479;
		if (yych == 'l') goto yy485;
		goto yy478;
	}
yy481:
	++cur;
#line 659 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3258 "src/parse/lex.cc"
yy483:
	++cur;
#line 660 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3263 "src/parse/lex.cc"
yy485:
	yych = (unsigned char)*++cur;
	if (yych != 'i') goto yy478;
	yych = (unsigned char)*++cur;
	if (yych != 'n') goto yy478;
	yych = (unsigned char)*++cur;
	if (yych != 'e') goto yy478;
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy490;
	if (yych <= '9') goto yy478;
	goto yy490;
yy489:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy490:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy489;
		goto yy478;
	} else {
		if (yych <= ' ') goto yy489;
		if (yych <= '0') goto yy478;
		if (yych >= ':') goto yy478;
		yyt1 = cur;
	}
yy491:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy491;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy478;
		if (yych <= '\t') goto yy493;
		if (yych <= '\n') goto yy495;
		goto yy478;
	} else {
		if (yych <= '\r') goto yy497;
		if (yych != ' ') goto yy478;
	}
yy493:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy493;
		goto yy478;
	} else {
		if (yych <= ' ') goto yy493;
		if (yych == '"') goto yy498;
		goto yy478;
	}
yy495:
	++cur;
	cur = yyt1;
#line 656 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3322 "src/parse/lex.cc"
yy497:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy495;
	goto yy478;
yy498:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy498;
	}
	if (yych <= '\n') goto yy478;
	if (yych >= '#') goto yy501;
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy495;
	if (yych == '\r') goto yy497;
	goto yy478;
yy501:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy478;
	if (yych == '\n') goto yy478;
	goto yy498;
}
#line 663 "../src/parse/lex.re"

}

void Scanner::try_lex_string_in_code(char quote)
{
    // We need to lex string literals in code blocks because they may contain closing
    // brace symbol that would otherwise be erroneously lexed as a real closing brace.
    //
    // However, single quote in Rust may be either the beginning of a char literal as in
    // '\u{1F600}', or a standalone one as in 'label. In the latter case trying to lex a
    // generic string literal will consume a fragment of the file until the next single
    // quote (if any) and result in either a spurios parse error, or incorrect generated
    // code. Therefore in Rust we try to lex a char literal, or else consume the quote.

    if (globopts->lang != LANG_RUST || quote != '\'') {
        lex_string(quote);
        return;
    }

    // Rust spec (literals): https://doc.rust-lang.org/reference/tokens.html#literals
    // Rust spec (input encoding): https://doc.rust-lang.org/reference/input-format.html

#line 3371 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy505;
			goto yy507;
		} else {
			if (yych <= 0x7F) goto yy505;
			if (yych >= 0xC2) goto yy508;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy509;
			if (yych <= 0xEF) goto yy510;
			goto yy511;
		} else {
			if (yych <= 0xF3) goto yy512;
			if (yych <= 0xF4) goto yy513;
		}
	}
yy504:
#line 691 "../src/parse/lex.re"
	{ return; }
#line 3431 "src/parse/lex.cc"
yy505:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy514;
yy506:
	cur = mar;
	goto yy504;
yy507:
	yych = (unsigned char)*++cur;
	if (yych <= 'm') {
		if (yych <= '\'') {
			if (yych == '"') goto yy505;
			if (yych <= '&') goto yy506;
			goto yy515;
		} else {
			if (yych <= '0') {
				if (yych <= '/') goto yy506;
				goto yy505;
			} else {
				if (yych == '\\') goto yy505;
				goto yy506;
			}
		}
	} else {
		if (yych <= 's') {
			if (yych <= 'n') goto yy505;
			if (yych == 'r') goto yy505;
			goto yy506;
		} else {
			if (yych <= 'u') {
				if (yych <= 't') goto yy505;
				goto yy516;
			} else {
				if (yych == 'x') goto yy517;
				goto yy506;
			}
		}
	}
yy508:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy506;
	if (yych <= 0xBF) goto yy505;
	goto yy506;
yy509:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy506;
	if (yych <= 0xBF) goto yy508;
	goto yy506;
yy510:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy506;
	if (yych <= 0xBF) goto yy508;
	goto yy506;
yy511:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy506;
	if (yych <= 0xBF) goto yy510;
	goto yy506;
yy512:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy506;
	if (yych <= 0xBF) goto yy510;
	goto yy506;
yy513:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy506;
	if (yych <= 0x8F) goto yy510;
	goto yy506;
yy514:
	++cur;
	goto yy504;
yy515:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy514;
	goto yy504;
yy516:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy518;
	goto yy506;
yy517:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy506;
	goto yy520;
yy518:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy506;
	goto yy522;
yy519:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy520:
	if (yybm[0+yych] & 128) {
		goto yy519;
	}
	if (yych == '\'') goto yy514;
	goto yy506;
yy521:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy522:
	if (yych <= 'F') {
		if (yych <= '/') goto yy506;
		if (yych <= '9') goto yy521;
		if (yych <= '@') goto yy506;
		goto yy521;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy506;
			goto yy521;
		} else {
			if (yych == '}') goto yy505;
			goto yy506;
		}
	}
}
#line 692 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3556 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy525;
			if (yych <= '\t') goto yy527;
			goto yy529;
		} else {
			if (yych == '\r') goto yy531;
			goto yy527;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy532;
			if (yych <= '&') goto yy527;
			goto yy532;
		} else {
			if (yych == '\\') goto yy534;
			goto yy527;
		}
	}
yy525:
	++cur;
#line 702 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3584 "src/parse/lex.cc"
yy527:
	++cur;
yy528:
#line 703 "../src/parse/lex.re"
	{ goto loop; }
#line 3590 "src/parse/lex.cc"
yy529:
	++cur;
#line 701 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3595 "src/parse/lex.cc"
yy531:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy529;
	goto yy528;
yy532:
	++cur;
#line 699 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3604 "src/parse/lex.cc"
yy534:
	yych = (unsigned char)*++cur;
	if (yych <= '&') {
		if (yych != '"') goto yy528;
	} else {
		if (yych <= '\'') goto yy535;
		if (yych != '\\') goto yy528;
	}
yy535:
	++cur;
#line 700 "../src/parse/lex.re"
	{ goto loop; }
#line 3617 "src/parse/lex.cc"
}
#line 704 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3627 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy539;
		if (yych == '\n') goto yy543;
		goto yy541;
	} else {
		if (yych <= '\r') goto yy545;
		if (yych == '*') goto yy546;
		goto yy541;
	}
yy539:
	++cur;
#line 713 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3645 "src/parse/lex.cc"
yy541:
	++cur;
yy542:
#line 714 "../src/parse/lex.re"
	{ goto loop; }
#line 3651 "src/parse/lex.cc"
yy543:
	++cur;
#line 712 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3656 "src/parse/lex.cc"
yy545:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy543;
	goto yy542;
yy546:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy542;
	++cur;
#line 711 "../src/parse/lex.re"
	{ return; }
#line 3667 "src/parse/lex.cc"
}
#line 715 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3677 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy551;
		if (yych <= '\t') goto yy553;
		goto yy555;
	} else {
		if (yych == '\r') goto yy557;
		goto yy553;
	}
yy551:
	++cur;
#line 723 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3694 "src/parse/lex.cc"
yy553:
	++cur;
yy554:
#line 724 "../src/parse/lex.re"
	{ goto loop; }
#line 3700 "src/parse/lex.cc"
yy555:
	++cur;
#line 722 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3705 "src/parse/lex.cc"
yy557:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy555;
	goto yy554;
}
#line 725 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3724 "src/parse/lex.cc"
{
	unsigned char yych;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == ']') goto yy561;
#line 738 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3732 "src/parse/lex.cc"
yy561:
	++cur;
#line 737 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3737 "src/parse/lex.cc"
}
#line 739 "../src/parse/lex.re"

snd:

#line 3743 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych == '-') goto yy566;
yy565:
#line 742 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3752 "src/parse/lex.cc"
yy566:
	yych = (unsigned char)*++cur;
	if (yych != ']') goto yy568;
	cur = mar;
	goto yy565;
yy568:
	++cur;
	cur -= 1;
#line 743 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3770 "src/parse/lex.cc"
}
#line 751 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 789 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3788 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy572;
		if (yych == '\n') goto yy576;
		goto yy574;
	} else {
		if (yych <= '\r') goto yy578;
		if (yych == '\\') goto yy579;
		goto yy574;
	}
yy572:
	++cur;
#line 770 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3807 "src/parse/lex.cc"
yy574:
	++cur;
yy575:
#line 772 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3813 "src/parse/lex.cc"
yy576:
	++cur;
#line 764 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3818 "src/parse/lex.cc"
yy578:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy576;
	goto yy575;
yy579:
	yych = (unsigned char)*++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy580;
				if (yych == '\n') goto yy576;
				goto yy581;
			} else {
				if (yych <= '\r') goto yy583;
				if (yych == '-') goto yy584;
				goto yy581;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy586;
				if (yych <= '7') goto yy588;
				if (yych <= 'T') goto yy581;
				goto yy589;
			} else {
				if (yych == 'X') goto yy591;
				if (yych <= '[') goto yy581;
				goto yy592;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy594;
				if (yych <= '`') goto yy581;
				if (yych <= 'a') goto yy596;
				goto yy598;
			} else {
				if (yych == 'f') goto yy600;
				if (yych <= 'm') goto yy581;
				goto yy602;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy604;
				if (yych <= 's') goto yy581;
				goto yy606;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy591;
					goto yy608;
				} else {
					if (yych == 'x') goto yy610;
					goto yy581;
				}
			}
		}
	}
yy580:
#line 767 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3879 "src/parse/lex.cc"
yy581:
	++cur;
yy582:
#line 785 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3888 "src/parse/lex.cc"
yy583:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy576;
	goto yy582;
yy584:
	++cur;
#line 783 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3897 "src/parse/lex.cc"
yy586:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy587;
	if (yych <= '7') goto yy611;
yy587:
#line 766 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3906 "src/parse/lex.cc"
yy588:
	++cur;
	goto yy587;
yy589:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy613;
	} else {
		if (yych <= 'F') goto yy613;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy613;
	}
yy590:
#line 765 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3924 "src/parse/lex.cc"
yy591:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy614;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy614;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy614;
		goto yy590;
	}
yy592:
	++cur;
#line 782 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3942 "src/parse/lex.cc"
yy594:
	++cur;
#line 784 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3947 "src/parse/lex.cc"
yy596:
	++cur;
#line 775 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3952 "src/parse/lex.cc"
yy598:
	++cur;
#line 776 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3957 "src/parse/lex.cc"
yy600:
	++cur;
#line 777 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3962 "src/parse/lex.cc"
yy602:
	++cur;
#line 778 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3967 "src/parse/lex.cc"
yy604:
	++cur;
#line 779 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3972 "src/parse/lex.cc"
yy606:
	++cur;
#line 780 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3977 "src/parse/lex.cc"
yy608:
	++cur;
#line 781 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3982 "src/parse/lex.cc"
yy610:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy615;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy615;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy615;
		goto yy590;
	}
yy611:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy612;
	if (yych <= '7') goto yy616;
yy612:
	cur = mar;
	if (yyaccept == 0) {
		goto yy587;
	} else {
		goto yy590;
	}
yy613:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy612;
		if (yych <= '9') goto yy618;
		goto yy612;
	} else {
		if (yych <= 'F') goto yy618;
		if (yych <= '`') goto yy612;
		if (yych <= 'f') goto yy618;
		goto yy612;
	}
yy614:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy612;
		if (yych <= '9') goto yy619;
		goto yy612;
	} else {
		if (yych <= 'F') goto yy619;
		if (yych <= '`') goto yy612;
		if (yych <= 'f') goto yy619;
		goto yy612;
	}
yy615:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy612;
		if (yych <= '9') goto yy620;
		goto yy612;
	} else {
		if (yych <= 'F') goto yy620;
		if (yych <= '`') goto yy612;
		if (yych <= 'f') goto yy620;
		goto yy612;
	}
yy616:
	++cur;
#line 774 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4047 "src/parse/lex.cc"
yy618:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy612;
		if (yych <= '9') goto yy622;
		goto yy612;
	} else {
		if (yych <= 'F') goto yy622;
		if (yych <= '`') goto yy612;
		if (yych <= 'f') goto yy622;
		goto yy612;
	}
yy619:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy612;
		if (yych <= '9') goto yy615;
		goto yy612;
	} else {
		if (yych <= 'F') goto yy615;
		if (yych <= '`') goto yy612;
		if (yych <= 'f') goto yy615;
		goto yy612;
	}
yy620:
	++cur;
#line 773 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4076 "src/parse/lex.cc"
yy622:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy612;
		if (yych >= ':') goto yy612;
	} else {
		if (yych <= 'F') goto yy623;
		if (yych <= '`') goto yy612;
		if (yych >= 'g') goto yy612;
	}
yy623:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy612;
		if (yych <= '9') goto yy614;
		goto yy612;
	} else {
		if (yych <= 'F') goto yy614;
		if (yych <= '`') goto yy612;
		if (yych <= 'f') goto yy614;
		goto yy612;
	}
}
#line 791 "../src/parse/lex.re"

    }
    else {
        
#line 4105 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy626;
			if (yych == '\n') goto yy630;
			goto yy628;
		} else {
			if (yych <= '\r') goto yy632;
			if (yych == '\\') goto yy633;
			goto yy628;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy635;
			if (yych <= 0xDF) goto yy637;
			if (yych <= 0xE0) goto yy638;
			goto yy639;
		} else {
			if (yych <= 0xF0) goto yy640;
			if (yych <= 0xF3) goto yy641;
			if (yych <= 0xF4) goto yy642;
			goto yy635;
		}
	}
yy626:
	++cur;
#line 770 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 4138 "src/parse/lex.cc"
yy628:
	++cur;
yy629:
#line 772 "../src/parse/lex.re"
	{ return decode(tok); }
#line 4144 "src/parse/lex.cc"
yy630:
	++cur;
#line 764 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 4149 "src/parse/lex.cc"
yy632:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy630;
	goto yy629;
yy633:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy643;
				} else {
					if (yych <= '\n') goto yy630;
					if (yych <= '\f') goto yy643;
					goto yy645;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy643;
					goto yy646;
				} else {
					if (yych <= '/') goto yy643;
					if (yych <= '3') goto yy648;
					goto yy650;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy643;
					goto yy651;
				} else {
					if (yych == 'X') goto yy653;
					goto yy643;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy654;
					goto yy656;
				} else {
					if (yych <= '`') goto yy643;
					if (yych <= 'a') goto yy658;
					goto yy660;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy643;
					goto yy662;
				} else {
					if (yych == 'n') goto yy664;
					goto yy643;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy666;
					goto yy643;
				} else {
					if (yych <= 't') goto yy668;
					if (yych <= 'u') goto yy653;
					goto yy670;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy643;
					goto yy672;
				} else {
					if (yych <= 0x7F) goto yy643;
					if (yych >= 0xC2) goto yy673;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy675;
					if (yych <= 0xEF) goto yy676;
					goto yy677;
				} else {
					if (yych <= 0xF3) goto yy678;
					if (yych <= 0xF4) goto yy679;
				}
			}
		}
	}
yy634:
#line 767 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 4241 "src/parse/lex.cc"
yy635:
	++cur;
yy636:
#line 768 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 4247 "src/parse/lex.cc"
yy637:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy636;
	if (yych <= 0xBF) goto yy628;
	goto yy636;
yy638:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy636;
	if (yych <= 0xBF) goto yy680;
	goto yy636;
yy639:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy636;
	if (yych <= 0xBF) goto yy680;
	goto yy636;
yy640:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy636;
	if (yych <= 0xBF) goto yy681;
	goto yy636;
yy641:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy636;
	if (yych <= 0xBF) goto yy681;
	goto yy636;
yy642:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy636;
	if (yych <= 0x8F) goto yy681;
	goto yy636;
yy643:
	++cur;
yy644:
#line 785 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 4291 "src/parse/lex.cc"
yy645:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy630;
	goto yy644;
yy646:
	++cur;
#line 783 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4300 "src/parse/lex.cc"
yy648:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy649;
	if (yych <= '7') goto yy682;
yy649:
#line 766 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4309 "src/parse/lex.cc"
yy650:
	++cur;
	goto yy649;
yy651:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy683;
	} else {
		if (yych <= 'F') goto yy683;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy683;
	}
yy652:
#line 765 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4327 "src/parse/lex.cc"
yy653:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy684;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy684;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy684;
		goto yy652;
	}
yy654:
	++cur;
#line 782 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4345 "src/parse/lex.cc"
yy656:
	++cur;
#line 784 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4350 "src/parse/lex.cc"
yy658:
	++cur;
#line 775 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4355 "src/parse/lex.cc"
yy660:
	++cur;
#line 776 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4360 "src/parse/lex.cc"
yy662:
	++cur;
#line 777 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4365 "src/parse/lex.cc"
yy664:
	++cur;
#line 778 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4370 "src/parse/lex.cc"
yy666:
	++cur;
#line 779 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4375 "src/parse/lex.cc"
yy668:
	++cur;
#line 780 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4380 "src/parse/lex.cc"
yy670:
	++cur;
#line 781 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4385 "src/parse/lex.cc"
yy672:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy685;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy685;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy685;
		goto yy652;
	}
yy673:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy674;
	if (yych <= 0xBF) goto yy643;
yy674:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy634;
		} else {
			goto yy636;
		}
	} else {
		if (yyaccept == 2) {
			goto yy649;
		} else {
			goto yy652;
		}
	}
yy675:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy674;
	if (yych <= 0xBF) goto yy673;
	goto yy674;
yy676:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy674;
	if (yych <= 0xBF) goto yy673;
	goto yy674;
yy677:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy674;
	if (yych <= 0xBF) goto yy676;
	goto yy674;
yy678:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy674;
	if (yych <= 0xBF) goto yy676;
	goto yy674;
yy679:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy674;
	if (yych <= 0x8F) goto yy676;
	goto yy674;
yy680:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy674;
	if (yych <= 0xBF) goto yy628;
	goto yy674;
yy681:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy674;
	if (yych <= 0xBF) goto yy680;
	goto yy674;
yy682:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy674;
	if (yych <= '7') goto yy686;
	goto yy674;
yy683:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy688;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy688;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy688;
		goto yy674;
	}
yy684:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy689;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy689;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy689;
		goto yy674;
	}
yy685:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy690;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy690;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy690;
		goto yy674;
	}
yy686:
	++cur;
#line 774 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4498 "src/parse/lex.cc"
yy688:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy692;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy692;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy692;
		goto yy674;
	}
yy689:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy685;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy685;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy685;
		goto yy674;
	}
yy690:
	++cur;
#line 773 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4527 "src/parse/lex.cc"
yy692:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych >= ':') goto yy674;
	} else {
		if (yych <= 'F') goto yy693;
		if (yych <= '`') goto yy674;
		if (yych >= 'g') goto yy674;
	}
yy693:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy684;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy684;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy684;
		goto yy674;
	}
}
#line 794 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();
    #line 828 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4564 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy696;
		if (yych == '\n') goto yy700;
		goto yy698;
	} else {
		if (yych <= '\r') goto yy702;
		if (yych == '\\') goto yy703;
		goto yy698;
	}
yy696:
	++cur;
#line 810 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4583 "src/parse/lex.cc"
yy698:
	++cur;
yy699:
#line 812 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4589 "src/parse/lex.cc"
yy700:
	++cur;
#line 804 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4594 "src/parse/lex.cc"
yy702:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy700;
	goto yy699;
yy703:
	yych = (unsigned char)*++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy704;
				if (yych <= '\t') goto yy705;
				goto yy700;
			} else {
				if (yych == '\r') goto yy707;
				if (yych <= '/') goto yy705;
				goto yy708;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy710;
				if (yych == 'U') goto yy711;
				goto yy705;
			} else {
				if (yych <= 'X') goto yy713;
				if (yych == '\\') goto yy714;
				goto yy705;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy716;
				if (yych <= 'b') goto yy718;
				goto yy705;
			} else {
				if (yych <= 'f') goto yy720;
				if (yych == 'n') goto yy722;
				goto yy705;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy724;
				if (yych <= 's') goto yy705;
				if (yych <= 't') goto yy726;
				goto yy713;
			} else {
				if (yych <= 'v') goto yy728;
				if (yych == 'x') goto yy730;
				goto yy705;
			}
		}
	}
yy704:
#line 807 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4650 "src/parse/lex.cc"
yy705:
	++cur;
yy706:
#line 823 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4660 "src/parse/lex.cc"
yy707:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy700;
	goto yy706;
yy708:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy709;
	if (yych <= '7') goto yy731;
yy709:
#line 806 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4673 "src/parse/lex.cc"
yy710:
	++cur;
	goto yy709;
yy711:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy712;
		if (yych <= '9') goto yy733;
	} else {
		if (yych <= 'F') goto yy733;
		if (yych <= '`') goto yy712;
		if (yych <= 'f') goto yy733;
	}
yy712:
#line 805 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4691 "src/parse/lex.cc"
yy713:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy712;
		if (yych <= '9') goto yy734;
		goto yy712;
	} else {
		if (yych <= 'F') goto yy734;
		if (yych <= '`') goto yy712;
		if (yych <= 'f') goto yy734;
		goto yy712;
	}
yy714:
	++cur;
#line 822 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4709 "src/parse/lex.cc"
yy716:
	++cur;
#line 815 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4714 "src/parse/lex.cc"
yy718:
	++cur;
#line 816 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4719 "src/parse/lex.cc"
yy720:
	++cur;
#line 817 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4724 "src/parse/lex.cc"
yy722:
	++cur;
#line 818 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4729 "src/parse/lex.cc"
yy724:
	++cur;
#line 819 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4734 "src/parse/lex.cc"
yy726:
	++cur;
#line 820 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4739 "src/parse/lex.cc"
yy728:
	++cur;
#line 821 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4744 "src/parse/lex.cc"
yy730:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy712;
		if (yych <= '9') goto yy735;
		goto yy712;
	} else {
		if (yych <= 'F') goto yy735;
		if (yych <= '`') goto yy712;
		if (yych <= 'f') goto yy735;
		goto yy712;
	}
yy731:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy732;
	if (yych <= '7') goto yy736;
yy732:
	cur = mar;
	if (yyaccept == 0) {
		goto yy709;
	} else {
		goto yy712;
	}
yy733:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy738;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy738;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy738;
		goto yy732;
	}
yy734:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy739;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy739;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy739;
		goto yy732;
	}
yy735:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy740;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy740;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy740;
		goto yy732;
	}
yy736:
	++cur;
#line 814 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4809 "src/parse/lex.cc"
yy738:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy742;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy742;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy742;
		goto yy732;
	}
yy739:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy735;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy735;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy735;
		goto yy732;
	}
yy740:
	++cur;
#line 813 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4838 "src/parse/lex.cc"
yy742:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych >= ':') goto yy732;
	} else {
		if (yych <= 'F') goto yy743;
		if (yych <= '`') goto yy732;
		if (yych >= 'g') goto yy732;
	}
yy743:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy734;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy734;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy734;
		goto yy732;
	}
}
#line 830 "../src/parse/lex.re"

    }
    else {
        
#line 4867 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy746;
			if (yych == '\n') goto yy750;
			goto yy748;
		} else {
			if (yych <= '\r') goto yy752;
			if (yych == '\\') goto yy753;
			goto yy748;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy755;
			if (yych <= 0xDF) goto yy757;
			if (yych <= 0xE0) goto yy758;
			goto yy759;
		} else {
			if (yych <= 0xF0) goto yy760;
			if (yych <= 0xF3) goto yy761;
			if (yych <= 0xF4) goto yy762;
			goto yy755;
		}
	}
yy746:
	++cur;
#line 810 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4900 "src/parse/lex.cc"
yy748:
	++cur;
yy749:
#line 812 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4906 "src/parse/lex.cc"
yy750:
	++cur;
#line 804 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4911 "src/parse/lex.cc"
yy752:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy750;
	goto yy749;
yy753:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy754;
				if (yych == '\n') goto yy750;
				goto yy763;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy765;
					goto yy763;
				} else {
					if (yych <= '3') goto yy766;
					if (yych <= '7') goto yy768;
					goto yy763;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy769;
					goto yy763;
				} else {
					if (yych <= 'X') goto yy771;
					if (yych <= '[') goto yy763;
					goto yy772;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy763;
					goto yy774;
				} else {
					if (yych <= 'b') goto yy776;
					if (yych <= 'e') goto yy763;
					goto yy778;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy780;
				if (yych <= 'q') goto yy763;
				goto yy782;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy763;
					goto yy784;
				} else {
					if (yych <= 'u') goto yy771;
					if (yych <= 'v') goto yy786;
					goto yy763;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy788;
					goto yy763;
				} else {
					if (yych <= 0xC1) goto yy754;
					if (yych <= 0xDF) goto yy789;
					goto yy791;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy792;
					goto yy793;
				} else {
					if (yych <= 0xF3) goto yy794;
					if (yych <= 0xF4) goto yy795;
				}
			}
		}
	}
yy754:
#line 807 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4996 "src/parse/lex.cc"
yy755:
	++cur;
yy756:
#line 808 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 5002 "src/parse/lex.cc"
yy757:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy756;
	if (yych <= 0xBF) goto yy748;
	goto yy756;
yy758:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy756;
	if (yych <= 0xBF) goto yy796;
	goto yy756;
yy759:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy756;
	if (yych <= 0xBF) goto yy796;
	goto yy756;
yy760:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy756;
	if (yych <= 0xBF) goto yy797;
	goto yy756;
yy761:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy756;
	if (yych <= 0xBF) goto yy797;
	goto yy756;
yy762:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy756;
	if (yych <= 0x8F) goto yy797;
	goto yy756;
yy763:
	++cur;
yy764:
#line 823 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 5047 "src/parse/lex.cc"
yy765:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy750;
	goto yy764;
yy766:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy767;
	if (yych <= '7') goto yy798;
yy767:
#line 806 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 5060 "src/parse/lex.cc"
yy768:
	++cur;
	goto yy767;
yy769:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy770;
		if (yych <= '9') goto yy799;
	} else {
		if (yych <= 'F') goto yy799;
		if (yych <= '`') goto yy770;
		if (yych <= 'f') goto yy799;
	}
yy770:
#line 805 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 5078 "src/parse/lex.cc"
yy771:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy770;
		if (yych <= '9') goto yy800;
		goto yy770;
	} else {
		if (yych <= 'F') goto yy800;
		if (yych <= '`') goto yy770;
		if (yych <= 'f') goto yy800;
		goto yy770;
	}
yy772:
	++cur;
#line 822 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 5096 "src/parse/lex.cc"
yy774:
	++cur;
#line 815 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 5101 "src/parse/lex.cc"
yy776:
	++cur;
#line 816 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 5106 "src/parse/lex.cc"
yy778:
	++cur;
#line 817 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 5111 "src/parse/lex.cc"
yy780:
	++cur;
#line 818 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 5116 "src/parse/lex.cc"
yy782:
	++cur;
#line 819 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 5121 "src/parse/lex.cc"
yy784:
	++cur;
#line 820 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 5126 "src/parse/lex.cc"
yy786:
	++cur;
#line 821 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 5131 "src/parse/lex.cc"
yy788:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy770;
		if (yych <= '9') goto yy801;
		goto yy770;
	} else {
		if (yych <= 'F') goto yy801;
		if (yych <= '`') goto yy770;
		if (yych <= 'f') goto yy801;
		goto yy770;
	}
yy789:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy790;
	if (yych <= 0xBF) goto yy763;
yy790:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy754;
		} else {
			goto yy756;
		}
	} else {
		if (yyaccept == 2) {
			goto yy767;
		} else {
			goto yy770;
		}
	}
yy791:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy790;
	if (yych <= 0xBF) goto yy789;
	goto yy790;
yy792:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy790;
	if (yych <= 0xBF) goto yy789;
	goto yy790;
yy793:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy790;
	if (yych <= 0xBF) goto yy792;
	goto yy790;
yy794:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy790;
	if (yych <= 0xBF) goto yy792;
	goto yy790;
yy795:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy790;
	if (yych <= 0x8F) goto yy792;
	goto yy790;
yy796:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy790;
	if (yych <= 0xBF) goto yy748;
	goto yy790;
yy797:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy790;
	if (yych <= 0xBF) goto yy796;
	goto yy790;
yy798:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy790;
	if (yych <= '7') goto yy802;
	goto yy790;
yy799:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy790;
		if (yych <= '9') goto yy804;
		goto yy790;
	} else {
		if (yych <= 'F') goto yy804;
		if (yych <= '`') goto yy790;
		if (yych <= 'f') goto yy804;
		goto yy790;
	}
yy800:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy790;
		if (yych <= '9') goto yy805;
		goto yy790;
	} else {
		if (yych <= 'F') goto yy805;
		if (yych <= '`') goto yy790;
		if (yych <= 'f') goto yy805;
		goto yy790;
	}
yy801:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy790;
		if (yych <= '9') goto yy806;
		goto yy790;
	} else {
		if (yych <= 'F') goto yy806;
		if (yych <= '`') goto yy790;
		if (yych <= 'f') goto yy806;
		goto yy790;
	}
yy802:
	++cur;
#line 814 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 5244 "src/parse/lex.cc"
yy804:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy790;
		if (yych <= '9') goto yy808;
		goto yy790;
	} else {
		if (yych <= 'F') goto yy808;
		if (yych <= '`') goto yy790;
		if (yych <= 'f') goto yy808;
		goto yy790;
	}
yy805:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy790;
		if (yych <= '9') goto yy801;
		goto yy790;
	} else {
		if (yych <= 'F') goto yy801;
		if (yych <= '`') goto yy790;
		if (yych <= 'f') goto yy801;
		goto yy790;
	}
yy806:
	++cur;
#line 813 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 5273 "src/parse/lex.cc"
yy808:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy790;
		if (yych >= ':') goto yy790;
	} else {
		if (yych <= 'F') goto yy809;
		if (yych <= '`') goto yy790;
		if (yych >= 'g') goto yy790;
	}
yy809:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy790;
		if (yych <= '9') goto yy800;
		goto yy790;
	} else {
		if (yych <= 'F') goto yy800;
		if (yych <= '`') goto yy790;
		if (yych <= 'f') goto yy800;
		goto yy790;
	}
}
#line 833 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5320 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy814;
		} else {
			if (yych <= '\n') goto yy816;
			if (yych <= '\f') goto yy814;
			goto yy818;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy814;
			goto yy819;
		} else {
			if (yych <= '0') goto yy814;
			if (yych <= '9') goto yy820;
			goto yy814;
		}
	}
	++cur;
#line 875 "../src/parse/lex.re"
	{ --cur; return; }
#line 5380 "src/parse/lex.cc"
yy814:
	++cur;
yy815:
#line 876 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5386 "src/parse/lex.cc"
yy816:
	++cur;
#line 874 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5391 "src/parse/lex.cc"
yy818:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy816;
	goto yy815;
yy819:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x00) goto yy815;
	if (yych == '\n') goto yy815;
	goto yy824;
yy820:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy820;
	}
#line 855 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5418 "src/parse/lex.cc"
yy823:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy824:
	if (yybm[0+yych] & 128) {
		goto yy823;
	}
	if (yych <= '\n') goto yy825;
	if (yych <= '"') goto yy826;
	goto yy828;
yy825:
	cur = mar;
	goto yy815;
yy826:
	++cur;
#line 865 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5444 "src/parse/lex.cc"
yy828:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy825;
	if (yych == '\n') goto yy825;
	goto yy823;
}
#line 877 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
