/* Generated by re2c 2.2 on Fri Dec 24 21:36:58 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/file_utils.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

// Global re2c configurations and definitions.
#line 64 "../src/parse/lex.re"


#line 123 "../src/parse/lex.re"


InputBlockKind Scanner::echo(Output &out, std::string &block_name)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;

    if (is_eof()) return INPUT_END;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 55 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) { if (!fill(18)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy2;
			if (yych <= 0x08) goto yy4;
			goto yy6;
		} else {
			if (yych <= '\n') goto yy7;
			if (yych <= '\f') goto yy4;
			goto yy9;
		}
	} else {
		if (yych <= '$') {
			if (yych == ' ') goto yy6;
			goto yy4;
		} else {
			if (yych <= '%') goto yy10;
			if (yych == '/') goto yy11;
			goto yy4;
		}
	}
yy2:
	++cur;
#line 273 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return INPUT_END;
        }
        goto loop;
    }
#line 125 "src/parse/lex.cc"
yy4:
	++cur;
yy5:
#line 293 "../src/parse/lex.re"
	{ goto loop; }
#line 131 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy12;
	}
	if (yych == '%') goto yy15;
	goto yy5;
yy7:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy16;
	} else {
		if (yych <= ' ') goto yy16;
		if (yych == '#') goto yy18;
	}
yy8:
#line 288 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 155 "src/parse/lex.cc"
yy9:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy7;
	goto yy5;
yy10:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy20;
	goto yy5;
yy11:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '*') goto yy22;
	goto yy5;
yy12:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy12;
	}
	if (yych == '%') goto yy15;
yy14:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy5;
			} else {
				goto yy8;
			}
		} else {
			goto yy173;
		}
	} else {
		if (yyaccept == 3) {
			goto yy175;
		} else {
			goto yy184;
		}
	}
yy15:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy20;
	goto yy14;
yy16:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy16;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy16;
		if (yych != '#') goto yy14;
	}
yy18:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy18;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy18;
		if (yych == 'l') goto yy23;
		goto yy14;
	}
yy20:
	++cur;
#line 139 "../src/parse/lex.re"
	{
        if (pos != ptr) {
            // re2c does not parse user-defined code outside of re2c blocks, therefore it
            // can confuse `%{` in the middle of a string or a comment with a block start.
            // To avoid this recognize `%{` as a block start only on a new line, possibly
            // preceded by whitespaces.
            goto loop;
        }
        out.wraw(tok, ptr);
        block_name.clear();
        return INPUT_GLOBAL;
    }
#line 238 "src/parse/lex.cc"
yy22:
	yych = (unsigned char)*++cur;
	if (yych == '!') goto yy24;
	goto yy14;
yy23:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy25;
	goto yy14;
yy24:
	yych = (unsigned char)*++cur;
	switch (yych) {
	case 'c':	goto yy26;
	case 'g':	goto yy27;
	case 'h':	goto yy28;
	case 'i':	goto yy29;
	case 'l':	goto yy30;
	case 'm':	goto yy31;
	case 'r':	goto yy32;
	case 's':	goto yy33;
	case 't':	goto yy34;
	case 'u':	goto yy35;
	default:	goto yy14;
	}
yy25:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy36;
	goto yy14;
yy26:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy37;
	goto yy14;
yy27:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy38;
	goto yy14;
yy28:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy39;
	goto yy14;
yy29:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy40;
	if (yych == 'n') goto yy41;
	goto yy14;
yy30:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy42;
	goto yy14;
yy31:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy43;
	if (yych == 't') goto yy44;
	goto yy14;
yy32:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy45;
	if (yych == 'u') goto yy46;
	goto yy14;
yy33:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy47;
	goto yy14;
yy34:
	yych = (unsigned char)*++cur;
	if (yych == 'y') goto yy48;
	goto yy14;
yy35:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy49;
	goto yy14;
yy36:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy50;
	goto yy14;
yy37:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy51;
	goto yy14;
yy38:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy52;
	goto yy14;
yy39:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy53;
	goto yy14;
yy40:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy54;
	goto yy14;
yy41:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy55;
	goto yy14;
yy42:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy56;
	goto yy14;
yy43:
	yych = (unsigned char)*++cur;
	if (yych == 'x') goto yy57;
	goto yy14;
yy44:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy58;
	goto yy14;
yy45:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy59;
	goto yy14;
yy46:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy60;
	goto yy14;
yy47:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy61;
	goto yy14;
yy48:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy62;
	goto yy14;
yy49:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy63;
	goto yy14;
yy50:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy65;
	if (yych <= '9') goto yy14;
	goto yy65;
yy51:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy66;
	goto yy14;
yy52:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy67;
	goto yy14;
yy53:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy68;
	goto yy14;
yy54:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy69;
	goto yy14;
yy55:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy70;
	goto yy14;
yy56:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy71;
	goto yy14;
yy57:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy72;
	if (yych == 'n') goto yy73;
	goto yy14;
yy58:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy74;
	goto yy14;
yy59:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy75;
	goto yy14;
yy60:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy77;
	goto yy14;
yy61:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy78;
	goto yy14;
yy62:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy79;
	goto yy14;
yy63:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy80;
	goto yy14;
yy64:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy65:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy64;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy64;
		if (yych <= '0') goto yy14;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy81;
		}
		goto yy14;
	}
yy66:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy83;
	goto yy14;
yy67:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy84;
	goto yy14;
yy68:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy85;
	goto yy14;
yy69:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy86;
	goto yy14;
yy70:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy87;
	goto yy14;
yy71:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy88;
	goto yy14;
yy72:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy89;
	goto yy14;
yy73:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy90;
	goto yy14;
yy74:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy91;
	goto yy14;
yy75:
	++cur;
#line 152 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        if (block_name == "local") {
            msg.error(cur_loc(), "ill-formed local block, expected `local:re2c`");
            return INPUT_ERROR;
        }
        return INPUT_GLOBAL;
    }
#line 488 "src/parse/lex.cc"
yy77:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy92;
	goto yy14;
yy78:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy93;
	goto yy14;
yy79:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy94;
	goto yy14;
yy80:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy95;
	goto yy14;
yy81:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy81;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy14;
		if (yych <= '\t') goto yy96;
		if (yych <= '\n') goto yy98;
		goto yy14;
	} else {
		if (yych <= '\r') goto yy100;
		if (yych == ' ') goto yy96;
		goto yy14;
	}
yy83:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy101;
	goto yy14;
yy84:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy102;
	goto yy14;
yy85:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy103;
	goto yy14;
yy86:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy104;
	goto yy14;
yy87:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy105;
	goto yy14;
yy88:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy106;
	goto yy14;
yy89:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy107;
	goto yy14;
yy90:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy108;
	goto yy14;
yy91:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy109;
	goto yy14;
yy92:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy110;
	goto yy14;
yy93:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy111;
	goto yy14;
yy94:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy112;
	goto yy14;
yy95:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy113;
	goto yy14;
yy96:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy96;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy96;
		if (yych == '"') goto yy114;
		goto yy14;
	}
yy98:
	++cur;
	cur = yyt1;
#line 281 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 596 "src/parse/lex.cc"
yy100:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy98;
	goto yy14;
yy101:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy116;
	goto yy14;
yy102:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy117;
	goto yy14;
yy103:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy118;
	goto yy14;
yy104:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy119;
	goto yy14;
yy105:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy120;
	goto yy14;
yy106:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy121;
	goto yy14;
yy107:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy122;
	goto yy14;
yy108:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy123;
	goto yy14;
yy109:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy124;
	goto yy14;
yy110:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy125;
	goto yy14;
yy111:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy126;
	goto yy14;
yy112:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy127;
	goto yy14;
yy113:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy128;
	goto yy14;
yy114:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy114;
	}
	if (yych <= '\n') goto yy14;
	if (yych <= '"') goto yy129;
	goto yy130;
yy116:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy131;
	goto yy14;
yy117:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy132;
	goto yy14;
yy118:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy133;
	goto yy14;
yy119:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy134;
	goto yy14;
yy120:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy135;
	goto yy14;
yy121:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy136;
	goto yy14;
yy122:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy137;
	goto yy14;
yy123:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy139;
	goto yy14;
yy124:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy140;
	goto yy14;
yy125:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy141;
	goto yy14;
yy126:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy142;
	goto yy14;
yy127:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy143;
	goto yy14;
yy128:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy144;
	goto yy14;
yy129:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy98;
	if (yych == '\r') goto yy100;
	goto yy14;
yy130:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy14;
	if (yych == '\n') goto yy14;
	goto yy114;
yy131:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy79;
	goto yy14;
yy132:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy146;
	goto yy14;
yy133:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy147;
	goto yy14;
yy134:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy148;
	goto yy14;
yy135:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy149;
	goto yy14;
yy136:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy150;
	goto yy14;
yy137:
	++cur;
#line 180 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXFILL, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 758 "src/parse/lex.cc"
yy139:
	yych = (unsigned char)*++cur;
	if (yych == 'h') goto yy151;
	goto yy14;
yy140:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy152;
	goto yy14;
yy141:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy153;
	goto yy14;
yy142:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy154;
	goto yy14;
yy143:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy155;
	goto yy14;
yy144:
	++cur;
#line 174 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_USE;
    }
#line 787 "src/parse/lex.cc"
yy146:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy156;
	goto yy14;
yy147:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy157;
	goto yy14;
yy148:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy158;
	goto yy14;
yy149:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy159;
	goto yy14;
yy150:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy160;
	goto yy14;
yy151:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy162;
	goto yy14;
yy152:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy163;
	goto yy14;
yy153:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy165;
	goto yy14;
yy154:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy167;
	goto yy14;
yy155:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy169;
	goto yy14;
yy156:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy171;
	goto yy14;
yy157:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy172;
	goto yy14;
yy158:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy174;
	goto yy14;
yy159:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy176;
	goto yy14;
yy160:
	++cur;
#line 162 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_LOCAL;
    }
#line 852 "src/parse/lex.cc"
yy162:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy177;
	goto yy14;
yy163:
	++cur;
#line 196 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_MTAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 865 "src/parse/lex.cc"
yy165:
	++cur;
#line 168 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_RULES;
    }
#line 874 "src/parse/lex.cc"
yy167:
	++cur;
#line 190 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_STAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 883 "src/parse/lex.cc"
yy169:
	++cur;
#line 202 "../src/parse/lex.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_COND_ENUM, opts->topIndent, allow)) return INPUT_ERROR;
        goto next;
    }
#line 894 "src/parse/lex.cc"
yy171:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy178;
	goto yy14;
yy172:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy179;
yy173:
#line 241 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed header directive: expected"
            " `/*!header:re2c:<on|off>` followed by a space, a newline or the"
            " end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 911 "src/parse/lex.cc"
yy174:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy175;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy180;
		}
		if (yych >= '\r') {
			yyt1 = cur;
			goto yy180;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy180;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy182;
			}
		}
	}
yy175:
#line 267 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of `ignore:re2c` block: expected"
            " a space, a newline, or the end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 945 "src/parse/lex.cc"
yy176:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy183;
	goto yy14;
yy177:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy185;
	goto yy14;
yy178:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy186;
	goto yy14;
yy179:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy188;
	goto yy14;
yy180:
	++cur;
	cur = yyt1;
#line 261 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        if (!lex_block_end(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 972 "src/parse/lex.cc"
yy182:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy180;
	goto yy14;
yy183:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy189;
	if (yych == ' ') goto yy189;
yy184:
#line 255 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed include directive: expected"
            " `/*!include:re2c \"<file>\" *" "/`");
        return INPUT_ERROR;
    }
#line 989 "src/parse/lex.cc"
yy185:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy191;
	goto yy14;
yy186:
	++cur;
#line 210 "../src/parse/lex.re"
	{
        out.state_goto = true;
        if (!opts->fFlag) {
            msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option");
            return INPUT_ERROR;
        }
        if (opts->loop_switch) {
            msg.error(cur_loc(), "`getstate:re2c` is incompatible with the --loop-switch "
                "option, as it requires cross-block transitions that are unsupported "
                "without the `goto` statement");
            return INPUT_ERROR;
        }
        if (!lex_block(out, CODE_STATE_GOTO, opts->topIndent, 0)) return INPUT_ERROR;
        goto next;
    }
#line 1012 "src/parse/lex.cc"
yy188:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy192;
	if (yych == 'n') goto yy193;
	goto yy14;
yy189:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy189;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy189;
		if (yych == '"') {
			yyt1 = cur;
			goto yy195;
		}
		goto yy14;
	}
yy191:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy197;
	goto yy14;
yy192:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy199;
	goto yy14;
yy193:
	++cur;
#line 226 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1051 "src/parse/lex.cc"
yy195:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy14;
		if (yych == '\n') goto yy14;
		goto yy195;
	} else {
		if (yych <= '"') goto yy201;
		if (yych == '\\') goto yy202;
		goto yy195;
	}
yy197:
	++cur;
#line 185 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXNMATCH, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 1072 "src/parse/lex.cc"
yy199:
	++cur;
#line 234 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1083 "src/parse/lex.cc"
yy201:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy14;
		if (yych <= '\n') {
			yyt2 = cur;
			goto yy203;
		}
		if (yych <= '\f') goto yy14;
		yyt2 = cur;
		goto yy203;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy14;
			yyt2 = cur;
			goto yy203;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy205;
			}
			goto yy14;
		}
	}
yy202:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy14;
	if (yych == '\n') goto yy14;
	goto yy195;
yy203:
	++cur;
	x = yyt1;
	cur = yyt2;
	y = yyt2;
#line 248 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_block_end(out)) return INPUT_ERROR;
        include(getstr(x + 1, y - 1), ptr);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1128 "src/parse/lex.cc"
yy205:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy203;
	goto yy14;
}
#line 294 "../src/parse/lex.re"

}

bool Scanner::lex_opt_name(std::string &name)
{
    tok = cur;

#line 1142 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy209;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy209;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy209;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy211;
			}
		} else {
			if (yych == ':') goto yy213;
		}
	}
yy208:
#line 301 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a block name, or the end of block `*"
            "/`");
        return false;
    }
#line 1215 "src/parse/lex.cc"
yy209:
	++cur;
	cur = yyt1;
#line 308 "../src/parse/lex.re"
	{ name.clear();              return true; }
#line 1221 "src/parse/lex.cc"
yy211:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy209;
yy212:
	cur = mar;
	goto yy208;
yy213:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy212;
		if (yych >= '[') goto yy212;
	} else {
		if (yych == '`') goto yy212;
		if (yych >= '{') goto yy212;
	}
yy214:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy214;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy212;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy216;
		}
		if (yych <= '\f') goto yy212;
		yyt1 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy212;
			yyt1 = cur;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy218;
			}
			goto yy212;
		}
	}
yy216:
	++cur;
	cur = yyt1;
#line 309 "../src/parse/lex.re"
	{ name.assign(tok + 1, cur); return true; }
#line 1269 "src/parse/lex.cc"
yy218:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy216;
	goto yy212;
}
#line 310 "../src/parse/lex.re"

}

bool Scanner::lex_name_list(code_alc_t &alc, BlockNameList **ptail)
{
    BlockNameList **phead = ptail;
loop:
    tok = cur;

#line 1285 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy222;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy222;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy222;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy224;
			}
		} else {
			if (yych == ':') goto yy226;
		}
	}
yy221:
#line 319 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a list of colon-separated block"
            " names, or the end of block `*" "/`");
        return false;
    }
#line 1358 "src/parse/lex.cc"
yy222:
	++cur;
	cur = yyt1;
#line 326 "../src/parse/lex.re"
	{
        *ptail = NULL;
        return true;
    }
#line 1367 "src/parse/lex.cc"
yy224:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy222;
yy225:
	cur = mar;
	goto yy221;
yy226:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy225;
		if (yych >= '[') goto yy225;
	} else {
		if (yych == '`') goto yy225;
		if (yych >= '{') goto yy225;
	}
yy227:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy227;
	}
#line 331 "../src/parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = NULL;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                msg.error(cur_loc(), "duplicate block '%s' on the list", p->name);
                return false;
            }
        }

        goto loop;
    }
#line 1408 "src/parse/lex.cc"
}
#line 348 "../src/parse/lex.re"

}

bool Scanner::lex_block_end(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1419 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy234;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy232;
		if (yych <= '\n') goto yy237;
	} else {
		if (yych <= '\r') goto yy239;
		if (yych == '*') goto yy240;
	}
yy232:
	++cur;
yy233:
#line 356 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "ill-formed end of block: expected optional"
            " whitespaces followed by `*" "/`");
        return false;
    }
#line 1478 "src/parse/lex.cc"
yy234:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy234;
	}
#line 366 "../src/parse/lex.re"
	{ goto loop; }
#line 1488 "src/parse/lex.cc"
yy237:
	++cur;
#line 367 "../src/parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1493 "src/parse/lex.cc"
yy239:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy237;
	goto yy233;
yy240:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy233;
	++cur;
#line 362 "../src/parse/lex.re"
	{
        if (multiline) out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        return true;
    }
#line 1507 "src/parse/lex.cc"
}
#line 368 "../src/parse/lex.re"

}

bool Scanner::lex_block(Output &out, CodeKind kind, uint32_t indent, uint32_t mask)
{
    code_alc_t &alc = out.allocator;
    const char *fmt = NULL, *sep = NULL;
    BlockNameList *blocks;

    out.wraw(tok, ptr, !globopts->iFlag);
    if (!lex_name_list(alc, &blocks)) return false;

loop:

#line 1524 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy247;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy250;
		} else {
			if (yych == '\r') goto yy252;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy253;
			if (yych >= 'f') goto yy254;
		} else {
			if (yych == 's') goto yy255;
		}
	}
	++cur;
yy246:
#line 382 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed directive: expected optional "
            "configurations followed by the end of block `*" "/`");
        return false;
    }
#line 1588 "src/parse/lex.cc"
yy247:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy247;
	}
#line 406 "../src/parse/lex.re"
	{ goto loop; }
#line 1598 "src/parse/lex.cc"
yy250:
	++cur;
#line 408 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 1603 "src/parse/lex.cc"
yy252:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy250;
	goto yy246;
yy253:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy256;
	goto yy246;
yy254:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'o') goto yy258;
	goto yy246;
yy255:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'e') goto yy260;
	goto yy246;
yy256:
	++cur;
#line 410 "../src/parse/lex.re"
	{
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(indent, code_fmt(alc, kind, blocks, fmt, sep));
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        return true;
    }
#line 1629 "src/parse/lex.cc"
yy258:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy261;
yy259:
	cur = mar;
	goto yy246;
yy260:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy262;
	goto yy259;
yy261:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy263;
	goto yy259;
yy262:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy264;
	goto yy259;
yy263:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy265;
	goto yy259;
yy264:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy266;
	goto yy259;
yy265:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy267;
	goto yy259;
yy266:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy269;
	goto yy259;
yy267:
	++cur;
#line 388 "../src/parse/lex.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'format'");
            return false;
        }
        fmt = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1675 "src/parse/lex.cc"
yy269:
	yych = (unsigned char)*++cur;
	if (yych != 't') goto yy259;
	yych = (unsigned char)*++cur;
	if (yych != 'o') goto yy259;
	yych = (unsigned char)*++cur;
	if (yych != 'r') goto yy259;
	++cur;
#line 397 "../src/parse/lex.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'separator'");
            return false;
        }
        sep = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1693 "src/parse/lex.cc"
}
#line 416 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1706 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy278;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy276;
				if (yych <= '\n') goto yy281;
				if (yych >= '\r') goto yy283;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy284;
				} else {
					if (yych <= '"') goto yy285;
					if (yych <= '#') goto yy287;
					goto yy288;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy290;
				} else {
					if (yych <= '\'') goto yy291;
					if (yych <= ')') goto yy288;
					goto yy293;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy288;
				} else {
					if (yych <= '.') goto yy294;
					if (yych <= '/') goto yy296;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy297;
				if (yych <= ';') goto yy288;
				if (yych <= '<') goto yy298;
				goto yy300;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy288;
				} else {
					if (yych <= '@') goto yy287;
					if (yych <= 'Z') goto yy301;
					goto yy304;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy288;
				} else {
					if (yych != '`') goto yy301;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy306;
					goto yy301;
				} else {
					if (yych <= '{') goto yy307;
					if (yych <= '|') goto yy288;
				}
			}
		}
	}
yy276:
	++cur;
yy277:
#line 569 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1824 "src/parse/lex.cc"
yy278:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy278;
	}
#line 551 "../src/parse/lex.re"
	{ goto scan; }
#line 1834 "src/parse/lex.cc"
yy281:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy309;
	} else {
		if (yych <= ' ') goto yy309;
		if (yych == '#') goto yy312;
	}
yy282:
#line 558 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1856 "src/parse/lex.cc"
yy283:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy281;
	goto yy277;
yy284:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'i') goto yy314;
	if (yych == 'u') goto yy315;
	goto yy277;
yy285:
	++cur;
#line 443 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1871 "src/parse/lex.cc"
yy287:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy277;
		if (yych <= 'Z') goto yy316;
		goto yy277;
	} else {
		if (yych == '`') goto yy277;
		if (yych <= 'z') goto yy316;
		goto yy277;
	}
yy288:
	++cur;
yy289:
#line 452 "../src/parse/lex.re"
	{ return *tok; }
#line 1888 "src/parse/lex.cc"
yy290:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy319;
	goto yy277;
yy291:
	++cur;
#line 442 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1897 "src/parse/lex.cc"
yy293:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy319;
	goto yy289;
yy294:
	++cur;
#line 546 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1909 "src/parse/lex.cc"
yy296:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy321;
	if (yych == '/') goto yy323;
	goto yy289;
yy297:
	yych = (unsigned char)*++cur;
	if (yych == '=') goto yy325;
	goto yy277;
yy298:
	++cur;
#line 435 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1923 "src/parse/lex.cc"
yy300:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy327;
	goto yy289;
yy301:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy302:
	if (yybm[0+yych] & 32) {
		goto yy301;
	}
#line 501 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1960 "src/parse/lex.cc"
yy304:
	yych = (unsigned char)*++cur;
	if (yych == '^') goto yy329;
#line 444 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1966 "src/parse/lex.cc"
yy306:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy331;
	goto yy302;
yy307:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy334;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy332;
		if (yych >= 'A') goto yy336;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy336;
		} else {
			if (yych <= '`') goto yy308;
			if (yych <= 'z') goto yy336;
		}
	}
yy308:
#line 427 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1991 "src/parse/lex.cc"
yy309:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy309;
	} else {
		if (yych <= ' ') goto yy309;
		if (yych == '#') goto yy312;
	}
yy311:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy282;
			} else {
				goto yy277;
			}
		} else {
			if (yyaccept == 2) {
				goto yy289;
			} else {
				goto yy308;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy326;
			} else {
				goto yy333;
			}
		} else {
			if (yyaccept == 6) {
				goto yy353;
			} else {
				goto yy379;
			}
		}
	}
yy312:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
		goto yy311;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych == 'l') goto yy338;
		goto yy311;
	}
yy314:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy339;
	goto yy311;
yy315:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy340;
	goto yy311;
yy316:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy318;
		if (yych <= '9') goto yy316;
		if (yych >= 'A') goto yy316;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy316;
		} else {
			if (yych <= '`') goto yy318;
			if (yych <= 'z') goto yy316;
		}
	}
yy318:
#line 447 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 2075 "src/parse/lex.cc"
yy319:
	++cur;
#line 440 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 2080 "src/parse/lex.cc"
yy321:
	++cur;
#line 438 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 2085 "src/parse/lex.cc"
yy323:
	++cur;
#line 437 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 2090 "src/parse/lex.cc"
yy325:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy327;
yy326:
#line 428 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 2098 "src/parse/lex.cc"
yy327:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy311;
			goto yy327;
		} else {
			if (yych == ' ') goto yy327;
			goto yy311;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy341;
			}
			if (yych <= '^') goto yy311;
			yyt1 = cur;
			goto yy341;
		} else {
			if (yych <= '`') goto yy311;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy341;
			}
			goto yy311;
		}
	}
yy329:
	++cur;
#line 445 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2133 "src/parse/lex.cc"
yy331:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy344;
	goto yy302;
yy332:
	++cur;
yy333:
#line 484 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2147 "src/parse/lex.cc"
yy334:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy334;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy345;
	}
	if (yych == '}') goto yy346;
	goto yy311;
yy336:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy311;
			goto yy336;
		} else {
			if (yych <= '@') goto yy311;
			if (yych <= 'Z') goto yy336;
			goto yy311;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy311;
			goto yy336;
		} else {
			if (yych == '}') goto yy348;
			goto yy311;
		}
	}
yy338:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy350;
	goto yy311;
yy339:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy351;
	goto yy311;
yy340:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy352;
	goto yy311;
yy341:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy343;
		if (yych <= '9') goto yy341;
		if (yych >= 'A') goto yy341;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy341;
		} else {
			if (yych <= '`') goto yy343;
			if (yych <= 'z') goto yy341;
		}
	}
yy343:
	p = yyt1;
#line 430 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2218 "src/parse/lex.cc"
yy344:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy354;
	goto yy302;
yy345:
	yyaccept = 5;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy333;
	if (yych <= '9') goto yy355;
	if (yych == '}') goto yy357;
	goto yy333;
yy346:
	++cur;
#line 454 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2241 "src/parse/lex.cc"
yy348:
	++cur;
#line 490 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2253 "src/parse/lex.cc"
yy350:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy359;
	goto yy311;
yy351:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy360;
	goto yy311;
yy352:
	yyaccept = 6;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy361;
yy353:
#line 539 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive: expected `!use`"
            " followed by a colon, a block name, optional spaces, a semicolon,"
            " and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2274 "src/parse/lex.cc"
yy354:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy362;
	goto yy302;
yy355:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '/') goto yy311;
	if (yych <= '9') goto yy355;
	if (yych == '}') goto yy364;
	goto yy311;
yy357:
	++cur;
#line 475 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2298 "src/parse/lex.cc"
yy359:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy366;
	goto yy311;
yy360:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy367;
	goto yy311;
yy361:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy311;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy368;
		}
		goto yy311;
	} else {
		if (yych == '`') goto yy311;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy368;
		}
		goto yy311;
	}
yy362:
	++cur;
#line 499 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2328 "src/parse/lex.cc"
yy364:
	++cur;
	p = yyt1;
#line 463 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2344 "src/parse/lex.cc"
yy366:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy371;
	if (yych <= '9') goto yy311;
	goto yy371;
yy367:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy372;
	goto yy311;
yy368:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy373;
			}
			goto yy311;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy373;
			}
			if (yych <= '/') goto yy311;
			if (yych <= '9') goto yy368;
			goto yy311;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy375;
			}
			if (yych <= '@') goto yy311;
			if (yych <= 'Z') goto yy368;
			goto yy311;
		} else {
			if (yych == '`') goto yy311;
			if (yych <= 'z') goto yy368;
			goto yy311;
		}
	}
yy370:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy371:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy370;
		goto yy311;
	} else {
		if (yych <= ' ') goto yy370;
		if (yych <= '0') goto yy311;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy376;
		}
		goto yy311;
	}
yy372:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy378;
	goto yy311;
yy373:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy373;
		goto yy311;
	} else {
		if (yych <= ' ') goto yy373;
		if (yych != ';') goto yy311;
	}
yy375:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy311;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy380;
		}
		if (yych <= '\f') goto yy311;
		yyt3 = cur;
		goto yy380;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy311;
			yyt3 = cur;
			goto yy380;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy382;
			}
			goto yy311;
		}
	}
yy376:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy311;
			goto yy383;
		} else {
			if (yych <= '\n') goto yy385;
			if (yych <= '\f') goto yy311;
			goto yy387;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy311;
			goto yy383;
		} else {
			if (yych <= '/') goto yy311;
			if (yych <= '9') goto yy376;
			goto yy311;
		}
	}
yy378:
	yyaccept = 7;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy388;
	if (yych == ' ') goto yy388;
yy379:
#line 528 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive: expected `!include`"
            " followed by spaces, a double-quoted file path, optional spaces, a"
            " semicolon, and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2481 "src/parse/lex.cc"
yy380:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 535 "../src/parse/lex.re"
	{
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2492 "src/parse/lex.cc"
yy382:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy380;
	goto yy311;
yy383:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy383;
		goto yy311;
	} else {
		if (yych <= ' ') goto yy383;
		if (yych == '"') goto yy390;
		goto yy311;
	}
yy385:
	++cur;
	cur = yyt1;
#line 553 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2517 "src/parse/lex.cc"
yy387:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy385;
	goto yy311;
yy388:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy388;
		goto yy311;
	} else {
		if (yych <= ' ') goto yy388;
		if (yych == '"') {
			yyt1 = cur;
			goto yy392;
		}
		goto yy311;
	}
yy390:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy390;
	}
	if (yych <= '\n') goto yy311;
	if (yych <= '"') goto yy394;
	goto yy395;
yy392:
	++cur;
	if ((lim - cur) < 4) { if (!fill(4)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy311;
		if (yych == '\n') goto yy311;
		goto yy392;
	} else {
		if (yych <= '"') goto yy396;
		if (yych == '\\') goto yy397;
		goto yy392;
	}
yy394:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy385;
	if (yych == '\r') goto yy387;
	goto yy311;
yy395:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy311;
	if (yych == '\n') goto yy311;
	goto yy390;
yy396:
	yych = (unsigned char)*++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy398;
		}
		goto yy311;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy398;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy400;
		}
		goto yy311;
	}
yy397:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy311;
	if (yych == '\n') goto yy311;
	goto yy392;
yy398:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy398;
		goto yy311;
	} else {
		if (yych <= ' ') goto yy398;
		if (yych != ';') goto yy311;
	}
yy400:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy311;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy401;
		}
		if (yych <= '\f') goto yy311;
		yyt3 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy311;
			yyt3 = cur;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy403;
			}
			goto yy311;
		}
	}
yy401:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 524 "../src/parse/lex.re"
	{
        include(getstr(x + 1, y - 1), tok);
        goto scan;
    }
#line 2641 "src/parse/lex.cc"
yy403:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy401;
	goto yy311;
}
#line 573 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2654 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy407;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy407;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy410;
		}
	}
yy406:
#line 580 "../src/parse/lex.re"
	{ return false; }
#line 2711 "src/parse/lex.cc"
yy407:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy407;
	}
	if (yych == '=') goto yy410;
yy409:
	cur = mar;
	goto yy406;
yy410:
	yych = (unsigned char)*++cur;
	if (yych == '>') goto yy409;
	++cur;
	cur = yyt1;
#line 579 "../src/parse/lex.re"
	{ return true; }
#line 2730 "src/parse/lex.cc"
}
#line 581 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2739 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy416;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy416;
	}
#line 589 "../src/parse/lex.re"
	{ return false; }
#line 2788 "src/parse/lex.cc"
yy416:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy416;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy419;
	} else {
		if (yych <= '=') goto yy419;
		if (yych == '{') goto yy419;
	}
	cur = yyt1;
#line 588 "../src/parse/lex.re"
	{ return true; }
#line 2805 "src/parse/lex.cc"
yy419:
	++cur;
	cur = yyt1;
#line 587 "../src/parse/lex.re"
	{ return false; }
#line 2811 "src/parse/lex.cc"
}
#line 590 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2822 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy421;
yy422:
	++cur;
yy421:
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy422;
	}
	if (yych <= 0x1F) goto yy424;
	if (yych <= '!') goto yy425;
	if (yych == '>') goto yy428;
yy424:
#line 600 "../src/parse/lex.re"
	{ goto cond; }
#line 2874 "src/parse/lex.cc"
yy425:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') goto yy425;
	if (yych == ' ') goto yy425;
#line 598 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2883 "src/parse/lex.cc"
yy428:
	++cur;
#line 599 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2888 "src/parse/lex.cc"
}
#line 601 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2895 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy434;
		if (yych >= 'A') goto yy436;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy436;
		} else {
			if (yych <= '`') goto yy432;
			if (yych <= 'z') goto yy436;
		}
	}
yy432:
	++cur;
#line 607 "../src/parse/lex.re"
	{ goto error; }
#line 2949 "src/parse/lex.cc"
yy434:
	++cur;
#line 606 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2954 "src/parse/lex.cc"
yy436:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy436;
	}
#line 605 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2964 "src/parse/lex.cc"
}
#line 608 "../src/parse/lex.re"

next:

#line 2970 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy443;
		if (yych >= ' ') goto yy443;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy444;
		} else {
			if (yych == '>') goto yy447;
		}
	}
	++cur;
yy442:
#line 613 "../src/parse/lex.re"
	{ goto error; }
#line 3023 "src/parse/lex.cc"
yy443:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy449;
		if (yych <= 0x1F) goto yy442;
		goto yy449;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy442;
		} else {
			if (yych == '>') goto yy447;
			goto yy442;
		}
	}
yy444:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy444;
	}
#line 611 "../src/parse/lex.re"
	{ goto cond; }
#line 3047 "src/parse/lex.cc"
yy447:
	++cur;
#line 612 "../src/parse/lex.re"
	{ goto end; }
#line 3052 "src/parse/lex.cc"
yy449:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy449;
		if (yych >= ' ') goto yy449;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy444;
		} else {
			if (yych == '>') goto yy447;
		}
	}
	cur = mar;
	goto yy442;
}
#line 614 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented() {
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 3086 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy454;
			if (yych == '\n') goto yy458;
			goto yy456;
		} else {
			if (yych <= '\r') goto yy460;
			if (yych == '"') goto yy461;
			goto yy456;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy461;
			if (yych == '/') goto yy463;
			goto yy456;
		} else {
			if (yych == '|') goto yy456;
			if (yych <= '}') goto yy464;
			goto yy456;
		}
	}
yy454:
	++cur;
#line 629 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3116 "src/parse/lex.cc"
yy456:
	++cur;
yy457:
#line 635 "../src/parse/lex.re"
	{ goto code; }
#line 3122 "src/parse/lex.cc"
yy458:
	++cur;
#line 630 "../src/parse/lex.re"
	{ next_line(); goto indent; }
#line 3127 "src/parse/lex.cc"
yy460:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy458;
	goto yy457;
yy461:
	++cur;
#line 633 "../src/parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3136 "src/parse/lex.cc"
yy463:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy466;
	if (yych == '/') goto yy468;
	goto yy457;
yy464:
	++cur;
#line 634 "../src/parse/lex.re"
	{ msg.error(cur_loc(), "Curly braces are not allowed after ':='"); exit(1); }
#line 3146 "src/parse/lex.cc"
yy466:
	++cur;
#line 632 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3151 "src/parse/lex.cc"
yy468:
	++cur;
#line 631 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto indent; }
#line 3156 "src/parse/lex.cc"
}
#line 636 "../src/parse/lex.re"

indent:

#line 3162 "src/parse/lex.cc"
{
	unsigned char yych;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy472;
		if (yych <= '\n') goto yy473;
	} else {
		if (yych <= '\r') goto yy473;
		if (yych == ' ') goto yy473;
	}
yy472:
#line 640 "../src/parse/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 3183 "src/parse/lex.cc"
yy473:
	++cur;
	cur -= 1;
#line 639 "../src/parse/lex.re"
	{ goto code; }
#line 3189 "src/parse/lex.cc"
}
#line 647 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3201 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy477;
			if (yych == '\n') goto yy481;
			goto yy479;
		} else {
			if (yych <= '\r') goto yy483;
			if (yych == '"') goto yy484;
			goto yy479;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy484;
			if (yych == '/') goto yy486;
			goto yy479;
		} else {
			if (yych <= '{') goto yy487;
			if (yych == '}') goto yy489;
			goto yy479;
		}
	}
yy477:
	++cur;
#line 667 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3265 "src/parse/lex.cc"
yy479:
	++cur;
yy480:
#line 671 "../src/parse/lex.re"
	{ goto code; }
#line 3271 "src/parse/lex.cc"
yy481:
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy491;
	}
	if (yych == '#') goto yy494;
yy482:
#line 666 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3281 "src/parse/lex.cc"
yy483:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy481;
	goto yy480;
yy484:
	++cur;
#line 670 "../src/parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3290 "src/parse/lex.cc"
yy486:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy496;
	if (yych == '/') goto yy498;
	goto yy480;
yy487:
	++cur;
#line 664 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3300 "src/parse/lex.cc"
yy489:
	++cur;
#line 656 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3311 "src/parse/lex.cc"
yy491:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy491;
	}
	if (yych == '#') goto yy494;
yy493:
	cur = mar;
	goto yy482;
yy494:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy494;
		goto yy493;
	} else {
		if (yych <= ' ') goto yy494;
		if (yych == 'l') goto yy500;
		goto yy493;
	}
yy496:
	++cur;
#line 668 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3339 "src/parse/lex.cc"
yy498:
	++cur;
#line 669 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3344 "src/parse/lex.cc"
yy500:
	yych = (unsigned char)*++cur;
	if (yych != 'i') goto yy493;
	yych = (unsigned char)*++cur;
	if (yych != 'n') goto yy493;
	yych = (unsigned char)*++cur;
	if (yych != 'e') goto yy493;
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy505;
	if (yych <= '9') goto yy493;
	goto yy505;
yy504:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy505:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy504;
		goto yy493;
	} else {
		if (yych <= ' ') goto yy504;
		if (yych <= '0') goto yy493;
		if (yych >= ':') goto yy493;
		yyt1 = cur;
	}
yy506:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy506;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy493;
		if (yych <= '\t') goto yy508;
		if (yych <= '\n') goto yy510;
		goto yy493;
	} else {
		if (yych <= '\r') goto yy512;
		if (yych != ' ') goto yy493;
	}
yy508:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy508;
		goto yy493;
	} else {
		if (yych <= ' ') goto yy508;
		if (yych == '"') goto yy513;
		goto yy493;
	}
yy510:
	++cur;
	cur = yyt1;
#line 665 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3403 "src/parse/lex.cc"
yy512:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy510;
	goto yy493;
yy513:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy513;
	}
	if (yych <= '\n') goto yy493;
	if (yych >= '#') goto yy516;
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy510;
	if (yych == '\r') goto yy512;
	goto yy493;
yy516:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy493;
	if (yych == '\n') goto yy493;
	goto yy513;
}
#line 672 "../src/parse/lex.re"

}

void Scanner::try_lex_string_in_code(char quote)
{
    // We need to lex string literals in code blocks because they may contain closing
    // brace symbol that would otherwise be erroneously lexed as a real closing brace.
    //
    // However, single quote in Rust may be either the beginning of a char literal as in
    // '\u{1F600}', or a standalone one as in 'label. In the latter case trying to lex a
    // generic string literal will consume a fragment of the file until the next single
    // quote (if any) and result in either a spurios parse error, or incorrect generated
    // code. Therefore in Rust we try to lex a char literal, or else consume the quote.

    if (globopts->lang != LANG_RUST || quote != '\'') {
        lex_string(quote);
        return;
    }

    // Rust spec (literals): https://doc.rust-lang.org/reference/tokens.html#literals
    // Rust spec (input encoding): https://doc.rust-lang.org/reference/input-format.html

#line 3452 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy520;
			goto yy522;
		} else {
			if (yych <= 0x7F) goto yy520;
			if (yych >= 0xC2) goto yy523;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy524;
			if (yych <= 0xEF) goto yy525;
			goto yy526;
		} else {
			if (yych <= 0xF3) goto yy527;
			if (yych <= 0xF4) goto yy528;
		}
	}
yy519:
#line 700 "../src/parse/lex.re"
	{ return; }
#line 3512 "src/parse/lex.cc"
yy520:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy529;
yy521:
	cur = mar;
	goto yy519;
yy522:
	yych = (unsigned char)*++cur;
	if (yych <= 'm') {
		if (yych <= '\'') {
			if (yych == '"') goto yy520;
			if (yych <= '&') goto yy521;
			goto yy530;
		} else {
			if (yych <= '0') {
				if (yych <= '/') goto yy521;
				goto yy520;
			} else {
				if (yych == '\\') goto yy520;
				goto yy521;
			}
		}
	} else {
		if (yych <= 's') {
			if (yych <= 'n') goto yy520;
			if (yych == 'r') goto yy520;
			goto yy521;
		} else {
			if (yych <= 'u') {
				if (yych <= 't') goto yy520;
				goto yy531;
			} else {
				if (yych == 'x') goto yy532;
				goto yy521;
			}
		}
	}
yy523:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0xBF) goto yy520;
	goto yy521;
yy524:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy521;
	if (yych <= 0xBF) goto yy523;
	goto yy521;
yy525:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0xBF) goto yy523;
	goto yy521;
yy526:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy521;
	if (yych <= 0xBF) goto yy525;
	goto yy521;
yy527:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0xBF) goto yy525;
	goto yy521;
yy528:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0x8F) goto yy525;
	goto yy521;
yy529:
	++cur;
	goto yy519;
yy530:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy529;
	goto yy519;
yy531:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy533;
	goto yy521;
yy532:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy521;
	goto yy535;
yy533:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy521;
	goto yy537;
yy534:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy535:
	if (yybm[0+yych] & 128) {
		goto yy534;
	}
	if (yych == '\'') goto yy529;
	goto yy521;
yy536:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy537:
	if (yych <= 'F') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy536;
		if (yych <= '@') goto yy521;
		goto yy536;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy521;
			goto yy536;
		} else {
			if (yych == '}') goto yy520;
			goto yy521;
		}
	}
}
#line 701 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3637 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy540;
			if (yych <= '\t') goto yy542;
			goto yy544;
		} else {
			if (yych == '\r') goto yy546;
			goto yy542;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy547;
			if (yych <= '&') goto yy542;
			goto yy547;
		} else {
			if (yych == '\\') goto yy549;
			goto yy542;
		}
	}
yy540:
	++cur;
#line 711 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3665 "src/parse/lex.cc"
yy542:
	++cur;
yy543:
#line 712 "../src/parse/lex.re"
	{ goto loop; }
#line 3671 "src/parse/lex.cc"
yy544:
	++cur;
#line 710 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3676 "src/parse/lex.cc"
yy546:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy544;
	goto yy543;
yy547:
	++cur;
#line 708 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3685 "src/parse/lex.cc"
yy549:
	yych = (unsigned char)*++cur;
	if (yych <= '&') {
		if (yych != '"') goto yy543;
	} else {
		if (yych <= '\'') goto yy550;
		if (yych != '\\') goto yy543;
	}
yy550:
	++cur;
#line 709 "../src/parse/lex.re"
	{ goto loop; }
#line 3698 "src/parse/lex.cc"
}
#line 713 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3708 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy554;
		if (yych == '\n') goto yy558;
		goto yy556;
	} else {
		if (yych <= '\r') goto yy560;
		if (yych == '*') goto yy561;
		goto yy556;
	}
yy554:
	++cur;
#line 722 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3726 "src/parse/lex.cc"
yy556:
	++cur;
yy557:
#line 723 "../src/parse/lex.re"
	{ goto loop; }
#line 3732 "src/parse/lex.cc"
yy558:
	++cur;
#line 721 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3737 "src/parse/lex.cc"
yy560:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy558;
	goto yy557;
yy561:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy557;
	++cur;
#line 720 "../src/parse/lex.re"
	{ return; }
#line 3748 "src/parse/lex.cc"
}
#line 724 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3758 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy566;
		if (yych <= '\t') goto yy568;
		goto yy570;
	} else {
		if (yych == '\r') goto yy572;
		goto yy568;
	}
yy566:
	++cur;
#line 732 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3775 "src/parse/lex.cc"
yy568:
	++cur;
yy569:
#line 733 "../src/parse/lex.re"
	{ goto loop; }
#line 3781 "src/parse/lex.cc"
yy570:
	++cur;
#line 731 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3786 "src/parse/lex.cc"
yy572:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy570;
	goto yy569;
}
#line 734 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3805 "src/parse/lex.cc"
{
	unsigned char yych;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == ']') goto yy576;
#line 747 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3813 "src/parse/lex.cc"
yy576:
	++cur;
#line 746 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3818 "src/parse/lex.cc"
}
#line 748 "../src/parse/lex.re"

snd:

#line 3824 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych == '-') goto yy581;
yy580:
#line 751 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3833 "src/parse/lex.cc"
yy581:
	yych = (unsigned char)*++cur;
	if (yych != ']') goto yy583;
	cur = mar;
	goto yy580;
yy583:
	++cur;
	cur -= 1;
#line 752 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3851 "src/parse/lex.cc"
}
#line 760 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 798 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3869 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy587;
		if (yych == '\n') goto yy591;
		goto yy589;
	} else {
		if (yych <= '\r') goto yy593;
		if (yych == '\\') goto yy594;
		goto yy589;
	}
yy587:
	++cur;
#line 779 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3888 "src/parse/lex.cc"
yy589:
	++cur;
yy590:
#line 781 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3894 "src/parse/lex.cc"
yy591:
	++cur;
#line 773 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3899 "src/parse/lex.cc"
yy593:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy591;
	goto yy590;
yy594:
	yych = (unsigned char)*++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy595;
				if (yych == '\n') goto yy591;
				goto yy596;
			} else {
				if (yych <= '\r') goto yy598;
				if (yych == '-') goto yy599;
				goto yy596;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy601;
				if (yych <= '7') goto yy603;
				if (yych <= 'T') goto yy596;
				goto yy604;
			} else {
				if (yych == 'X') goto yy606;
				if (yych <= '[') goto yy596;
				goto yy607;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy609;
				if (yych <= '`') goto yy596;
				if (yych <= 'a') goto yy611;
				goto yy613;
			} else {
				if (yych == 'f') goto yy615;
				if (yych <= 'm') goto yy596;
				goto yy617;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy619;
				if (yych <= 's') goto yy596;
				goto yy621;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy606;
					goto yy623;
				} else {
					if (yych == 'x') goto yy625;
					goto yy596;
				}
			}
		}
	}
yy595:
#line 776 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3960 "src/parse/lex.cc"
yy596:
	++cur;
yy597:
#line 794 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3969 "src/parse/lex.cc"
yy598:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy591;
	goto yy597;
yy599:
	++cur;
#line 792 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3978 "src/parse/lex.cc"
yy601:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy602;
	if (yych <= '7') goto yy626;
yy602:
#line 775 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3987 "src/parse/lex.cc"
yy603:
	++cur;
	goto yy602;
yy604:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy628;
	} else {
		if (yych <= 'F') goto yy628;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy628;
	}
yy605:
#line 774 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4005 "src/parse/lex.cc"
yy606:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy629;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy629;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy629;
		goto yy605;
	}
yy607:
	++cur;
#line 791 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4023 "src/parse/lex.cc"
yy609:
	++cur;
#line 793 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4028 "src/parse/lex.cc"
yy611:
	++cur;
#line 784 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4033 "src/parse/lex.cc"
yy613:
	++cur;
#line 785 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4038 "src/parse/lex.cc"
yy615:
	++cur;
#line 786 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4043 "src/parse/lex.cc"
yy617:
	++cur;
#line 787 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4048 "src/parse/lex.cc"
yy619:
	++cur;
#line 788 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4053 "src/parse/lex.cc"
yy621:
	++cur;
#line 789 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4058 "src/parse/lex.cc"
yy623:
	++cur;
#line 790 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4063 "src/parse/lex.cc"
yy625:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy630;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy630;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy630;
		goto yy605;
	}
yy626:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy627;
	if (yych <= '7') goto yy631;
yy627:
	cur = mar;
	if (yyaccept == 0) {
		goto yy602;
	} else {
		goto yy605;
	}
yy628:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy627;
		if (yych <= '9') goto yy633;
		goto yy627;
	} else {
		if (yych <= 'F') goto yy633;
		if (yych <= '`') goto yy627;
		if (yych <= 'f') goto yy633;
		goto yy627;
	}
yy629:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy627;
		if (yych <= '9') goto yy634;
		goto yy627;
	} else {
		if (yych <= 'F') goto yy634;
		if (yych <= '`') goto yy627;
		if (yych <= 'f') goto yy634;
		goto yy627;
	}
yy630:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy627;
		if (yych <= '9') goto yy635;
		goto yy627;
	} else {
		if (yych <= 'F') goto yy635;
		if (yych <= '`') goto yy627;
		if (yych <= 'f') goto yy635;
		goto yy627;
	}
yy631:
	++cur;
#line 783 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4128 "src/parse/lex.cc"
yy633:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy627;
		if (yych <= '9') goto yy637;
		goto yy627;
	} else {
		if (yych <= 'F') goto yy637;
		if (yych <= '`') goto yy627;
		if (yych <= 'f') goto yy637;
		goto yy627;
	}
yy634:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy627;
		if (yych <= '9') goto yy630;
		goto yy627;
	} else {
		if (yych <= 'F') goto yy630;
		if (yych <= '`') goto yy627;
		if (yych <= 'f') goto yy630;
		goto yy627;
	}
yy635:
	++cur;
#line 782 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4157 "src/parse/lex.cc"
yy637:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy627;
		if (yych >= ':') goto yy627;
	} else {
		if (yych <= 'F') goto yy638;
		if (yych <= '`') goto yy627;
		if (yych >= 'g') goto yy627;
	}
yy638:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy627;
		if (yych <= '9') goto yy629;
		goto yy627;
	} else {
		if (yych <= 'F') goto yy629;
		if (yych <= '`') goto yy627;
		if (yych <= 'f') goto yy629;
		goto yy627;
	}
}
#line 800 "../src/parse/lex.re"

    }
    else {
        
#line 4186 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy641;
			if (yych == '\n') goto yy645;
			goto yy643;
		} else {
			if (yych <= '\r') goto yy647;
			if (yych == '\\') goto yy648;
			goto yy643;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy650;
			if (yych <= 0xDF) goto yy652;
			if (yych <= 0xE0) goto yy653;
			goto yy654;
		} else {
			if (yych <= 0xF0) goto yy655;
			if (yych <= 0xF3) goto yy656;
			if (yych <= 0xF4) goto yy657;
			goto yy650;
		}
	}
yy641:
	++cur;
#line 779 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 4219 "src/parse/lex.cc"
yy643:
	++cur;
yy644:
#line 781 "../src/parse/lex.re"
	{ return decode(tok); }
#line 4225 "src/parse/lex.cc"
yy645:
	++cur;
#line 773 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 4230 "src/parse/lex.cc"
yy647:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy645;
	goto yy644;
yy648:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy658;
				} else {
					if (yych <= '\n') goto yy645;
					if (yych <= '\f') goto yy658;
					goto yy660;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy658;
					goto yy661;
				} else {
					if (yych <= '/') goto yy658;
					if (yych <= '3') goto yy663;
					goto yy665;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy658;
					goto yy666;
				} else {
					if (yych == 'X') goto yy668;
					goto yy658;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy669;
					goto yy671;
				} else {
					if (yych <= '`') goto yy658;
					if (yych <= 'a') goto yy673;
					goto yy675;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy658;
					goto yy677;
				} else {
					if (yych == 'n') goto yy679;
					goto yy658;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy681;
					goto yy658;
				} else {
					if (yych <= 't') goto yy683;
					if (yych <= 'u') goto yy668;
					goto yy685;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy658;
					goto yy687;
				} else {
					if (yych <= 0x7F) goto yy658;
					if (yych >= 0xC2) goto yy688;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy690;
					if (yych <= 0xEF) goto yy691;
					goto yy692;
				} else {
					if (yych <= 0xF3) goto yy693;
					if (yych <= 0xF4) goto yy694;
				}
			}
		}
	}
yy649:
#line 776 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 4322 "src/parse/lex.cc"
yy650:
	++cur;
yy651:
#line 777 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 4328 "src/parse/lex.cc"
yy652:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy651;
	if (yych <= 0xBF) goto yy643;
	goto yy651;
yy653:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy651;
	if (yych <= 0xBF) goto yy695;
	goto yy651;
yy654:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy651;
	if (yych <= 0xBF) goto yy695;
	goto yy651;
yy655:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy651;
	if (yych <= 0xBF) goto yy696;
	goto yy651;
yy656:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy651;
	if (yych <= 0xBF) goto yy696;
	goto yy651;
yy657:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy651;
	if (yych <= 0x8F) goto yy696;
	goto yy651;
yy658:
	++cur;
yy659:
#line 794 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 4372 "src/parse/lex.cc"
yy660:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy645;
	goto yy659;
yy661:
	++cur;
#line 792 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4381 "src/parse/lex.cc"
yy663:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy664;
	if (yych <= '7') goto yy697;
yy664:
#line 775 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4390 "src/parse/lex.cc"
yy665:
	++cur;
	goto yy664;
yy666:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy667;
		if (yych <= '9') goto yy698;
	} else {
		if (yych <= 'F') goto yy698;
		if (yych <= '`') goto yy667;
		if (yych <= 'f') goto yy698;
	}
yy667:
#line 774 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4408 "src/parse/lex.cc"
yy668:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy667;
		if (yych <= '9') goto yy699;
		goto yy667;
	} else {
		if (yych <= 'F') goto yy699;
		if (yych <= '`') goto yy667;
		if (yych <= 'f') goto yy699;
		goto yy667;
	}
yy669:
	++cur;
#line 791 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4426 "src/parse/lex.cc"
yy671:
	++cur;
#line 793 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4431 "src/parse/lex.cc"
yy673:
	++cur;
#line 784 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4436 "src/parse/lex.cc"
yy675:
	++cur;
#line 785 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4441 "src/parse/lex.cc"
yy677:
	++cur;
#line 786 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4446 "src/parse/lex.cc"
yy679:
	++cur;
#line 787 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4451 "src/parse/lex.cc"
yy681:
	++cur;
#line 788 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4456 "src/parse/lex.cc"
yy683:
	++cur;
#line 789 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4461 "src/parse/lex.cc"
yy685:
	++cur;
#line 790 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4466 "src/parse/lex.cc"
yy687:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy667;
		if (yych <= '9') goto yy700;
		goto yy667;
	} else {
		if (yych <= 'F') goto yy700;
		if (yych <= '`') goto yy667;
		if (yych <= 'f') goto yy700;
		goto yy667;
	}
yy688:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy689;
	if (yych <= 0xBF) goto yy658;
yy689:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy649;
		} else {
			goto yy651;
		}
	} else {
		if (yyaccept == 2) {
			goto yy664;
		} else {
			goto yy667;
		}
	}
yy690:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy689;
	if (yych <= 0xBF) goto yy688;
	goto yy689;
yy691:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy689;
	if (yych <= 0xBF) goto yy688;
	goto yy689;
yy692:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy689;
	if (yych <= 0xBF) goto yy691;
	goto yy689;
yy693:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy689;
	if (yych <= 0xBF) goto yy691;
	goto yy689;
yy694:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy689;
	if (yych <= 0x8F) goto yy691;
	goto yy689;
yy695:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy689;
	if (yych <= 0xBF) goto yy643;
	goto yy689;
yy696:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy689;
	if (yych <= 0xBF) goto yy695;
	goto yy689;
yy697:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy689;
	if (yych <= '7') goto yy701;
	goto yy689;
yy698:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy689;
		if (yych <= '9') goto yy703;
		goto yy689;
	} else {
		if (yych <= 'F') goto yy703;
		if (yych <= '`') goto yy689;
		if (yych <= 'f') goto yy703;
		goto yy689;
	}
yy699:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy689;
		if (yych <= '9') goto yy704;
		goto yy689;
	} else {
		if (yych <= 'F') goto yy704;
		if (yych <= '`') goto yy689;
		if (yych <= 'f') goto yy704;
		goto yy689;
	}
yy700:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy689;
		if (yych <= '9') goto yy705;
		goto yy689;
	} else {
		if (yych <= 'F') goto yy705;
		if (yych <= '`') goto yy689;
		if (yych <= 'f') goto yy705;
		goto yy689;
	}
yy701:
	++cur;
#line 783 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4579 "src/parse/lex.cc"
yy703:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy689;
		if (yych <= '9') goto yy707;
		goto yy689;
	} else {
		if (yych <= 'F') goto yy707;
		if (yych <= '`') goto yy689;
		if (yych <= 'f') goto yy707;
		goto yy689;
	}
yy704:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy689;
		if (yych <= '9') goto yy700;
		goto yy689;
	} else {
		if (yych <= 'F') goto yy700;
		if (yych <= '`') goto yy689;
		if (yych <= 'f') goto yy700;
		goto yy689;
	}
yy705:
	++cur;
#line 782 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4608 "src/parse/lex.cc"
yy707:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy689;
		if (yych >= ':') goto yy689;
	} else {
		if (yych <= 'F') goto yy708;
		if (yych <= '`') goto yy689;
		if (yych >= 'g') goto yy689;
	}
yy708:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy689;
		if (yych <= '9') goto yy699;
		goto yy689;
	} else {
		if (yych <= 'F') goto yy699;
		if (yych <= '`') goto yy689;
		if (yych <= 'f') goto yy699;
		goto yy689;
	}
}
#line 803 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();
    #line 837 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4645 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy711;
		if (yych == '\n') goto yy715;
		goto yy713;
	} else {
		if (yych <= '\r') goto yy717;
		if (yych == '\\') goto yy718;
		goto yy713;
	}
yy711:
	++cur;
#line 819 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4664 "src/parse/lex.cc"
yy713:
	++cur;
yy714:
#line 821 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4670 "src/parse/lex.cc"
yy715:
	++cur;
#line 813 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4675 "src/parse/lex.cc"
yy717:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy715;
	goto yy714;
yy718:
	yych = (unsigned char)*++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy719;
				if (yych <= '\t') goto yy720;
				goto yy715;
			} else {
				if (yych == '\r') goto yy722;
				if (yych <= '/') goto yy720;
				goto yy723;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy725;
				if (yych == 'U') goto yy726;
				goto yy720;
			} else {
				if (yych <= 'X') goto yy728;
				if (yych == '\\') goto yy729;
				goto yy720;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy731;
				if (yych <= 'b') goto yy733;
				goto yy720;
			} else {
				if (yych <= 'f') goto yy735;
				if (yych == 'n') goto yy737;
				goto yy720;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy739;
				if (yych <= 's') goto yy720;
				if (yych <= 't') goto yy741;
				goto yy728;
			} else {
				if (yych <= 'v') goto yy743;
				if (yych == 'x') goto yy745;
				goto yy720;
			}
		}
	}
yy719:
#line 816 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4731 "src/parse/lex.cc"
yy720:
	++cur;
yy721:
#line 832 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4741 "src/parse/lex.cc"
yy722:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy715;
	goto yy721;
yy723:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy724;
	if (yych <= '7') goto yy746;
yy724:
#line 815 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4754 "src/parse/lex.cc"
yy725:
	++cur;
	goto yy724;
yy726:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy727;
		if (yych <= '9') goto yy748;
	} else {
		if (yych <= 'F') goto yy748;
		if (yych <= '`') goto yy727;
		if (yych <= 'f') goto yy748;
	}
yy727:
#line 814 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4772 "src/parse/lex.cc"
yy728:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy727;
		if (yych <= '9') goto yy749;
		goto yy727;
	} else {
		if (yych <= 'F') goto yy749;
		if (yych <= '`') goto yy727;
		if (yych <= 'f') goto yy749;
		goto yy727;
	}
yy729:
	++cur;
#line 831 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4790 "src/parse/lex.cc"
yy731:
	++cur;
#line 824 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4795 "src/parse/lex.cc"
yy733:
	++cur;
#line 825 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4800 "src/parse/lex.cc"
yy735:
	++cur;
#line 826 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4805 "src/parse/lex.cc"
yy737:
	++cur;
#line 827 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4810 "src/parse/lex.cc"
yy739:
	++cur;
#line 828 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4815 "src/parse/lex.cc"
yy741:
	++cur;
#line 829 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4820 "src/parse/lex.cc"
yy743:
	++cur;
#line 830 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4825 "src/parse/lex.cc"
yy745:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy727;
		if (yych <= '9') goto yy750;
		goto yy727;
	} else {
		if (yych <= 'F') goto yy750;
		if (yych <= '`') goto yy727;
		if (yych <= 'f') goto yy750;
		goto yy727;
	}
yy746:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy747;
	if (yych <= '7') goto yy751;
yy747:
	cur = mar;
	if (yyaccept == 0) {
		goto yy724;
	} else {
		goto yy727;
	}
yy748:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy747;
		if (yych <= '9') goto yy753;
		goto yy747;
	} else {
		if (yych <= 'F') goto yy753;
		if (yych <= '`') goto yy747;
		if (yych <= 'f') goto yy753;
		goto yy747;
	}
yy749:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy747;
		if (yych <= '9') goto yy754;
		goto yy747;
	} else {
		if (yych <= 'F') goto yy754;
		if (yych <= '`') goto yy747;
		if (yych <= 'f') goto yy754;
		goto yy747;
	}
yy750:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy747;
		if (yych <= '9') goto yy755;
		goto yy747;
	} else {
		if (yych <= 'F') goto yy755;
		if (yych <= '`') goto yy747;
		if (yych <= 'f') goto yy755;
		goto yy747;
	}
yy751:
	++cur;
#line 823 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4890 "src/parse/lex.cc"
yy753:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy747;
		if (yych <= '9') goto yy757;
		goto yy747;
	} else {
		if (yych <= 'F') goto yy757;
		if (yych <= '`') goto yy747;
		if (yych <= 'f') goto yy757;
		goto yy747;
	}
yy754:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy747;
		if (yych <= '9') goto yy750;
		goto yy747;
	} else {
		if (yych <= 'F') goto yy750;
		if (yych <= '`') goto yy747;
		if (yych <= 'f') goto yy750;
		goto yy747;
	}
yy755:
	++cur;
#line 822 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4919 "src/parse/lex.cc"
yy757:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy747;
		if (yych >= ':') goto yy747;
	} else {
		if (yych <= 'F') goto yy758;
		if (yych <= '`') goto yy747;
		if (yych >= 'g') goto yy747;
	}
yy758:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy747;
		if (yych <= '9') goto yy749;
		goto yy747;
	} else {
		if (yych <= 'F') goto yy749;
		if (yych <= '`') goto yy747;
		if (yych <= 'f') goto yy749;
		goto yy747;
	}
}
#line 839 "../src/parse/lex.re"

    }
    else {
        
#line 4948 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy761;
			if (yych == '\n') goto yy765;
			goto yy763;
		} else {
			if (yych <= '\r') goto yy767;
			if (yych == '\\') goto yy768;
			goto yy763;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy770;
			if (yych <= 0xDF) goto yy772;
			if (yych <= 0xE0) goto yy773;
			goto yy774;
		} else {
			if (yych <= 0xF0) goto yy775;
			if (yych <= 0xF3) goto yy776;
			if (yych <= 0xF4) goto yy777;
			goto yy770;
		}
	}
yy761:
	++cur;
#line 819 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4981 "src/parse/lex.cc"
yy763:
	++cur;
yy764:
#line 821 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4987 "src/parse/lex.cc"
yy765:
	++cur;
#line 813 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4992 "src/parse/lex.cc"
yy767:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy765;
	goto yy764;
yy768:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy769;
				if (yych == '\n') goto yy765;
				goto yy778;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy780;
					goto yy778;
				} else {
					if (yych <= '3') goto yy781;
					if (yych <= '7') goto yy783;
					goto yy778;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy784;
					goto yy778;
				} else {
					if (yych <= 'X') goto yy786;
					if (yych <= '[') goto yy778;
					goto yy787;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy778;
					goto yy789;
				} else {
					if (yych <= 'b') goto yy791;
					if (yych <= 'e') goto yy778;
					goto yy793;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy795;
				if (yych <= 'q') goto yy778;
				goto yy797;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy778;
					goto yy799;
				} else {
					if (yych <= 'u') goto yy786;
					if (yych <= 'v') goto yy801;
					goto yy778;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy803;
					goto yy778;
				} else {
					if (yych <= 0xC1) goto yy769;
					if (yych <= 0xDF) goto yy804;
					goto yy806;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy807;
					goto yy808;
				} else {
					if (yych <= 0xF3) goto yy809;
					if (yych <= 0xF4) goto yy810;
				}
			}
		}
	}
yy769:
#line 816 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 5077 "src/parse/lex.cc"
yy770:
	++cur;
yy771:
#line 817 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 5083 "src/parse/lex.cc"
yy772:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy771;
	if (yych <= 0xBF) goto yy763;
	goto yy771;
yy773:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy771;
	if (yych <= 0xBF) goto yy811;
	goto yy771;
yy774:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy771;
	if (yych <= 0xBF) goto yy811;
	goto yy771;
yy775:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy771;
	if (yych <= 0xBF) goto yy812;
	goto yy771;
yy776:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy771;
	if (yych <= 0xBF) goto yy812;
	goto yy771;
yy777:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy771;
	if (yych <= 0x8F) goto yy812;
	goto yy771;
yy778:
	++cur;
yy779:
#line 832 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 5128 "src/parse/lex.cc"
yy780:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy765;
	goto yy779;
yy781:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy782;
	if (yych <= '7') goto yy813;
yy782:
#line 815 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 5141 "src/parse/lex.cc"
yy783:
	++cur;
	goto yy782;
yy784:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy785;
		if (yych <= '9') goto yy814;
	} else {
		if (yych <= 'F') goto yy814;
		if (yych <= '`') goto yy785;
		if (yych <= 'f') goto yy814;
	}
yy785:
#line 814 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 5159 "src/parse/lex.cc"
yy786:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy785;
		if (yych <= '9') goto yy815;
		goto yy785;
	} else {
		if (yych <= 'F') goto yy815;
		if (yych <= '`') goto yy785;
		if (yych <= 'f') goto yy815;
		goto yy785;
	}
yy787:
	++cur;
#line 831 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 5177 "src/parse/lex.cc"
yy789:
	++cur;
#line 824 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 5182 "src/parse/lex.cc"
yy791:
	++cur;
#line 825 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 5187 "src/parse/lex.cc"
yy793:
	++cur;
#line 826 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 5192 "src/parse/lex.cc"
yy795:
	++cur;
#line 827 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 5197 "src/parse/lex.cc"
yy797:
	++cur;
#line 828 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 5202 "src/parse/lex.cc"
yy799:
	++cur;
#line 829 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 5207 "src/parse/lex.cc"
yy801:
	++cur;
#line 830 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 5212 "src/parse/lex.cc"
yy803:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy785;
		if (yych <= '9') goto yy816;
		goto yy785;
	} else {
		if (yych <= 'F') goto yy816;
		if (yych <= '`') goto yy785;
		if (yych <= 'f') goto yy816;
		goto yy785;
	}
yy804:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy805;
	if (yych <= 0xBF) goto yy778;
yy805:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy769;
		} else {
			goto yy771;
		}
	} else {
		if (yyaccept == 2) {
			goto yy782;
		} else {
			goto yy785;
		}
	}
yy806:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy805;
	if (yych <= 0xBF) goto yy804;
	goto yy805;
yy807:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy805;
	if (yych <= 0xBF) goto yy804;
	goto yy805;
yy808:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy805;
	if (yych <= 0xBF) goto yy807;
	goto yy805;
yy809:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy805;
	if (yych <= 0xBF) goto yy807;
	goto yy805;
yy810:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy805;
	if (yych <= 0x8F) goto yy807;
	goto yy805;
yy811:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy805;
	if (yych <= 0xBF) goto yy763;
	goto yy805;
yy812:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy805;
	if (yych <= 0xBF) goto yy811;
	goto yy805;
yy813:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy805;
	if (yych <= '7') goto yy817;
	goto yy805;
yy814:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy805;
		if (yych <= '9') goto yy819;
		goto yy805;
	} else {
		if (yych <= 'F') goto yy819;
		if (yych <= '`') goto yy805;
		if (yych <= 'f') goto yy819;
		goto yy805;
	}
yy815:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy805;
		if (yych <= '9') goto yy820;
		goto yy805;
	} else {
		if (yych <= 'F') goto yy820;
		if (yych <= '`') goto yy805;
		if (yych <= 'f') goto yy820;
		goto yy805;
	}
yy816:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy805;
		if (yych <= '9') goto yy821;
		goto yy805;
	} else {
		if (yych <= 'F') goto yy821;
		if (yych <= '`') goto yy805;
		if (yych <= 'f') goto yy821;
		goto yy805;
	}
yy817:
	++cur;
#line 823 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 5325 "src/parse/lex.cc"
yy819:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy805;
		if (yych <= '9') goto yy823;
		goto yy805;
	} else {
		if (yych <= 'F') goto yy823;
		if (yych <= '`') goto yy805;
		if (yych <= 'f') goto yy823;
		goto yy805;
	}
yy820:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy805;
		if (yych <= '9') goto yy816;
		goto yy805;
	} else {
		if (yych <= 'F') goto yy816;
		if (yych <= '`') goto yy805;
		if (yych <= 'f') goto yy816;
		goto yy805;
	}
yy821:
	++cur;
#line 822 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 5354 "src/parse/lex.cc"
yy823:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy805;
		if (yych >= ':') goto yy805;
	} else {
		if (yych <= 'F') goto yy824;
		if (yych <= '`') goto yy805;
		if (yych >= 'g') goto yy805;
	}
yy824:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy805;
		if (yych <= '9') goto yy815;
		goto yy805;
	} else {
		if (yych <= 'F') goto yy815;
		if (yych <= '`') goto yy805;
		if (yych <= 'f') goto yy815;
		goto yy805;
	}
}
#line 842 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5401 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy829;
		} else {
			if (yych <= '\n') goto yy831;
			if (yych <= '\f') goto yy829;
			goto yy833;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy829;
			goto yy834;
		} else {
			if (yych <= '0') goto yy829;
			if (yych <= '9') goto yy835;
			goto yy829;
		}
	}
	++cur;
#line 884 "../src/parse/lex.re"
	{ --cur; return; }
#line 5461 "src/parse/lex.cc"
yy829:
	++cur;
yy830:
#line 885 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5467 "src/parse/lex.cc"
yy831:
	++cur;
#line 883 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5472 "src/parse/lex.cc"
yy833:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy831;
	goto yy830;
yy834:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x00) goto yy830;
	if (yych == '\n') goto yy830;
	goto yy839;
yy835:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy835;
	}
#line 864 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5499 "src/parse/lex.cc"
yy838:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy839:
	if (yybm[0+yych] & 128) {
		goto yy838;
	}
	if (yych <= '\n') goto yy840;
	if (yych <= '"') goto yy841;
	goto yy843;
yy840:
	cur = mar;
	goto yy830;
yy841:
	++cur;
#line 874 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5525 "src/parse/lex.cc"
yy843:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy840;
	if (yych == '\n') goto yy840;
	goto yy838;
}
#line 886 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
