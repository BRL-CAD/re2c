/* Generated by re2c 2.2 on Fri Dec 17 22:36:07 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/file_utils.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

// Global re2c configurations and definitions.
#line 64 "../src/parse/lex.re"


#line 123 "../src/parse/lex.re"


InputBlockKind Scanner::echo(Output &out, std::string &block_name)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;

    if (is_eof()) return INPUT_END;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 55 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) { if (!fill(18)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++cur;
#line 266 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return INPUT_END;
        }
        goto loop;
    }
#line 121 "src/parse/lex.cc"
yy4:
	++cur;
yy5:
#line 286 "../src/parse/lex.re"
	{ goto loop; }
#line 127 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 281 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 141 "src/parse/lex.cc"
yy8:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy7;
			} else {
				goto yy5;
			}
		} else {
			goto yy169;
		}
	} else {
		if (yyaccept == 3) {
			goto yy171;
		} else {
			goto yy180;
		}
	}
yy14:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++cur;
#line 139 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        block_name.clear();
        return INPUT_GLOBAL;
    }
#line 202 "src/parse/lex.cc"
yy18:
	yych = (unsigned char)*++cur;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (unsigned char)*++cur;
	switch (yych) {
	case 'c':	goto yy22;
	case 'g':	goto yy23;
	case 'h':	goto yy24;
	case 'i':	goto yy25;
	case 'l':	goto yy26;
	case 'm':	goto yy27;
	case 'r':	goto yy28;
	case 's':	goto yy29;
	case 't':	goto yy30;
	case 'u':	goto yy31;
	default:	goto yy13;
	}
yy21:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy32;
	goto yy13;
yy22:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy33;
	goto yy13;
yy23:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy34;
	goto yy13;
yy24:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy35;
	goto yy13;
yy25:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy36;
	if (yych == 'n') goto yy37;
	goto yy13;
yy26:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy38;
	goto yy13;
yy27:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy39;
	if (yych == 't') goto yy40;
	goto yy13;
yy28:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy41;
	if (yych == 'u') goto yy42;
	goto yy13;
yy29:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy43;
	goto yy13;
yy30:
	yych = (unsigned char)*++cur;
	if (yych == 'y') goto yy44;
	goto yy13;
yy31:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy45;
	goto yy13;
yy32:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy46;
	goto yy13;
yy33:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy47;
	goto yy13;
yy34:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy48;
	goto yy13;
yy35:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy49;
	goto yy13;
yy36:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy50;
	goto yy13;
yy37:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy51;
	goto yy13;
yy38:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy52;
	goto yy13;
yy39:
	yych = (unsigned char)*++cur;
	if (yych == 'x') goto yy53;
	goto yy13;
yy40:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy54;
	goto yy13;
yy41:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy55;
	goto yy13;
yy42:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy56;
	goto yy13;
yy43:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy57;
	goto yy13;
yy44:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy58;
	goto yy13;
yy45:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy59;
	goto yy13;
yy46:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy61;
	if (yych <= '9') goto yy13;
	goto yy61;
yy47:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy62;
	goto yy13;
yy48:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy63;
	goto yy13;
yy49:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy64;
	goto yy13;
yy50:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy65;
	goto yy13;
yy51:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy66;
	goto yy13;
yy52:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy67;
	goto yy13;
yy53:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy68;
	if (yych == 'n') goto yy69;
	goto yy13;
yy54:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy70;
	goto yy13;
yy55:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy71;
	goto yy13;
yy56:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy73;
	goto yy13;
yy57:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy74;
	goto yy13;
yy58:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy75;
	goto yy13;
yy59:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy76;
	goto yy13;
yy60:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy61:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy60;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy60;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy77;
		}
		goto yy13;
	}
yy62:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy79;
	goto yy13;
yy63:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy80;
	goto yy13;
yy64:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy81;
	goto yy13;
yy65:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy82;
	goto yy13;
yy66:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy83;
	goto yy13;
yy67:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy84;
	goto yy13;
yy68:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy85;
	goto yy13;
yy69:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy86;
	goto yy13;
yy70:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy87;
	goto yy13;
yy71:
	++cur;
#line 145 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        if (block_name == "local") {
            msg.error(cur_loc(), "ill-formed local block, expected `local:re2c`");
            return INPUT_ERROR;
        }
        return INPUT_GLOBAL;
    }
#line 452 "src/parse/lex.cc"
yy73:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy88;
	goto yy13;
yy74:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy89;
	goto yy13;
yy75:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy90;
	goto yy13;
yy76:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy91;
	goto yy13;
yy77:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy77;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy92;
		if (yych <= '\n') goto yy94;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy96;
		if (yych == ' ') goto yy92;
		goto yy13;
	}
yy79:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy97;
	goto yy13;
yy80:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy98;
	goto yy13;
yy81:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy99;
	goto yy13;
yy82:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy100;
	goto yy13;
yy83:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy101;
	goto yy13;
yy84:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy102;
	goto yy13;
yy85:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy103;
	goto yy13;
yy86:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy104;
	goto yy13;
yy87:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy105;
	goto yy13;
yy88:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy106;
	goto yy13;
yy89:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy107;
	goto yy13;
yy90:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy108;
	goto yy13;
yy91:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy109;
	goto yy13;
yy92:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy92;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy92;
		if (yych == '"') goto yy110;
		goto yy13;
	}
yy94:
	++cur;
	cur = yyt1;
#line 274 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 560 "src/parse/lex.cc"
yy96:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy94;
	goto yy13;
yy97:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy112;
	goto yy13;
yy98:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy113;
	goto yy13;
yy99:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy114;
	goto yy13;
yy100:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy115;
	goto yy13;
yy101:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy116;
	goto yy13;
yy102:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy117;
	goto yy13;
yy103:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy118;
	goto yy13;
yy104:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy119;
	goto yy13;
yy105:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy120;
	goto yy13;
yy106:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy121;
	goto yy13;
yy107:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy122;
	goto yy13;
yy108:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy123;
	goto yy13;
yy109:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy124;
	goto yy13;
yy110:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy110;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy125;
	goto yy126;
yy112:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy127;
	goto yy13;
yy113:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy128;
	goto yy13;
yy114:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy129;
	goto yy13;
yy115:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy130;
	goto yy13;
yy116:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy131;
	goto yy13;
yy117:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy132;
	goto yy13;
yy118:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy133;
	goto yy13;
yy119:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy135;
	goto yy13;
yy120:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy136;
	goto yy13;
yy121:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy137;
	goto yy13;
yy122:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy138;
	goto yy13;
yy123:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy139;
	goto yy13;
yy124:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy140;
	goto yy13;
yy125:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy94;
	if (yych == '\r') goto yy96;
	goto yy13;
yy126:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy110;
yy127:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy75;
	goto yy13;
yy128:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy142;
	goto yy13;
yy129:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy143;
	goto yy13;
yy130:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy144;
	goto yy13;
yy131:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy145;
	goto yy13;
yy132:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy146;
	goto yy13;
yy133:
	++cur;
#line 173 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXFILL, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 722 "src/parse/lex.cc"
yy135:
	yych = (unsigned char)*++cur;
	if (yych == 'h') goto yy147;
	goto yy13;
yy136:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy148;
	goto yy13;
yy137:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy149;
	goto yy13;
yy138:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy150;
	goto yy13;
yy139:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy151;
	goto yy13;
yy140:
	++cur;
#line 167 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_USE;
    }
#line 751 "src/parse/lex.cc"
yy142:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy152;
	goto yy13;
yy143:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy153;
	goto yy13;
yy144:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy154;
	goto yy13;
yy145:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy155;
	goto yy13;
yy146:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy156;
	goto yy13;
yy147:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy158;
	goto yy13;
yy148:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy159;
	goto yy13;
yy149:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy161;
	goto yy13;
yy150:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy163;
	goto yy13;
yy151:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy165;
	goto yy13;
yy152:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy167;
	goto yy13;
yy153:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy168;
	goto yy13;
yy154:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy170;
	goto yy13;
yy155:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy172;
	goto yy13;
yy156:
	++cur;
#line 155 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_LOCAL;
    }
#line 816 "src/parse/lex.cc"
yy158:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy173;
	goto yy13;
yy159:
	++cur;
#line 189 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_MTAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 829 "src/parse/lex.cc"
yy161:
	++cur;
#line 161 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_RULES;
    }
#line 838 "src/parse/lex.cc"
yy163:
	++cur;
#line 183 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_STAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 847 "src/parse/lex.cc"
yy165:
	++cur;
#line 195 "../src/parse/lex.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_COND_ENUM, opts->topIndent, allow)) return INPUT_ERROR;
        goto next;
    }
#line 858 "src/parse/lex.cc"
yy167:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy174;
	goto yy13;
yy168:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy175;
yy169:
#line 234 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed header directive: expected"
            " `/*!header:re2c:<on|off>` followed by a space, a newline or the"
            " end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 875 "src/parse/lex.cc"
yy170:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy171;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy176;
		}
		if (yych >= '\r') {
			yyt1 = cur;
			goto yy176;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy176;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy178;
			}
		}
	}
yy171:
#line 260 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of `ignore:re2c` block: expected"
            " a space, a newline, or the end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 909 "src/parse/lex.cc"
yy172:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy179;
	goto yy13;
yy173:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy181;
	goto yy13;
yy174:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy182;
	goto yy13;
yy175:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy184;
	goto yy13;
yy176:
	++cur;
	cur = yyt1;
#line 254 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        if (!lex_block_end(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 936 "src/parse/lex.cc"
yy178:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy176;
	goto yy13;
yy179:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy185;
	if (yych == ' ') goto yy185;
yy180:
#line 248 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed include directive: expected"
            " `/*!include:re2c \"<file>\" *" "/`");
        return INPUT_ERROR;
    }
#line 953 "src/parse/lex.cc"
yy181:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy187;
	goto yy13;
yy182:
	++cur;
#line 203 "../src/parse/lex.re"
	{
        out.state_goto = true;
        if (!opts->fFlag) {
            msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option");
            return INPUT_ERROR;
        }
        if (opts->loop_switch) {
            msg.error(cur_loc(), "`getstate:re2c` is incompatible with the --loop-switch "
                "option, as it requires cross-block transitions that are unsupported "
                "without the `goto` statement");
            return INPUT_ERROR;
        }
        if (!lex_block(out, CODE_STATE_GOTO, opts->topIndent, 0)) return INPUT_ERROR;
        goto next;
    }
#line 976 "src/parse/lex.cc"
yy184:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy188;
	if (yych == 'n') goto yy189;
	goto yy13;
yy185:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy185;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy185;
		if (yych == '"') {
			yyt1 = cur;
			goto yy191;
		}
		goto yy13;
	}
yy187:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy193;
	goto yy13;
yy188:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy195;
	goto yy13;
yy189:
	++cur;
#line 219 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1015 "src/parse/lex.cc"
yy191:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy191;
	} else {
		if (yych <= '"') goto yy197;
		if (yych == '\\') goto yy198;
		goto yy191;
	}
yy193:
	++cur;
#line 178 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXNMATCH, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 1036 "src/parse/lex.cc"
yy195:
	++cur;
#line 227 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1047 "src/parse/lex.cc"
yy197:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt2 = cur;
			goto yy199;
		}
		if (yych <= '\f') goto yy13;
		yyt2 = cur;
		goto yy199;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt2 = cur;
			goto yy199;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy201;
			}
			goto yy13;
		}
	}
yy198:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy191;
yy199:
	++cur;
	x = yyt1;
	cur = yyt2;
	y = yyt2;
#line 241 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_block_end(out)) return INPUT_ERROR;
        include(getstr(x + 1, y - 1), ptr);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1092 "src/parse/lex.cc"
yy201:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy199;
	goto yy13;
}
#line 287 "../src/parse/lex.re"

}

bool Scanner::lex_opt_name(std::string &name)
{
    tok = cur;

#line 1106 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy205;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy205;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy205;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy207;
			}
		} else {
			if (yych == ':') goto yy209;
		}
	}
yy204:
#line 294 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a block name, or the end of block `*"
            "/`");
        return false;
    }
#line 1179 "src/parse/lex.cc"
yy205:
	++cur;
	cur = yyt1;
#line 301 "../src/parse/lex.re"
	{ name.clear();              return true; }
#line 1185 "src/parse/lex.cc"
yy207:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy205;
yy208:
	cur = mar;
	goto yy204;
yy209:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy208;
		if (yych >= '[') goto yy208;
	} else {
		if (yych == '`') goto yy208;
		if (yych >= '{') goto yy208;
	}
yy210:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy210;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy208;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy212;
		}
		if (yych <= '\f') goto yy208;
		yyt1 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy208;
			yyt1 = cur;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy214;
			}
			goto yy208;
		}
	}
yy212:
	++cur;
	cur = yyt1;
#line 302 "../src/parse/lex.re"
	{ name.assign(tok + 1, cur); return true; }
#line 1233 "src/parse/lex.cc"
yy214:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy212;
	goto yy208;
}
#line 303 "../src/parse/lex.re"

}

bool Scanner::lex_name_list(code_alc_t &alc, BlockNameList **ptail)
{
    BlockNameList **phead = ptail;
loop:
    tok = cur;

#line 1249 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy218;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy218;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy218;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy220;
			}
		} else {
			if (yych == ':') goto yy222;
		}
	}
yy217:
#line 312 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a list of colon-separated block"
            " names, or the end of block `*" "/`");
        return false;
    }
#line 1322 "src/parse/lex.cc"
yy218:
	++cur;
	cur = yyt1;
#line 319 "../src/parse/lex.re"
	{
        *ptail = NULL;
        return true;
    }
#line 1331 "src/parse/lex.cc"
yy220:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy218;
yy221:
	cur = mar;
	goto yy217;
yy222:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy221;
		if (yych >= '[') goto yy221;
	} else {
		if (yych == '`') goto yy221;
		if (yych >= '{') goto yy221;
	}
yy223:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy223;
	}
#line 324 "../src/parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = NULL;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                msg.error(cur_loc(), "duplicate block '%s' on the list", p->name);
                return false;
            }
        }

        goto loop;
    }
#line 1372 "src/parse/lex.cc"
}
#line 341 "../src/parse/lex.re"

}

bool Scanner::lex_block_end(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1383 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy230;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy228;
		if (yych <= '\n') goto yy233;
	} else {
		if (yych <= '\r') goto yy235;
		if (yych == '*') goto yy236;
	}
yy228:
	++cur;
yy229:
#line 349 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "ill-formed end of block: expected optional"
            " whitespaces followed by `*" "/`");
        return false;
    }
#line 1442 "src/parse/lex.cc"
yy230:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy230;
	}
#line 359 "../src/parse/lex.re"
	{ goto loop; }
#line 1452 "src/parse/lex.cc"
yy233:
	++cur;
#line 360 "../src/parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1457 "src/parse/lex.cc"
yy235:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy233;
	goto yy229;
yy236:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy229;
	++cur;
#line 355 "../src/parse/lex.re"
	{
        if (multiline) out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        return true;
    }
#line 1471 "src/parse/lex.cc"
}
#line 361 "../src/parse/lex.re"

}

bool Scanner::lex_block(Output &out, CodeKind kind, uint32_t indent, uint32_t mask)
{
    code_alc_t &alc = out.allocator;
    const char *fmt = NULL, *sep = NULL;
    BlockNameList *blocks;

    out.wraw(tok, ptr, !globopts->iFlag);
    if (!lex_name_list(alc, &blocks)) return false;

loop:

#line 1488 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy243;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy246;
		} else {
			if (yych == '\r') goto yy248;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy249;
			if (yych >= 'f') goto yy250;
		} else {
			if (yych == 's') goto yy251;
		}
	}
	++cur;
yy242:
#line 375 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed directive: expected optional "
            "configurations followed by the end of block `*" "/`");
        return false;
    }
#line 1552 "src/parse/lex.cc"
yy243:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy243;
	}
#line 399 "../src/parse/lex.re"
	{ goto loop; }
#line 1562 "src/parse/lex.cc"
yy246:
	++cur;
#line 401 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 1567 "src/parse/lex.cc"
yy248:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy246;
	goto yy242;
yy249:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy252;
	goto yy242;
yy250:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'o') goto yy254;
	goto yy242;
yy251:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'e') goto yy256;
	goto yy242;
yy252:
	++cur;
#line 403 "../src/parse/lex.re"
	{
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(indent, code_fmt(alc, kind, blocks, fmt, sep));
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        return true;
    }
#line 1593 "src/parse/lex.cc"
yy254:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy257;
yy255:
	cur = mar;
	goto yy242;
yy256:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy258;
	goto yy255;
yy257:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy259;
	goto yy255;
yy258:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy260;
	goto yy255;
yy259:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy261;
	goto yy255;
yy260:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy262;
	goto yy255;
yy261:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy263;
	goto yy255;
yy262:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy265;
	goto yy255;
yy263:
	++cur;
#line 381 "../src/parse/lex.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'format'");
            return false;
        }
        fmt = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1639 "src/parse/lex.cc"
yy265:
	yych = (unsigned char)*++cur;
	if (yych != 't') goto yy255;
	yych = (unsigned char)*++cur;
	if (yych != 'o') goto yy255;
	yych = (unsigned char)*++cur;
	if (yych != 'r') goto yy255;
	++cur;
#line 390 "../src/parse/lex.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'separator'");
            return false;
        }
        sep = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1657 "src/parse/lex.cc"
}
#line 409 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1670 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy274;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy272;
				if (yych <= '\n') goto yy277;
				if (yych >= '\r') goto yy279;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy280;
				} else {
					if (yych <= '"') goto yy281;
					if (yych <= '#') goto yy283;
					goto yy284;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy286;
				} else {
					if (yych <= '\'') goto yy287;
					if (yych <= ')') goto yy284;
					goto yy289;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy284;
				} else {
					if (yych <= '.') goto yy290;
					if (yych <= '/') goto yy292;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy293;
				if (yych <= ';') goto yy284;
				if (yych <= '<') goto yy294;
				goto yy296;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy284;
				} else {
					if (yych <= '@') goto yy283;
					if (yych <= 'Z') goto yy297;
					goto yy300;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy284;
				} else {
					if (yych != '`') goto yy297;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy302;
					goto yy297;
				} else {
					if (yych <= '{') goto yy303;
					if (yych <= '|') goto yy284;
				}
			}
		}
	}
yy272:
	++cur;
yy273:
#line 562 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1788 "src/parse/lex.cc"
yy274:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy274;
	}
#line 544 "../src/parse/lex.re"
	{ goto scan; }
#line 1798 "src/parse/lex.cc"
yy277:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy305;
	} else {
		if (yych <= ' ') goto yy305;
		if (yych == '#') goto yy308;
	}
yy278:
#line 551 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1820 "src/parse/lex.cc"
yy279:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy277;
	goto yy273;
yy280:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'i') goto yy310;
	if (yych == 'u') goto yy311;
	goto yy273;
yy281:
	++cur;
#line 436 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1835 "src/parse/lex.cc"
yy283:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy273;
		if (yych <= 'Z') goto yy312;
		goto yy273;
	} else {
		if (yych == '`') goto yy273;
		if (yych <= 'z') goto yy312;
		goto yy273;
	}
yy284:
	++cur;
yy285:
#line 445 "../src/parse/lex.re"
	{ return *tok; }
#line 1852 "src/parse/lex.cc"
yy286:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy315;
	goto yy273;
yy287:
	++cur;
#line 435 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1861 "src/parse/lex.cc"
yy289:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy315;
	goto yy285;
yy290:
	++cur;
#line 539 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1873 "src/parse/lex.cc"
yy292:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy317;
	if (yych == '/') goto yy319;
	goto yy285;
yy293:
	yych = (unsigned char)*++cur;
	if (yych == '=') goto yy321;
	goto yy273;
yy294:
	++cur;
#line 428 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1887 "src/parse/lex.cc"
yy296:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy323;
	goto yy285;
yy297:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy298:
	if (yybm[0+yych] & 32) {
		goto yy297;
	}
#line 494 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1924 "src/parse/lex.cc"
yy300:
	yych = (unsigned char)*++cur;
	if (yych == '^') goto yy325;
#line 437 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1930 "src/parse/lex.cc"
yy302:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy327;
	goto yy298;
yy303:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy330;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy328;
		if (yych >= 'A') goto yy332;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy332;
		} else {
			if (yych <= '`') goto yy304;
			if (yych <= 'z') goto yy332;
		}
	}
yy304:
#line 420 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1955 "src/parse/lex.cc"
yy305:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy305;
	} else {
		if (yych <= ' ') goto yy305;
		if (yych == '#') goto yy308;
	}
yy307:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy278;
			} else {
				goto yy273;
			}
		} else {
			if (yyaccept == 2) {
				goto yy285;
			} else {
				goto yy304;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy322;
			} else {
				goto yy329;
			}
		} else {
			if (yyaccept == 6) {
				goto yy349;
			} else {
				goto yy375;
			}
		}
	}
yy308:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy308;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy308;
		if (yych == 'l') goto yy334;
		goto yy307;
	}
yy310:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy335;
	goto yy307;
yy311:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy336;
	goto yy307;
yy312:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy314;
		if (yych <= '9') goto yy312;
		if (yych >= 'A') goto yy312;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy312;
		} else {
			if (yych <= '`') goto yy314;
			if (yych <= 'z') goto yy312;
		}
	}
yy314:
#line 440 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 2039 "src/parse/lex.cc"
yy315:
	++cur;
#line 433 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 2044 "src/parse/lex.cc"
yy317:
	++cur;
#line 431 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 2049 "src/parse/lex.cc"
yy319:
	++cur;
#line 430 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 2054 "src/parse/lex.cc"
yy321:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy323;
yy322:
#line 421 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 2062 "src/parse/lex.cc"
yy323:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy307;
			goto yy323;
		} else {
			if (yych == ' ') goto yy323;
			goto yy307;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy337;
			}
			if (yych <= '^') goto yy307;
			yyt1 = cur;
			goto yy337;
		} else {
			if (yych <= '`') goto yy307;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy337;
			}
			goto yy307;
		}
	}
yy325:
	++cur;
#line 438 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2097 "src/parse/lex.cc"
yy327:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy340;
	goto yy298;
yy328:
	++cur;
yy329:
#line 477 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2111 "src/parse/lex.cc"
yy330:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy330;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy341;
	}
	if (yych == '}') goto yy342;
	goto yy307;
yy332:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy307;
			goto yy332;
		} else {
			if (yych <= '@') goto yy307;
			if (yych <= 'Z') goto yy332;
			goto yy307;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy307;
			goto yy332;
		} else {
			if (yych == '}') goto yy344;
			goto yy307;
		}
	}
yy334:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy346;
	goto yy307;
yy335:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy347;
	goto yy307;
yy336:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy348;
	goto yy307;
yy337:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy339;
		if (yych <= '9') goto yy337;
		if (yych >= 'A') goto yy337;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy337;
		} else {
			if (yych <= '`') goto yy339;
			if (yych <= 'z') goto yy337;
		}
	}
yy339:
	p = yyt1;
#line 423 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2182 "src/parse/lex.cc"
yy340:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy350;
	goto yy298;
yy341:
	yyaccept = 5;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy329;
	if (yych <= '9') goto yy351;
	if (yych == '}') goto yy353;
	goto yy329;
yy342:
	++cur;
#line 447 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2205 "src/parse/lex.cc"
yy344:
	++cur;
#line 483 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2217 "src/parse/lex.cc"
yy346:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy355;
	goto yy307;
yy347:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy356;
	goto yy307;
yy348:
	yyaccept = 6;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy357;
yy349:
#line 532 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive: expected `!use`"
            " followed by a colon, a block name, optional spaces, a semicolon,"
            " and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2238 "src/parse/lex.cc"
yy350:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy358;
	goto yy298;
yy351:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '/') goto yy307;
	if (yych <= '9') goto yy351;
	if (yych == '}') goto yy360;
	goto yy307;
yy353:
	++cur;
#line 468 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2262 "src/parse/lex.cc"
yy355:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy362;
	goto yy307;
yy356:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy363;
	goto yy307;
yy357:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy307;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy364;
		}
		goto yy307;
	} else {
		if (yych == '`') goto yy307;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy364;
		}
		goto yy307;
	}
yy358:
	++cur;
#line 492 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2292 "src/parse/lex.cc"
yy360:
	++cur;
	p = yyt1;
#line 456 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2308 "src/parse/lex.cc"
yy362:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy367;
	if (yych <= '9') goto yy307;
	goto yy367;
yy363:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy368;
	goto yy307;
yy364:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy369;
			}
			goto yy307;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy369;
			}
			if (yych <= '/') goto yy307;
			if (yych <= '9') goto yy364;
			goto yy307;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy371;
			}
			if (yych <= '@') goto yy307;
			if (yych <= 'Z') goto yy364;
			goto yy307;
		} else {
			if (yych == '`') goto yy307;
			if (yych <= 'z') goto yy364;
			goto yy307;
		}
	}
yy366:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy367:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy366;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy366;
		if (yych <= '0') goto yy307;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy372;
		}
		goto yy307;
	}
yy368:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy374;
	goto yy307;
yy369:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy369;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy369;
		if (yych != ';') goto yy307;
	}
yy371:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy307;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy376;
		}
		if (yych <= '\f') goto yy307;
		yyt3 = cur;
		goto yy376;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy307;
			yyt3 = cur;
			goto yy376;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy378;
			}
			goto yy307;
		}
	}
yy372:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy307;
			goto yy379;
		} else {
			if (yych <= '\n') goto yy381;
			if (yych <= '\f') goto yy307;
			goto yy383;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy307;
			goto yy379;
		} else {
			if (yych <= '/') goto yy307;
			if (yych <= '9') goto yy372;
			goto yy307;
		}
	}
yy374:
	yyaccept = 7;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy384;
	if (yych == ' ') goto yy384;
yy375:
#line 521 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive: expected `!include`"
            " followed by spaces, a double-quoted file path, optional spaces, a"
            " semicolon, and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2445 "src/parse/lex.cc"
yy376:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 528 "../src/parse/lex.re"
	{
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2456 "src/parse/lex.cc"
yy378:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy376;
	goto yy307;
yy379:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy379;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy379;
		if (yych == '"') goto yy386;
		goto yy307;
	}
yy381:
	++cur;
	cur = yyt1;
#line 546 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2481 "src/parse/lex.cc"
yy383:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy381;
	goto yy307;
yy384:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy384;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy384;
		if (yych == '"') {
			yyt1 = cur;
			goto yy388;
		}
		goto yy307;
	}
yy386:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy386;
	}
	if (yych <= '\n') goto yy307;
	if (yych <= '"') goto yy390;
	goto yy391;
yy388:
	++cur;
	if ((lim - cur) < 4) { if (!fill(4)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy307;
		if (yych == '\n') goto yy307;
		goto yy388;
	} else {
		if (yych <= '"') goto yy392;
		if (yych == '\\') goto yy393;
		goto yy388;
	}
yy390:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy381;
	if (yych == '\r') goto yy383;
	goto yy307;
yy391:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy307;
	if (yych == '\n') goto yy307;
	goto yy386;
yy392:
	yych = (unsigned char)*++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy394;
		}
		goto yy307;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy394;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy396;
		}
		goto yy307;
	}
yy393:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy307;
	if (yych == '\n') goto yy307;
	goto yy388;
yy394:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy394;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy394;
		if (yych != ';') goto yy307;
	}
yy396:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy307;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy397;
		}
		if (yych <= '\f') goto yy307;
		yyt3 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy307;
			yyt3 = cur;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy399;
			}
			goto yy307;
		}
	}
yy397:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 517 "../src/parse/lex.re"
	{
        include(getstr(x + 1, y - 1), tok);
        goto scan;
    }
#line 2605 "src/parse/lex.cc"
yy399:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy397;
	goto yy307;
}
#line 566 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2618 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy403;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy403;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy406;
		}
	}
yy402:
#line 573 "../src/parse/lex.re"
	{ return false; }
#line 2675 "src/parse/lex.cc"
yy403:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy403;
	}
	if (yych == '=') goto yy406;
yy405:
	cur = mar;
	goto yy402;
yy406:
	yych = (unsigned char)*++cur;
	if (yych == '>') goto yy405;
	++cur;
	cur = yyt1;
#line 572 "../src/parse/lex.re"
	{ return true; }
#line 2694 "src/parse/lex.cc"
}
#line 574 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2703 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy412;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy412;
	}
#line 582 "../src/parse/lex.re"
	{ return false; }
#line 2752 "src/parse/lex.cc"
yy412:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy412;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy415;
	} else {
		if (yych <= '=') goto yy415;
		if (yych == '{') goto yy415;
	}
	cur = yyt1;
#line 581 "../src/parse/lex.re"
	{ return true; }
#line 2769 "src/parse/lex.cc"
yy415:
	++cur;
	cur = yyt1;
#line 580 "../src/parse/lex.re"
	{ return false; }
#line 2775 "src/parse/lex.cc"
}
#line 583 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2786 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy417;
yy418:
	++cur;
yy417:
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy418;
	}
	if (yych <= 0x1F) goto yy420;
	if (yych <= '!') goto yy421;
	if (yych == '>') goto yy424;
yy420:
#line 593 "../src/parse/lex.re"
	{ goto cond; }
#line 2838 "src/parse/lex.cc"
yy421:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') goto yy421;
	if (yych == ' ') goto yy421;
#line 591 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2847 "src/parse/lex.cc"
yy424:
	++cur;
#line 592 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2852 "src/parse/lex.cc"
}
#line 594 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2859 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy430;
		if (yych >= 'A') goto yy432;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy432;
		} else {
			if (yych <= '`') goto yy428;
			if (yych <= 'z') goto yy432;
		}
	}
yy428:
	++cur;
#line 600 "../src/parse/lex.re"
	{ goto error; }
#line 2913 "src/parse/lex.cc"
yy430:
	++cur;
#line 599 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2918 "src/parse/lex.cc"
yy432:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy432;
	}
#line 598 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2928 "src/parse/lex.cc"
}
#line 601 "../src/parse/lex.re"

next:

#line 2934 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy439;
		if (yych >= ' ') goto yy439;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy440;
		} else {
			if (yych == '>') goto yy443;
		}
	}
	++cur;
yy438:
#line 606 "../src/parse/lex.re"
	{ goto error; }
#line 2987 "src/parse/lex.cc"
yy439:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy445;
		if (yych <= 0x1F) goto yy438;
		goto yy445;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy438;
		} else {
			if (yych == '>') goto yy443;
			goto yy438;
		}
	}
yy440:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy440;
	}
#line 604 "../src/parse/lex.re"
	{ goto cond; }
#line 3011 "src/parse/lex.cc"
yy443:
	++cur;
#line 605 "../src/parse/lex.re"
	{ goto end; }
#line 3016 "src/parse/lex.cc"
yy445:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy445;
		if (yych >= ' ') goto yy445;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy440;
		} else {
			if (yych == '>') goto yy443;
		}
	}
	cur = mar;
	goto yy438;
}
#line 607 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 3051 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy450;
			if (yych == '\n') goto yy454;
			goto yy452;
		} else {
			if (yych <= '\r') goto yy456;
			if (yych == '"') goto yy457;
			goto yy452;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy457;
			if (yych == '/') goto yy459;
			goto yy452;
		} else {
			if (yych == '|') goto yy452;
			if (yych <= '}') goto yy460;
			goto yy452;
		}
	}
yy450:
	++cur;
#line 633 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3081 "src/parse/lex.cc"
yy452:
	++cur;
yy453:
#line 641 "../src/parse/lex.re"
	{ goto code; }
#line 3087 "src/parse/lex.cc"
yy454:
	yych = (unsigned char)*++cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy455;
		if (yych <= '\n') goto yy462;
	} else {
		if (yych <= '\r') goto yy462;
		if (yych == ' ') goto yy462;
	}
yy455:
#line 624 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 3107 "src/parse/lex.cc"
yy456:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy454;
	goto yy453;
yy457:
	++cur;
#line 640 "../src/parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3116 "src/parse/lex.cc"
yy459:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy464;
	if (yych == '/') goto yy466;
	goto yy453;
yy460:
	++cur;
#line 634 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 3129 "src/parse/lex.cc"
yy462:
	++cur;
	cur -= 1;
#line 623 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3135 "src/parse/lex.cc"
yy464:
	++cur;
#line 638 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3140 "src/parse/lex.cc"
yy466:
	++cur;
#line 639 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3145 "src/parse/lex.cc"
}
#line 642 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3157 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy470;
			if (yych == '\n') goto yy474;
			goto yy472;
		} else {
			if (yych <= '\r') goto yy476;
			if (yych == '"') goto yy477;
			goto yy472;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy477;
			if (yych == '/') goto yy479;
			goto yy472;
		} else {
			if (yych <= '{') goto yy480;
			if (yych == '}') goto yy482;
			goto yy472;
		}
	}
yy470:
	++cur;
#line 662 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3221 "src/parse/lex.cc"
yy472:
	++cur;
yy473:
#line 666 "../src/parse/lex.re"
	{ goto code; }
#line 3227 "src/parse/lex.cc"
yy474:
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy484;
	}
	if (yych == '#') goto yy487;
yy475:
#line 661 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3237 "src/parse/lex.cc"
yy476:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy474;
	goto yy473;
yy477:
	++cur;
#line 665 "../src/parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3246 "src/parse/lex.cc"
yy479:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy489;
	if (yych == '/') goto yy491;
	goto yy473;
yy480:
	++cur;
#line 659 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3256 "src/parse/lex.cc"
yy482:
	++cur;
#line 651 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3267 "src/parse/lex.cc"
yy484:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy484;
	}
	if (yych == '#') goto yy487;
yy486:
	cur = mar;
	goto yy475;
yy487:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy487;
		goto yy486;
	} else {
		if (yych <= ' ') goto yy487;
		if (yych == 'l') goto yy493;
		goto yy486;
	}
yy489:
	++cur;
#line 663 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3295 "src/parse/lex.cc"
yy491:
	++cur;
#line 664 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3300 "src/parse/lex.cc"
yy493:
	yych = (unsigned char)*++cur;
	if (yych != 'i') goto yy486;
	yych = (unsigned char)*++cur;
	if (yych != 'n') goto yy486;
	yych = (unsigned char)*++cur;
	if (yych != 'e') goto yy486;
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy498;
	if (yych <= '9') goto yy486;
	goto yy498;
yy497:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy498:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy497;
		goto yy486;
	} else {
		if (yych <= ' ') goto yy497;
		if (yych <= '0') goto yy486;
		if (yych >= ':') goto yy486;
		yyt1 = cur;
	}
yy499:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy499;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy486;
		if (yych <= '\t') goto yy501;
		if (yych <= '\n') goto yy503;
		goto yy486;
	} else {
		if (yych <= '\r') goto yy505;
		if (yych != ' ') goto yy486;
	}
yy501:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy501;
		goto yy486;
	} else {
		if (yych <= ' ') goto yy501;
		if (yych == '"') goto yy506;
		goto yy486;
	}
yy503:
	++cur;
	cur = yyt1;
#line 660 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3359 "src/parse/lex.cc"
yy505:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy503;
	goto yy486;
yy506:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy506;
	}
	if (yych <= '\n') goto yy486;
	if (yych >= '#') goto yy509;
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy503;
	if (yych == '\r') goto yy505;
	goto yy486;
yy509:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy486;
	if (yych == '\n') goto yy486;
	goto yy506;
}
#line 667 "../src/parse/lex.re"

}

void Scanner::try_lex_string_in_code(char quote)
{
    // We need to lex string literals in code blocks because they may contain closing
    // brace symbol that would otherwise be erroneously lexed as a real closing brace.
    //
    // However, single quote in Rust may be either the beginning of a char literal as in
    // '\u{1F600}', or a standalone one as in 'label. In the latter case trying to lex a
    // generic string literal will consume a fragment of the file until the next single
    // quote (if any) and result in either a spurios parse error, or incorrect generated
    // code. Therefore in Rust we try to lex a char literal, or else consume the quote.

    if (globopts->lang != LANG_RUST || quote != '\'') {
        lex_string(quote);
        return;
    }

    // Rust spec (literals): https://doc.rust-lang.org/reference/tokens.html#literals
    // Rust spec (input encoding): https://doc.rust-lang.org/reference/input-format.html

#line 3408 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy513;
			goto yy515;
		} else {
			if (yych <= 0x7F) goto yy513;
			if (yych >= 0xC2) goto yy516;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy517;
			if (yych <= 0xEF) goto yy518;
			goto yy519;
		} else {
			if (yych <= 0xF3) goto yy520;
			if (yych <= 0xF4) goto yy521;
		}
	}
yy512:
#line 695 "../src/parse/lex.re"
	{ return; }
#line 3468 "src/parse/lex.cc"
yy513:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy522;
yy514:
	cur = mar;
	goto yy512;
yy515:
	yych = (unsigned char)*++cur;
	if (yych <= 'm') {
		if (yych <= '\'') {
			if (yych == '"') goto yy513;
			if (yych <= '&') goto yy514;
			goto yy523;
		} else {
			if (yych <= '0') {
				if (yych <= '/') goto yy514;
				goto yy513;
			} else {
				if (yych == '\\') goto yy513;
				goto yy514;
			}
		}
	} else {
		if (yych <= 's') {
			if (yych <= 'n') goto yy513;
			if (yych == 'r') goto yy513;
			goto yy514;
		} else {
			if (yych <= 'u') {
				if (yych <= 't') goto yy513;
				goto yy524;
			} else {
				if (yych == 'x') goto yy525;
				goto yy514;
			}
		}
	}
yy516:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy514;
	if (yych <= 0xBF) goto yy513;
	goto yy514;
yy517:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy514;
	if (yych <= 0xBF) goto yy516;
	goto yy514;
yy518:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy514;
	if (yych <= 0xBF) goto yy516;
	goto yy514;
yy519:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy514;
	if (yych <= 0xBF) goto yy518;
	goto yy514;
yy520:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy514;
	if (yych <= 0xBF) goto yy518;
	goto yy514;
yy521:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy514;
	if (yych <= 0x8F) goto yy518;
	goto yy514;
yy522:
	++cur;
	goto yy512;
yy523:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy522;
	goto yy512;
yy524:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy526;
	goto yy514;
yy525:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy514;
	goto yy528;
yy526:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy514;
	goto yy530;
yy527:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy528:
	if (yybm[0+yych] & 128) {
		goto yy527;
	}
	if (yych == '\'') goto yy522;
	goto yy514;
yy529:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy530:
	if (yych <= 'F') {
		if (yych <= '/') goto yy514;
		if (yych <= '9') goto yy529;
		if (yych <= '@') goto yy514;
		goto yy529;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy514;
			goto yy529;
		} else {
			if (yych == '}') goto yy513;
			goto yy514;
		}
	}
}
#line 696 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3593 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy533;
			if (yych <= '\t') goto yy535;
			goto yy537;
		} else {
			if (yych == '\r') goto yy539;
			goto yy535;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy540;
			if (yych <= '&') goto yy535;
			goto yy540;
		} else {
			if (yych == '\\') goto yy542;
			goto yy535;
		}
	}
yy533:
	++cur;
#line 706 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3621 "src/parse/lex.cc"
yy535:
	++cur;
yy536:
#line 707 "../src/parse/lex.re"
	{ goto loop; }
#line 3627 "src/parse/lex.cc"
yy537:
	++cur;
#line 705 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3632 "src/parse/lex.cc"
yy539:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy537;
	goto yy536;
yy540:
	++cur;
#line 703 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3641 "src/parse/lex.cc"
yy542:
	yych = (unsigned char)*++cur;
	if (yych <= '&') {
		if (yych != '"') goto yy536;
	} else {
		if (yych <= '\'') goto yy543;
		if (yych != '\\') goto yy536;
	}
yy543:
	++cur;
#line 704 "../src/parse/lex.re"
	{ goto loop; }
#line 3654 "src/parse/lex.cc"
}
#line 708 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3664 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy547;
		if (yych == '\n') goto yy551;
		goto yy549;
	} else {
		if (yych <= '\r') goto yy553;
		if (yych == '*') goto yy554;
		goto yy549;
	}
yy547:
	++cur;
#line 717 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3682 "src/parse/lex.cc"
yy549:
	++cur;
yy550:
#line 718 "../src/parse/lex.re"
	{ goto loop; }
#line 3688 "src/parse/lex.cc"
yy551:
	++cur;
#line 716 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3693 "src/parse/lex.cc"
yy553:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy551;
	goto yy550;
yy554:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy550;
	++cur;
#line 715 "../src/parse/lex.re"
	{ return; }
#line 3704 "src/parse/lex.cc"
}
#line 719 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3714 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy559;
		if (yych <= '\t') goto yy561;
		goto yy563;
	} else {
		if (yych == '\r') goto yy565;
		goto yy561;
	}
yy559:
	++cur;
#line 727 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3731 "src/parse/lex.cc"
yy561:
	++cur;
yy562:
#line 728 "../src/parse/lex.re"
	{ goto loop; }
#line 3737 "src/parse/lex.cc"
yy563:
	++cur;
#line 726 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3742 "src/parse/lex.cc"
yy565:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy563;
	goto yy562;
}
#line 729 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3761 "src/parse/lex.cc"
{
	unsigned char yych;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == ']') goto yy569;
#line 742 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3769 "src/parse/lex.cc"
yy569:
	++cur;
#line 741 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3774 "src/parse/lex.cc"
}
#line 743 "../src/parse/lex.re"

snd:

#line 3780 "src/parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych == '-') goto yy574;
yy573:
#line 746 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3789 "src/parse/lex.cc"
yy574:
	yych = (unsigned char)*++cur;
	if (yych != ']') goto yy576;
	cur = mar;
	goto yy573;
yy576:
	++cur;
	cur -= 1;
#line 747 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3807 "src/parse/lex.cc"
}
#line 755 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 793 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3825 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy580;
		if (yych == '\n') goto yy584;
		goto yy582;
	} else {
		if (yych <= '\r') goto yy586;
		if (yych == '\\') goto yy587;
		goto yy582;
	}
yy580:
	++cur;
#line 774 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3844 "src/parse/lex.cc"
yy582:
	++cur;
yy583:
#line 776 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3850 "src/parse/lex.cc"
yy584:
	++cur;
#line 768 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3855 "src/parse/lex.cc"
yy586:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy584;
	goto yy583;
yy587:
	yych = (unsigned char)*++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy588;
				if (yych == '\n') goto yy584;
				goto yy589;
			} else {
				if (yych <= '\r') goto yy591;
				if (yych == '-') goto yy592;
				goto yy589;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy594;
				if (yych <= '7') goto yy596;
				if (yych <= 'T') goto yy589;
				goto yy597;
			} else {
				if (yych == 'X') goto yy599;
				if (yych <= '[') goto yy589;
				goto yy600;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy602;
				if (yych <= '`') goto yy589;
				if (yych <= 'a') goto yy604;
				goto yy606;
			} else {
				if (yych == 'f') goto yy608;
				if (yych <= 'm') goto yy589;
				goto yy610;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy612;
				if (yych <= 's') goto yy589;
				goto yy614;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy599;
					goto yy616;
				} else {
					if (yych == 'x') goto yy618;
					goto yy589;
				}
			}
		}
	}
yy588:
#line 771 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3916 "src/parse/lex.cc"
yy589:
	++cur;
yy590:
#line 789 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3925 "src/parse/lex.cc"
yy591:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy584;
	goto yy590;
yy592:
	++cur;
#line 787 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3934 "src/parse/lex.cc"
yy594:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy595;
	if (yych <= '7') goto yy619;
yy595:
#line 770 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3943 "src/parse/lex.cc"
yy596:
	++cur;
	goto yy595;
yy597:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy598;
		if (yych <= '9') goto yy621;
	} else {
		if (yych <= 'F') goto yy621;
		if (yych <= '`') goto yy598;
		if (yych <= 'f') goto yy621;
	}
yy598:
#line 769 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3961 "src/parse/lex.cc"
yy599:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy598;
		if (yych <= '9') goto yy622;
		goto yy598;
	} else {
		if (yych <= 'F') goto yy622;
		if (yych <= '`') goto yy598;
		if (yych <= 'f') goto yy622;
		goto yy598;
	}
yy600:
	++cur;
#line 786 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3979 "src/parse/lex.cc"
yy602:
	++cur;
#line 788 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3984 "src/parse/lex.cc"
yy604:
	++cur;
#line 779 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3989 "src/parse/lex.cc"
yy606:
	++cur;
#line 780 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3994 "src/parse/lex.cc"
yy608:
	++cur;
#line 781 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3999 "src/parse/lex.cc"
yy610:
	++cur;
#line 782 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4004 "src/parse/lex.cc"
yy612:
	++cur;
#line 783 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4009 "src/parse/lex.cc"
yy614:
	++cur;
#line 784 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4014 "src/parse/lex.cc"
yy616:
	++cur;
#line 785 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4019 "src/parse/lex.cc"
yy618:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy598;
		if (yych <= '9') goto yy623;
		goto yy598;
	} else {
		if (yych <= 'F') goto yy623;
		if (yych <= '`') goto yy598;
		if (yych <= 'f') goto yy623;
		goto yy598;
	}
yy619:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy620;
	if (yych <= '7') goto yy624;
yy620:
	cur = mar;
	if (yyaccept == 0) {
		goto yy595;
	} else {
		goto yy598;
	}
yy621:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy620;
		if (yych <= '9') goto yy626;
		goto yy620;
	} else {
		if (yych <= 'F') goto yy626;
		if (yych <= '`') goto yy620;
		if (yych <= 'f') goto yy626;
		goto yy620;
	}
yy622:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy620;
		if (yych <= '9') goto yy627;
		goto yy620;
	} else {
		if (yych <= 'F') goto yy627;
		if (yych <= '`') goto yy620;
		if (yych <= 'f') goto yy627;
		goto yy620;
	}
yy623:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy620;
		if (yych <= '9') goto yy628;
		goto yy620;
	} else {
		if (yych <= 'F') goto yy628;
		if (yych <= '`') goto yy620;
		if (yych <= 'f') goto yy628;
		goto yy620;
	}
yy624:
	++cur;
#line 778 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4084 "src/parse/lex.cc"
yy626:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy620;
		if (yych <= '9') goto yy630;
		goto yy620;
	} else {
		if (yych <= 'F') goto yy630;
		if (yych <= '`') goto yy620;
		if (yych <= 'f') goto yy630;
		goto yy620;
	}
yy627:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy620;
		if (yych <= '9') goto yy623;
		goto yy620;
	} else {
		if (yych <= 'F') goto yy623;
		if (yych <= '`') goto yy620;
		if (yych <= 'f') goto yy623;
		goto yy620;
	}
yy628:
	++cur;
#line 777 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4113 "src/parse/lex.cc"
yy630:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy620;
		if (yych >= ':') goto yy620;
	} else {
		if (yych <= 'F') goto yy631;
		if (yych <= '`') goto yy620;
		if (yych >= 'g') goto yy620;
	}
yy631:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy620;
		if (yych <= '9') goto yy622;
		goto yy620;
	} else {
		if (yych <= 'F') goto yy622;
		if (yych <= '`') goto yy620;
		if (yych <= 'f') goto yy622;
		goto yy620;
	}
}
#line 795 "../src/parse/lex.re"

    }
    else {
        
#line 4142 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy634;
			if (yych == '\n') goto yy638;
			goto yy636;
		} else {
			if (yych <= '\r') goto yy640;
			if (yych == '\\') goto yy641;
			goto yy636;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy643;
			if (yych <= 0xDF) goto yy645;
			if (yych <= 0xE0) goto yy646;
			goto yy647;
		} else {
			if (yych <= 0xF0) goto yy648;
			if (yych <= 0xF3) goto yy649;
			if (yych <= 0xF4) goto yy650;
			goto yy643;
		}
	}
yy634:
	++cur;
#line 774 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 4175 "src/parse/lex.cc"
yy636:
	++cur;
yy637:
#line 776 "../src/parse/lex.re"
	{ return decode(tok); }
#line 4181 "src/parse/lex.cc"
yy638:
	++cur;
#line 768 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 4186 "src/parse/lex.cc"
yy640:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy638;
	goto yy637;
yy641:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy651;
				} else {
					if (yych <= '\n') goto yy638;
					if (yych <= '\f') goto yy651;
					goto yy653;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy651;
					goto yy654;
				} else {
					if (yych <= '/') goto yy651;
					if (yych <= '3') goto yy656;
					goto yy658;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy651;
					goto yy659;
				} else {
					if (yych == 'X') goto yy661;
					goto yy651;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy662;
					goto yy664;
				} else {
					if (yych <= '`') goto yy651;
					if (yych <= 'a') goto yy666;
					goto yy668;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy651;
					goto yy670;
				} else {
					if (yych == 'n') goto yy672;
					goto yy651;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy674;
					goto yy651;
				} else {
					if (yych <= 't') goto yy676;
					if (yych <= 'u') goto yy661;
					goto yy678;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy651;
					goto yy680;
				} else {
					if (yych <= 0x7F) goto yy651;
					if (yych >= 0xC2) goto yy681;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy683;
					if (yych <= 0xEF) goto yy684;
					goto yy685;
				} else {
					if (yych <= 0xF3) goto yy686;
					if (yych <= 0xF4) goto yy687;
				}
			}
		}
	}
yy642:
#line 771 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 4278 "src/parse/lex.cc"
yy643:
	++cur;
yy644:
#line 772 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 4284 "src/parse/lex.cc"
yy645:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy644;
	if (yych <= 0xBF) goto yy636;
	goto yy644;
yy646:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy644;
	if (yych <= 0xBF) goto yy688;
	goto yy644;
yy647:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy644;
	if (yych <= 0xBF) goto yy688;
	goto yy644;
yy648:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy644;
	if (yych <= 0xBF) goto yy689;
	goto yy644;
yy649:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy644;
	if (yych <= 0xBF) goto yy689;
	goto yy644;
yy650:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy644;
	if (yych <= 0x8F) goto yy689;
	goto yy644;
yy651:
	++cur;
yy652:
#line 789 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 4328 "src/parse/lex.cc"
yy653:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy638;
	goto yy652;
yy654:
	++cur;
#line 787 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4337 "src/parse/lex.cc"
yy656:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy657;
	if (yych <= '7') goto yy690;
yy657:
#line 770 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4346 "src/parse/lex.cc"
yy658:
	++cur;
	goto yy657;
yy659:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy660;
		if (yych <= '9') goto yy691;
	} else {
		if (yych <= 'F') goto yy691;
		if (yych <= '`') goto yy660;
		if (yych <= 'f') goto yy691;
	}
yy660:
#line 769 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4364 "src/parse/lex.cc"
yy661:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy660;
		if (yych <= '9') goto yy692;
		goto yy660;
	} else {
		if (yych <= 'F') goto yy692;
		if (yych <= '`') goto yy660;
		if (yych <= 'f') goto yy692;
		goto yy660;
	}
yy662:
	++cur;
#line 786 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4382 "src/parse/lex.cc"
yy664:
	++cur;
#line 788 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4387 "src/parse/lex.cc"
yy666:
	++cur;
#line 779 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4392 "src/parse/lex.cc"
yy668:
	++cur;
#line 780 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4397 "src/parse/lex.cc"
yy670:
	++cur;
#line 781 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4402 "src/parse/lex.cc"
yy672:
	++cur;
#line 782 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4407 "src/parse/lex.cc"
yy674:
	++cur;
#line 783 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4412 "src/parse/lex.cc"
yy676:
	++cur;
#line 784 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4417 "src/parse/lex.cc"
yy678:
	++cur;
#line 785 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4422 "src/parse/lex.cc"
yy680:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy660;
		if (yych <= '9') goto yy693;
		goto yy660;
	} else {
		if (yych <= 'F') goto yy693;
		if (yych <= '`') goto yy660;
		if (yych <= 'f') goto yy693;
		goto yy660;
	}
yy681:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy682;
	if (yych <= 0xBF) goto yy651;
yy682:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy642;
		} else {
			goto yy644;
		}
	} else {
		if (yyaccept == 2) {
			goto yy657;
		} else {
			goto yy660;
		}
	}
yy683:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy682;
	if (yych <= 0xBF) goto yy681;
	goto yy682;
yy684:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy682;
	if (yych <= 0xBF) goto yy681;
	goto yy682;
yy685:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy682;
	if (yych <= 0xBF) goto yy684;
	goto yy682;
yy686:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy682;
	if (yych <= 0xBF) goto yy684;
	goto yy682;
yy687:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy682;
	if (yych <= 0x8F) goto yy684;
	goto yy682;
yy688:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy682;
	if (yych <= 0xBF) goto yy636;
	goto yy682;
yy689:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy682;
	if (yych <= 0xBF) goto yy688;
	goto yy682;
yy690:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy682;
	if (yych <= '7') goto yy694;
	goto yy682;
yy691:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy682;
		if (yych <= '9') goto yy696;
		goto yy682;
	} else {
		if (yych <= 'F') goto yy696;
		if (yych <= '`') goto yy682;
		if (yych <= 'f') goto yy696;
		goto yy682;
	}
yy692:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy682;
		if (yych <= '9') goto yy697;
		goto yy682;
	} else {
		if (yych <= 'F') goto yy697;
		if (yych <= '`') goto yy682;
		if (yych <= 'f') goto yy697;
		goto yy682;
	}
yy693:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy682;
		if (yych <= '9') goto yy698;
		goto yy682;
	} else {
		if (yych <= 'F') goto yy698;
		if (yych <= '`') goto yy682;
		if (yych <= 'f') goto yy698;
		goto yy682;
	}
yy694:
	++cur;
#line 778 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4535 "src/parse/lex.cc"
yy696:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy682;
		if (yych <= '9') goto yy700;
		goto yy682;
	} else {
		if (yych <= 'F') goto yy700;
		if (yych <= '`') goto yy682;
		if (yych <= 'f') goto yy700;
		goto yy682;
	}
yy697:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy682;
		if (yych <= '9') goto yy693;
		goto yy682;
	} else {
		if (yych <= 'F') goto yy693;
		if (yych <= '`') goto yy682;
		if (yych <= 'f') goto yy693;
		goto yy682;
	}
yy698:
	++cur;
#line 777 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4564 "src/parse/lex.cc"
yy700:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy682;
		if (yych >= ':') goto yy682;
	} else {
		if (yych <= 'F') goto yy701;
		if (yych <= '`') goto yy682;
		if (yych >= 'g') goto yy682;
	}
yy701:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy682;
		if (yych <= '9') goto yy692;
		goto yy682;
	} else {
		if (yych <= 'F') goto yy692;
		if (yych <= '`') goto yy682;
		if (yych <= 'f') goto yy692;
		goto yy682;
	}
}
#line 798 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();
    #line 832 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4601 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy704;
		if (yych == '\n') goto yy708;
		goto yy706;
	} else {
		if (yych <= '\r') goto yy710;
		if (yych == '\\') goto yy711;
		goto yy706;
	}
yy704:
	++cur;
#line 814 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4620 "src/parse/lex.cc"
yy706:
	++cur;
yy707:
#line 816 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4626 "src/parse/lex.cc"
yy708:
	++cur;
#line 808 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4631 "src/parse/lex.cc"
yy710:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy708;
	goto yy707;
yy711:
	yych = (unsigned char)*++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy712;
				if (yych <= '\t') goto yy713;
				goto yy708;
			} else {
				if (yych == '\r') goto yy715;
				if (yych <= '/') goto yy713;
				goto yy716;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy718;
				if (yych == 'U') goto yy719;
				goto yy713;
			} else {
				if (yych <= 'X') goto yy721;
				if (yych == '\\') goto yy722;
				goto yy713;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy724;
				if (yych <= 'b') goto yy726;
				goto yy713;
			} else {
				if (yych <= 'f') goto yy728;
				if (yych == 'n') goto yy730;
				goto yy713;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy732;
				if (yych <= 's') goto yy713;
				if (yych <= 't') goto yy734;
				goto yy721;
			} else {
				if (yych <= 'v') goto yy736;
				if (yych == 'x') goto yy738;
				goto yy713;
			}
		}
	}
yy712:
#line 811 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4687 "src/parse/lex.cc"
yy713:
	++cur;
yy714:
#line 827 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4697 "src/parse/lex.cc"
yy715:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy708;
	goto yy714;
yy716:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy717;
	if (yych <= '7') goto yy739;
yy717:
#line 810 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4710 "src/parse/lex.cc"
yy718:
	++cur;
	goto yy717;
yy719:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy720;
		if (yych <= '9') goto yy741;
	} else {
		if (yych <= 'F') goto yy741;
		if (yych <= '`') goto yy720;
		if (yych <= 'f') goto yy741;
	}
yy720:
#line 809 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4728 "src/parse/lex.cc"
yy721:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy720;
		if (yych <= '9') goto yy742;
		goto yy720;
	} else {
		if (yych <= 'F') goto yy742;
		if (yych <= '`') goto yy720;
		if (yych <= 'f') goto yy742;
		goto yy720;
	}
yy722:
	++cur;
#line 826 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4746 "src/parse/lex.cc"
yy724:
	++cur;
#line 819 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4751 "src/parse/lex.cc"
yy726:
	++cur;
#line 820 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4756 "src/parse/lex.cc"
yy728:
	++cur;
#line 821 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4761 "src/parse/lex.cc"
yy730:
	++cur;
#line 822 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4766 "src/parse/lex.cc"
yy732:
	++cur;
#line 823 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4771 "src/parse/lex.cc"
yy734:
	++cur;
#line 824 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4776 "src/parse/lex.cc"
yy736:
	++cur;
#line 825 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4781 "src/parse/lex.cc"
yy738:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy720;
		if (yych <= '9') goto yy743;
		goto yy720;
	} else {
		if (yych <= 'F') goto yy743;
		if (yych <= '`') goto yy720;
		if (yych <= 'f') goto yy743;
		goto yy720;
	}
yy739:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy740;
	if (yych <= '7') goto yy744;
yy740:
	cur = mar;
	if (yyaccept == 0) {
		goto yy717;
	} else {
		goto yy720;
	}
yy741:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy740;
		if (yych <= '9') goto yy746;
		goto yy740;
	} else {
		if (yych <= 'F') goto yy746;
		if (yych <= '`') goto yy740;
		if (yych <= 'f') goto yy746;
		goto yy740;
	}
yy742:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy740;
		if (yych <= '9') goto yy747;
		goto yy740;
	} else {
		if (yych <= 'F') goto yy747;
		if (yych <= '`') goto yy740;
		if (yych <= 'f') goto yy747;
		goto yy740;
	}
yy743:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy740;
		if (yych <= '9') goto yy748;
		goto yy740;
	} else {
		if (yych <= 'F') goto yy748;
		if (yych <= '`') goto yy740;
		if (yych <= 'f') goto yy748;
		goto yy740;
	}
yy744:
	++cur;
#line 818 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4846 "src/parse/lex.cc"
yy746:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy740;
		if (yych <= '9') goto yy750;
		goto yy740;
	} else {
		if (yych <= 'F') goto yy750;
		if (yych <= '`') goto yy740;
		if (yych <= 'f') goto yy750;
		goto yy740;
	}
yy747:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy740;
		if (yych <= '9') goto yy743;
		goto yy740;
	} else {
		if (yych <= 'F') goto yy743;
		if (yych <= '`') goto yy740;
		if (yych <= 'f') goto yy743;
		goto yy740;
	}
yy748:
	++cur;
#line 817 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4875 "src/parse/lex.cc"
yy750:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy740;
		if (yych >= ':') goto yy740;
	} else {
		if (yych <= 'F') goto yy751;
		if (yych <= '`') goto yy740;
		if (yych >= 'g') goto yy740;
	}
yy751:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy740;
		if (yych <= '9') goto yy742;
		goto yy740;
	} else {
		if (yych <= 'F') goto yy742;
		if (yych <= '`') goto yy740;
		if (yych <= 'f') goto yy742;
		goto yy740;
	}
}
#line 834 "../src/parse/lex.re"

    }
    else {
        
#line 4904 "src/parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy754;
			if (yych == '\n') goto yy758;
			goto yy756;
		} else {
			if (yych <= '\r') goto yy760;
			if (yych == '\\') goto yy761;
			goto yy756;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy763;
			if (yych <= 0xDF) goto yy765;
			if (yych <= 0xE0) goto yy766;
			goto yy767;
		} else {
			if (yych <= 0xF0) goto yy768;
			if (yych <= 0xF3) goto yy769;
			if (yych <= 0xF4) goto yy770;
			goto yy763;
		}
	}
yy754:
	++cur;
#line 814 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4937 "src/parse/lex.cc"
yy756:
	++cur;
yy757:
#line 816 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4943 "src/parse/lex.cc"
yy758:
	++cur;
#line 808 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4948 "src/parse/lex.cc"
yy760:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy758;
	goto yy757;
yy761:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy762;
				if (yych == '\n') goto yy758;
				goto yy771;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy773;
					goto yy771;
				} else {
					if (yych <= '3') goto yy774;
					if (yych <= '7') goto yy776;
					goto yy771;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy777;
					goto yy771;
				} else {
					if (yych <= 'X') goto yy779;
					if (yych <= '[') goto yy771;
					goto yy780;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy771;
					goto yy782;
				} else {
					if (yych <= 'b') goto yy784;
					if (yych <= 'e') goto yy771;
					goto yy786;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy788;
				if (yych <= 'q') goto yy771;
				goto yy790;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy771;
					goto yy792;
				} else {
					if (yych <= 'u') goto yy779;
					if (yych <= 'v') goto yy794;
					goto yy771;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy796;
					goto yy771;
				} else {
					if (yych <= 0xC1) goto yy762;
					if (yych <= 0xDF) goto yy797;
					goto yy799;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy800;
					goto yy801;
				} else {
					if (yych <= 0xF3) goto yy802;
					if (yych <= 0xF4) goto yy803;
				}
			}
		}
	}
yy762:
#line 811 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 5033 "src/parse/lex.cc"
yy763:
	++cur;
yy764:
#line 812 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 5039 "src/parse/lex.cc"
yy765:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy764;
	if (yych <= 0xBF) goto yy756;
	goto yy764;
yy766:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy764;
	if (yych <= 0xBF) goto yy804;
	goto yy764;
yy767:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy764;
	if (yych <= 0xBF) goto yy804;
	goto yy764;
yy768:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy764;
	if (yych <= 0xBF) goto yy805;
	goto yy764;
yy769:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy764;
	if (yych <= 0xBF) goto yy805;
	goto yy764;
yy770:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy764;
	if (yych <= 0x8F) goto yy805;
	goto yy764;
yy771:
	++cur;
yy772:
#line 827 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 5084 "src/parse/lex.cc"
yy773:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy758;
	goto yy772;
yy774:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy775;
	if (yych <= '7') goto yy806;
yy775:
#line 810 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 5097 "src/parse/lex.cc"
yy776:
	++cur;
	goto yy775;
yy777:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy778;
		if (yych <= '9') goto yy807;
	} else {
		if (yych <= 'F') goto yy807;
		if (yych <= '`') goto yy778;
		if (yych <= 'f') goto yy807;
	}
yy778:
#line 809 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 5115 "src/parse/lex.cc"
yy779:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy778;
		if (yych <= '9') goto yy808;
		goto yy778;
	} else {
		if (yych <= 'F') goto yy808;
		if (yych <= '`') goto yy778;
		if (yych <= 'f') goto yy808;
		goto yy778;
	}
yy780:
	++cur;
#line 826 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 5133 "src/parse/lex.cc"
yy782:
	++cur;
#line 819 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 5138 "src/parse/lex.cc"
yy784:
	++cur;
#line 820 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 5143 "src/parse/lex.cc"
yy786:
	++cur;
#line 821 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 5148 "src/parse/lex.cc"
yy788:
	++cur;
#line 822 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 5153 "src/parse/lex.cc"
yy790:
	++cur;
#line 823 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 5158 "src/parse/lex.cc"
yy792:
	++cur;
#line 824 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 5163 "src/parse/lex.cc"
yy794:
	++cur;
#line 825 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 5168 "src/parse/lex.cc"
yy796:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy778;
		if (yych <= '9') goto yy809;
		goto yy778;
	} else {
		if (yych <= 'F') goto yy809;
		if (yych <= '`') goto yy778;
		if (yych <= 'f') goto yy809;
		goto yy778;
	}
yy797:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy798;
	if (yych <= 0xBF) goto yy771;
yy798:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy762;
		} else {
			goto yy764;
		}
	} else {
		if (yyaccept == 2) {
			goto yy775;
		} else {
			goto yy778;
		}
	}
yy799:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy798;
	if (yych <= 0xBF) goto yy797;
	goto yy798;
yy800:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy798;
	if (yych <= 0xBF) goto yy797;
	goto yy798;
yy801:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy798;
	if (yych <= 0xBF) goto yy800;
	goto yy798;
yy802:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy798;
	if (yych <= 0xBF) goto yy800;
	goto yy798;
yy803:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy798;
	if (yych <= 0x8F) goto yy800;
	goto yy798;
yy804:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy798;
	if (yych <= 0xBF) goto yy756;
	goto yy798;
yy805:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy798;
	if (yych <= 0xBF) goto yy804;
	goto yy798;
yy806:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy798;
	if (yych <= '7') goto yy810;
	goto yy798;
yy807:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy798;
		if (yych <= '9') goto yy812;
		goto yy798;
	} else {
		if (yych <= 'F') goto yy812;
		if (yych <= '`') goto yy798;
		if (yych <= 'f') goto yy812;
		goto yy798;
	}
yy808:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy798;
		if (yych <= '9') goto yy813;
		goto yy798;
	} else {
		if (yych <= 'F') goto yy813;
		if (yych <= '`') goto yy798;
		if (yych <= 'f') goto yy813;
		goto yy798;
	}
yy809:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy798;
		if (yych <= '9') goto yy814;
		goto yy798;
	} else {
		if (yych <= 'F') goto yy814;
		if (yych <= '`') goto yy798;
		if (yych <= 'f') goto yy814;
		goto yy798;
	}
yy810:
	++cur;
#line 818 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 5281 "src/parse/lex.cc"
yy812:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy798;
		if (yych <= '9') goto yy816;
		goto yy798;
	} else {
		if (yych <= 'F') goto yy816;
		if (yych <= '`') goto yy798;
		if (yych <= 'f') goto yy816;
		goto yy798;
	}
yy813:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy798;
		if (yych <= '9') goto yy809;
		goto yy798;
	} else {
		if (yych <= 'F') goto yy809;
		if (yych <= '`') goto yy798;
		if (yych <= 'f') goto yy809;
		goto yy798;
	}
yy814:
	++cur;
#line 817 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 5310 "src/parse/lex.cc"
yy816:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy798;
		if (yych >= ':') goto yy798;
	} else {
		if (yych <= 'F') goto yy817;
		if (yych <= '`') goto yy798;
		if (yych >= 'g') goto yy798;
	}
yy817:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy798;
		if (yych <= '9') goto yy808;
		goto yy798;
	} else {
		if (yych <= 'F') goto yy808;
		if (yych <= '`') goto yy798;
		if (yych <= 'f') goto yy808;
		goto yy798;
	}
}
#line 837 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5357 "src/parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy822;
		} else {
			if (yych <= '\n') goto yy824;
			if (yych <= '\f') goto yy822;
			goto yy826;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy822;
			goto yy827;
		} else {
			if (yych <= '0') goto yy822;
			if (yych <= '9') goto yy828;
			goto yy822;
		}
	}
	++cur;
#line 879 "../src/parse/lex.re"
	{ --cur; return; }
#line 5417 "src/parse/lex.cc"
yy822:
	++cur;
yy823:
#line 880 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5423 "src/parse/lex.cc"
yy824:
	++cur;
#line 878 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5428 "src/parse/lex.cc"
yy826:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy824;
	goto yy823;
yy827:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x00) goto yy823;
	if (yych == '\n') goto yy823;
	goto yy832;
yy828:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy828;
	}
#line 859 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5455 "src/parse/lex.cc"
yy831:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy832:
	if (yybm[0+yych] & 128) {
		goto yy831;
	}
	if (yych <= '\n') goto yy833;
	if (yych <= '"') goto yy834;
	goto yy836;
yy833:
	cur = mar;
	goto yy823;
yy834:
	++cur;
#line 869 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5481 "src/parse/lex.cc"
yy836:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy833;
	if (yych == '\n') goto yy833;
	goto yy831;
}
#line 881 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
