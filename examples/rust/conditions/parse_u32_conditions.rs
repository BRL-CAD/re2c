/* Generated by re2c */
// re2rust $INPUT -o $OUTPUT -c


const YYC_INIT: usize = 0;
const YYC_BIN: usize = 10;
const YYC_DEC: usize = 14;
const YYC_HEX: usize = 18;
const YYC_OCT: usize = 24;



const ERROR: u64 = std::u32::MAX as u64 + 1;

fn add(num: u64, dgt: u8, base: u64) -> u64 {
    return std::cmp::min(num * base + dgt as u64, ERROR)
}

fn parse_u32(s: &[u8]) -> Option<u32> {
    let mut cur = 0;
    let mut mar = 0;
    let mut cond = YYC_INIT;
    let mut num = 0u64;

    'lex : loop {
{
	#[allow(unused_assignments)]
	let mut yych : u8 = 0;
	let mut yystate : usize = cond;
	loop {
		match yystate {
			0 => {
				yych = unsafe {*s.get_unchecked(cur)};
				cur += 1;
				match yych {
					0x30 => {
						yystate = 2;
						continue;
					}
					0x31 ..= 0x39 => {
						yystate = 4;
						continue;
					}
					_ => {
						yystate = 1;
						continue;
					}
				}
			}
			1 => { return None; }
			2 => {
				mar = cur;
				yych = unsafe {*s.get_unchecked(cur)};
				match yych {
					0x42 |
					0x62 => {
						cur += 1;
						yystate = 5;
						continue;
					}
					0x58 |
					0x78 => {
						cur += 1;
						yystate = 7;
						continue;
					}
					_ => {
						yystate = 3;
						continue;
					}
				}
			}
			3 => {
				cond = YYC_OCT;
				yystate = YYC_OCT;
				continue;
			}
			4 => {
				cur = (cur as isize + -1) as usize;
				cond = YYC_DEC;
				yystate = YYC_DEC;
				continue;
			}
			5 => {
				yych = unsafe {*s.get_unchecked(cur)};
				match yych {
					0x30 ..= 0x31 => {
						cur += 1;
						yystate = 8;
						continue;
					}
					_ => {
						yystate = 6;
						continue;
					}
				}
			}
			6 => {
				cur = mar;
				yystate = 3;
				continue;
			}
			7 => {
				yych = unsafe {*s.get_unchecked(cur)};
				match yych {
					0x30 ..= 0x39 |
					0x41 ..= 0x46 |
					0x61 ..= 0x66 => {
						cur += 1;
						yystate = 9;
						continue;
					}
					_ => {
						yystate = 6;
						continue;
					}
				}
			}
			8 => {
				cur = (cur as isize + -1) as usize;
				cond = YYC_BIN;
				yystate = YYC_BIN;
				continue;
			}
			9 => {
				cur = (cur as isize + -1) as usize;
				cond = YYC_HEX;
				yystate = YYC_HEX;
				continue;
			}
			10 => {
				yych = unsafe {*s.get_unchecked(cur)};
				cur += 1;
				match yych {
					0x00 => {
						yystate = 11;
						continue;
					}
					0x30 ..= 0x31 => {
						yystate = 13;
						continue;
					}
					_ => {
						yystate = 12;
						continue;
					}
				}
			}
			11 => {
            return if num < ERROR { Some(num as u32) } else { None };
        }
			12 => { return None; }
			13 => { num = add(num, s[cur-1] - 48, 2);  continue 'lex; }
			14 => {
				yych = unsafe {*s.get_unchecked(cur)};
				cur += 1;
				match yych {
					0x00 => {
						yystate = 15;
						continue;
					}
					0x30 ..= 0x39 => {
						yystate = 17;
						continue;
					}
					_ => {
						yystate = 16;
						continue;
					}
				}
			}
			15 => {
            return if num < ERROR { Some(num as u32) } else { None };
        }
			16 => { return None; }
			17 => { num = add(num, s[cur-1] - 48, 10); continue 'lex; }
			18 => {
				yych = unsafe {*s.get_unchecked(cur)};
				cur += 1;
				match yych {
					0x00 => {
						yystate = 19;
						continue;
					}
					0x30 ..= 0x39 => {
						yystate = 21;
						continue;
					}
					0x41 ..= 0x46 => {
						yystate = 22;
						continue;
					}
					0x61 ..= 0x66 => {
						yystate = 23;
						continue;
					}
					_ => {
						yystate = 20;
						continue;
					}
				}
			}
			19 => {
            return if num < ERROR { Some(num as u32) } else { None };
        }
			20 => { return None; }
			21 => { num = add(num, s[cur-1] - 48, 16); continue 'lex; }
			22 => { num = add(num, s[cur-1] - 55, 16); continue 'lex; }
			23 => { num = add(num, s[cur-1] - 87, 16); continue 'lex; }
			24 => {
				yych = unsafe {*s.get_unchecked(cur)};
				cur += 1;
				match yych {
					0x00 => {
						yystate = 25;
						continue;
					}
					0x30 ..= 0x37 => {
						yystate = 27;
						continue;
					}
					_ => {
						yystate = 26;
						continue;
					}
				}
			}
			25 => {
            return if num < ERROR { Some(num as u32) } else { None };
        }
			26 => { return None; }
			27 => { num = add(num, s[cur-1] - 48, 8);  continue 'lex; }
			_ => {
				panic!("internal lexer error")
			}
		}
	}
}
}
}

fn main() {
    assert_eq!(parse_u32(b"1234567890\0"), Some(1234567890));
    assert_eq!(parse_u32(b"0b1101\0"), Some(13));
    assert_eq!(parse_u32(b"0x7Fe\0"), Some(2046));
    assert_eq!(parse_u32(b"0644\0"), Some(420));
    assert_eq!(parse_u32(b"9999999999\0"), None);
    assert_eq!(parse_u32(b"\0"), None);
}
