// Code generated by re2c, DO NOT EDIT.
//line "go/reuse/reuse.re":1
//go:generate re2go $INPUT -o $OUTPUT --input-encoding utf8

// This example supports multiple input encodings: UTF-8 and UTF-32.
// Both lexers are generated from the same rules block, and the use
// blocks add only encoding-specific configurations.

package main

//line "go/reuse/reuse.re":18


func lexUTF8(str []uint8) int {
	var cursor, marker int
	
//line "go/reuse/reuse.go":18
{
	var yych uint8
	yych = str[cursor]
	switch (yych) {
	case 0xE2:
		goto yy3
	default:
		goto yy1
	}
yy1:
	cursor += 1
yy2:
//line "go/reuse/reuse.re":17
	{ return 1; }
//line "go/reuse/reuse.go":33
yy3:
	cursor += 1
	marker = cursor
	yych = str[cursor]
	switch (yych) {
	case 0x88:
		goto yy4
	default:
		goto yy2
	}
yy4:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case 0x80:
		goto yy6
	default:
		goto yy5
	}
yy5:
	cursor = marker
	goto yy2
yy6:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case 'x':
		goto yy7
	default:
		goto yy5
	}
yy7:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case ' ':
		goto yy8
	default:
		goto yy5
	}
yy8:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case 0xE2:
		goto yy9
	default:
		goto yy5
	}
yy9:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case 0x88:
		goto yy10
	default:
		goto yy5
	}
yy10:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case 0x83:
		goto yy11
	default:
		goto yy5
	}
yy11:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case 'y':
		goto yy12
	default:
		goto yy5
	}
yy12:
	cursor += 1
//line "go/reuse/reuse.re":16
	{ return 0; }
//line "go/reuse/reuse.go":114
}
//line "go/reuse/reuse.re":25

}

func lexUTF32(str []uint32) int {
	var cursor, marker int
	
//line "go/reuse/reuse.go":123
{
	var yych uint32
	yych = str[cursor]
	if (yych == 0x00002200) {
		goto yy15
	}
	cursor += 1
yy14:
//line "go/reuse/reuse.re":17
	{ return 1; }
//line "go/reuse/reuse.go":134
yy15:
	cursor += 1
	marker = cursor
	yych = str[cursor]
	if (yych != 'x') {
		goto yy14
	}
	cursor += 1
	yych = str[cursor]
	if (yych == ' ') {
		goto yy17
	}
yy16:
	cursor = marker
	goto yy14
yy17:
	cursor += 1
	yych = str[cursor]
	if (yych != 0x00002203) {
		goto yy16
	}
	cursor += 1
	yych = str[cursor]
	if (yych != 'y') {
		goto yy16
	}
	cursor += 1
//line "go/reuse/reuse.re":16
	{ return 0; }
//line "go/reuse/reuse.go":164
}
//line "go/reuse/reuse.re":33

}

func main() {
	assert_eq := func(x, y int) { if x != y { panic("error") } }
	assert_eq(lexUTF8([]uint8{0xe2, 0x88, 0x80, 0x78, 0x20, 0xe2, 0x88, 0x83, 0x79}), 0)
	assert_eq(lexUTF32([]uint32{0x2200, 0x78, 0x20, 0x2203, 0x79}), 0)
}
