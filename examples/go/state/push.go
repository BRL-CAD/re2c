// Code generated by re2c, DO NOT EDIT.
//line "go/state/push.re":1
//go:generate re2go -f $INPUT -o $OUTPUT
package main

import (
	"fmt"
	"os"
)

const BUFSIZE int = 10 // small for the sake of example

type State struct {
	file   *os.File
	data   []byte
	cursor int
	marker int
	token  int
	limit  int
	state  int
}

const (
	lexEnd = iota
	lexReady
	lexWaitingForInput
	lexPacketBroken
	lexPacketTooBig
)

func fill(st *State) int {
	shift := st.token
	used := st.limit - st.token
	free := BUFSIZE - used

	// Error: no space. In real life can reallocate a larger buffer.
	if free < 1 { return lexPacketTooBig }

	// Shift buffer contents (discard already processed data).
	copy(st.data[0:], st.data[shift:shift+used])
	st.cursor -= shift
	st.marker -= shift
	st.limit -= shift
	st.token -= shift

	// Fill free space at the end of buffer with new data.
	n, _ := st.file.Read(st.data[st.limit:BUFSIZE])
	st.limit += n
	st.data[st.limit] = 0 // append sentinel symbol

	return lexReady
}

func lex(st *State, recv *int) int {
	var yych byte
	
//line "go/state/push.go":58
switch (st.state) {
default:
	goto yy0
case 0:
	if (st.limit <= st.cursor) {
		goto yy11
	}
	goto yyFillLabel0
case 1:
	if (st.limit <= st.cursor) {
		goto yy4
	}
	goto yyFillLabel1
case 2:
	if (st.limit <= st.cursor) {
		goto yy10
	}
	goto yyFillLabel2
}
//line "go/state/push.re":54

loop:
	st.token = st.cursor
	
//line "go/state/push.go":83

yy0:
yyFillLabel0:
	yych = st.data[st.cursor]
	switch (yych) {
	case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':
		goto yy5
	default:
		if (st.limit <= st.cursor) {
			st.state = 0
			return lexWaitingForInput
		}
		goto yy3
	}
yy3:
	st.cursor += 1
yy4:
	st.state = -1
//line "go/state/push.re":70
	{ return lexPacketBroken }
//line "go/state/push.go":104
yy5:
	st.cursor += 1
	st.marker = st.cursor
yyFillLabel1:
	yych = st.data[st.cursor]
	switch (yych) {
	case ';':
		goto yy6
	case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':
		goto yy8
	default:
		if (st.limit <= st.cursor) {
			st.state = 1
			return lexWaitingForInput
		}
		goto yy4
	}
yy6:
	st.cursor += 1
	st.state = -1
//line "go/state/push.re":72
	{ *recv = *recv + 1; goto loop }
//line "go/state/push.go":127
yy8:
	st.cursor += 1
yyFillLabel2:
	yych = st.data[st.cursor]
	switch (yych) {
	case ';':
		goto yy6
	case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':
		goto yy8
	default:
		if (st.limit <= st.cursor) {
			st.state = 2
			return lexWaitingForInput
		}
		goto yy10
	}
yy10:
	st.cursor = st.marker
	goto yy4
yy11:
	st.state = -1
//line "go/state/push.re":71
	{ return lexEnd }
//line "go/state/push.go":151
//line "go/state/push.re":73

}

func test(expect int, packets []string) {
	// Create a "socket" (open the same file for reading and writing).
	fname := "pipe"
	fw, _ := os.Create(fname)
	fr, _ := os.Open(fname)

	// Initialize lexer state: `state` value is -1, all offsets are at the end
	// of buffer, the character at `lim` offset is the sentinel (null).
	st := &State{
		file:   fr,
		data:   make([]byte, BUFSIZE+1),
		cursor: BUFSIZE,
		marker: BUFSIZE,
		token:  BUFSIZE,
		limit:  BUFSIZE,
		state:  -1,
	}
	// data is zero-initialized, no need to write sentinel

	// Main loop. The buffer contains incomplete data which appears packet by
	// packet. When the lexer needs more input it saves its internal state and
	// returns to the caller which should provide more input and resume lexing.
	var status int
	send := 0
	recv := 0
	for {
		status = lex(st, &recv)
		if status == lexEnd {
			break
		} else if status == lexWaitingForInput {
			if send < len(packets) {
				fw.WriteString(packets[send])
				send += 1
			}
			status = fill(st)
			if status != lexReady {
				break
			}
		} else if status == lexPacketBroken {
			break
		}
	}

	// Check results.
	if status != expect || (status == lexEnd && recv != send) {
		panic(fmt.Sprintf("got %d, want %d", status, expect))
	}

	// Cleanup: remove input file.
	fr.Close()
	fw.Close()
	os.Remove(fname)
}

func main() {
	test(lexEnd, []string{})
	test(lexEnd, []string{"zero;", "one;", "two;", "three;", "four;"})
	test(lexPacketBroken, []string{"??;"})
	test(lexPacketTooBig, []string{"looooooooooooong;"})
}
