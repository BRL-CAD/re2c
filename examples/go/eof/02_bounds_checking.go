// Code generated by re2c, DO NOT EDIT.
//line "go/eof/02_bounds_checking.re":1
//go:generate re2go $INPUT -o $OUTPUT
package main

import "strings"

//line "go/eof/02_bounds_checking.go":9
var YYMAXFILL int = 1
//line "go/eof/02_bounds_checking.re":6


// Expects YYMAXFILL-padded string.
func lex(str string) int {
	// Pad string with YYMAXFILL zeroes at the end.
	buf := str + strings.Repeat("\000", YYMAXFILL)

	var cursor int
	limit := len(buf)
	count := 0

	for{
//line "go/eof/02_bounds_checking.go":24
{
	var yych byte
	if (limit - cursor < 1) {
		return -1
	}
	yych = buf[cursor]
	switch (yych) {
	case 0x00:
		goto yy2
	case ' ':
		goto yy6
	case '\'':
		goto yy9
	default:
		goto yy4
	}
yy2:
	cursor += 1
//line "go/eof/02_bounds_checking.re":24
	{
			// Check that it is the sentinel, not some unexpected null.
			if cursor - 1 == len(str) { return count } else { return -1 }
		}
//line "go/eof/02_bounds_checking.go":48
yy4:
	cursor += 1
//line "go/eof/02_bounds_checking.re":30
	{ return -1 }
//line "go/eof/02_bounds_checking.go":53
yy6:
	cursor += 1
	if (limit - cursor < 1) {
		return -1
	}
	yych = buf[cursor]
	switch (yych) {
	case ' ':
		goto yy6
	default:
		goto yy8
	}
yy8:
//line "go/eof/02_bounds_checking.re":29
	{ continue }
//line "go/eof/02_bounds_checking.go":69
yy9:
	cursor += 1
	if (limit - cursor < 1) {
		return -1
	}
	yych = buf[cursor]
	switch (yych) {
	case '\'':
		goto yy11
	case '\\':
		goto yy13
	default:
		goto yy9
	}
yy11:
	cursor += 1
//line "go/eof/02_bounds_checking.re":28
	{ count += 1; continue }
//line "go/eof/02_bounds_checking.go":88
yy13:
	cursor += 1
	if (limit - cursor < 1) {
		return -1
	}
	yych = buf[cursor]
	goto yy9
}
//line "go/eof/02_bounds_checking.re":31
}
}

func main() {
	assert_eq := func(x, y int) { if x != y { panic("error") } }
	assert_eq(lex(""), 0)
	assert_eq(lex("'qu\000tes' 'are' 'fine: \\'' "), 3)
	assert_eq(lex("'unterminated\\'"), -1)
	assert_eq(lex("'unexpected \000 null\\'"), -1)
}
