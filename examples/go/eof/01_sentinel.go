// Code generated by re2c, DO NOT EDIT.
//line "go/eof/01_sentinel.re":1
//go:generate re2go $INPUT -o $OUTPUT
package main

// Expect a null-terminated string.
func lex(str string) int {
	var cursor int
	count := 0

	for {
//line "go/eof/01_sentinel.go":13
{
	var yych byte
	yych = str[cursor]
	switch (yych) {
	case 0x00:
		goto yy2
	case ' ':
		goto yy6
	case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':
		goto yy9
	default:
		goto yy4
	}
yy2:
	cursor += 1
//line "go/eof/01_sentinel.re":16
	{ return count }
//line "go/eof/01_sentinel.go":31
yy4:
	cursor += 1
//line "go/eof/01_sentinel.re":15
	{ return -1 }
//line "go/eof/01_sentinel.go":36
yy6:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case ' ':
		goto yy6
	default:
		goto yy8
	}
yy8:
//line "go/eof/01_sentinel.re":18
	{ continue }
//line "go/eof/01_sentinel.go":49
yy9:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':
		goto yy9
	default:
		goto yy11
	}
yy11:
//line "go/eof/01_sentinel.re":17
	{ count += 1; continue }
//line "go/eof/01_sentinel.go":62
}
//line "go/eof/01_sentinel.re":19
}
}

func main() {
	assert_eq := func(x, y int) { if x != y { panic("error") } }
	assert_eq(lex("\000"), 0)
	assert_eq(lex("one two three\000"), 3)
	assert_eq(lex("f0ur\000"), -1)
}
