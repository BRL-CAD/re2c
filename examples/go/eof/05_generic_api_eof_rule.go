// Code generated by re2c, DO NOT EDIT.
//line "go/eof/05_generic_api_eof_rule.re":1
//go:generate re2go $INPUT -o $OUTPUT
package main

// Returns "fake" terminating null if cursor has reached limit.
func peek(str string, cursor int, limit int) byte {
	if cursor >= limit {
		return 0 // fake null
	} else {
		return str[cursor]
	}
}

// Expects a string without terminating null.
func lex(str string) int {
	var cursor, marker int
	limit := len(str)
	count := 0

	for {
//line "go/eof/05_generic_api_eof_rule.go":23
{
	var yych byte
	yych = peek(str, cursor, limit)
	switch (yych) {
	case ' ':
		goto yy3
	case '\'':
		goto yy5
	default:
		if (cursor >= limit) {
			goto yy10
		}
		goto yy1
	}
yy1:
	cursor += 1
yy2:
//line "go/eof/05_generic_api_eof_rule.re":29
	{ return -1 }
//line "go/eof/05_generic_api_eof_rule.go":43
yy3:
	cursor += 1
	yych = peek(str, cursor, limit)
	switch (yych) {
	case ' ':
		goto yy3
	default:
		goto yy4
	}
yy4:
//line "go/eof/05_generic_api_eof_rule.re":32
	{ continue }
//line "go/eof/05_generic_api_eof_rule.go":56
yy5:
	cursor += 1
	marker = cursor
	yych = peek(str, cursor, limit)
	if (yych >= 0x01) {
		goto yy7
	}
	if (cursor >= limit) {
		goto yy2
	}
yy6:
	cursor += 1
	yych = peek(str, cursor, limit)
yy7:
	switch (yych) {
	case '\'':
		goto yy8
	case '\\':
		goto yy9
	default:
		if (cursor >= limit) {
			goto yy11
		}
		goto yy6
	}
yy8:
	cursor += 1
//line "go/eof/05_generic_api_eof_rule.re":31
	{ count += 1; continue }
//line "go/eof/05_generic_api_eof_rule.go":86
yy9:
	cursor += 1
	yych = peek(str, cursor, limit)
	if (yych <= 0x00) {
		if (cursor >= limit) {
			goto yy11
		}
		goto yy6
	}
	goto yy6
yy10:
//line "go/eof/05_generic_api_eof_rule.re":30
	{ return count }
//line "go/eof/05_generic_api_eof_rule.go":100
yy11:
	cursor = marker
	goto yy2
}
//line "go/eof/05_generic_api_eof_rule.re":33
}
}

func main() {
	assert_eq := func(x, y int) { if x != y { panic("error") } }
	assert_eq(lex(""), 0)
	assert_eq(lex("'qu\000tes' 'are' 'fine: \\'' "), 3)
	assert_eq(lex("'unterminated\\'"), -1)
}
