// Code generated by re2c, DO NOT EDIT.
//line "go/eof/03_eof_rule.re":1
//go:generate re2go $INPUT -o $OUTPUT
package main

// Expects a null-terminated string.
func lex(str string) int {
	var cursor, marker int
	limit := len(str) - 1 // limit points at the terminating null
	count := 0

	for {
//line "go/eof/03_eof_rule.go":14
{
	var yych byte
	yych = str[cursor]
	switch (yych) {
	case ' ':
		goto yy4
	case '\'':
		goto yy7
	default:
		if (limit <= cursor) {
			goto yy13
		}
		goto yy2
	}
yy2:
	cursor += 1
yy3:
//line "go/eof/03_eof_rule.re":20
	{ return -1 }
//line "go/eof/03_eof_rule.go":34
yy4:
	cursor += 1
	yych = str[cursor]
	switch (yych) {
	case ' ':
		goto yy4
	default:
		goto yy6
	}
yy6:
//line "go/eof/03_eof_rule.re":23
	{ continue }
//line "go/eof/03_eof_rule.go":47
yy7:
	cursor += 1
	marker = cursor
	yych = str[cursor]
	if (yych >= 0x01) {
		goto yy9
	}
	if (limit <= cursor) {
		goto yy3
	}
yy8:
	cursor += 1
	yych = str[cursor]
yy9:
	switch (yych) {
	case '\'':
		goto yy10
	case '\\':
		goto yy12
	default:
		if (limit <= cursor) {
			goto yy14
		}
		goto yy8
	}
yy10:
	cursor += 1
//line "go/eof/03_eof_rule.re":22
	{ count += 1; continue }
//line "go/eof/03_eof_rule.go":77
yy12:
	cursor += 1
	yych = str[cursor]
	if (yych <= 0x00) {
		if (limit <= cursor) {
			goto yy14
		}
		goto yy8
	}
	goto yy8
yy13:
//line "go/eof/03_eof_rule.re":21
	{ return count }
//line "go/eof/03_eof_rule.go":91
yy14:
	cursor = marker
	goto yy3
}
//line "go/eof/03_eof_rule.re":24
}
}

func main() {
	assert_eq := func(x, y int) { if x != y { panic("error") } }
	assert_eq(lex("\000"), 0)
	assert_eq(lex("'qu\000tes' 'are' 'fine: \\'' \000"), 3)
	assert_eq(lex("'unterminated\\'\000"), -1)
}
