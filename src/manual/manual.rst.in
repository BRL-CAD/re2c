++++++++++++++++++++++++++
User manual (re2RE2C_LANG)
++++++++++++++++++++++++++


.. toctree::
    :hidden:

    warnings/warnings

|

.. raw:: html

    <p style="color:gray";><i>RE2C_DISCLAIMER</i></p>

.. include:: /manual/syntax/syntax.rst_

Here is an example program that shows various aspects of re2c syntax:

.. literalinclude:: ../examples/RE2C_LANG/01_basic.re
    :language: RE2C_LANG

This is the generated output:

.. literalinclude:: ../examples/RE2C_LANG/01_basic.RE2C_LANG
    :language: RE2C_LANG


Command-line interface
======================
Command-line interface consists of options and warnings.
Some of the options have corresponding `configurations`_,
others are global and cannot be changed after re2c starts reading the input file.
Debug options generally require building re2c in debug configuration.
Internal options are useful for experimenting with the algorithms used in re2c.
Each warning can be enabled, disabled and turned into an error.

Options
-------
.. include:: /manual/options/options.rst_

Debug options:

.. include:: /manual/options/debug.rst_

Internal options:

.. include:: /manual/options/internal.rst_

Warnings
--------
See `detailed descriptions with examples <warnings/warnings.html>`_ for all warnings.

.. include:: /manual/warnings/warnings_general.rst_
.. include:: /manual/warnings/warnings_list.rst_


Program interface
=================
.. include:: /manual/api/api.rst_

API primitives
--------------

.. include:: /manual/api/interface.rst_

Directives
----------
.. include:: /manual/directives/directives.rst_

Configurations
--------------
.. include:: /manual/configurations/configurations.rst_

Regular expressions
===================
.. include:: /manual/regexps/regular_expressions.rst_

Handling the end of input
=========================
.. include:: /manual/eof/eof.rst_
.. include:: /manual/eof/01_sentinel.rst_
.. literalinclude:: ../examples/RE2C_LANG/eof/01_sentinel.re
    :language: RE2C_LANG
.. include:: /manual/eof/03_eof_rule.rst_
.. literalinclude:: ../examples/RE2C_LANG/eof/03_eof_rule.re
    :language: RE2C_LANG
.. include:: /manual/eof/02_bounds_checking.rst_
.. literalinclude:: ../examples/RE2C_LANG/eof/02_bounds_checking.re
    :language: RE2C_LANG
.. include:: /manual/eof/04_generic_api.rst_
.. literalinclude:: ../examples/RE2C_LANG/eof/05_generic_api_eof_rule.re
    :language: RE2C_LANG

Buffer refilling
================
.. include:: /manual/fill/fill.rst_
.. include:: /manual/fill/01_fill.rst_
.. literalinclude:: ../examples/RE2C_LANG/fill/01_fill.re
    :language: RE2C_LANG
.. include:: /manual/fill/02_fill.rst_
.. literalinclude:: ../examples/RE2C_LANG/fill/02_fill.re
    :language: RE2C_LANG

Include files
=============
.. include:: /manual/includes/includes.rst_

Include file 1 (definitions.RE2C_HEADER_EXT):

.. literalinclude:: ../examples/RE2C_LANG/includes/definitions.RE2C_HEADER_EXT
    :language: RE2C_LANG

Include file 2 (extra_rules.re.inc):

.. literalinclude:: ../examples/RE2C_LANG/includes/extra_rules.re.inc

Input file:

.. literalinclude:: ../examples/RE2C_LANG/includes/include.re
    :language: RE2C_LANG

Header files
============
.. include:: /manual/headers/headers.rst_

.. literalinclude:: ../examples/RE2C_LANG/headers/header.re
    :language: RE2C_LANG

The generated header file:

.. literalinclude:: ../examples/RE2C_LANG/headers/src/lexer/lexer.RE2C_HEADER_EXT
    :language: RE2C_LANG

Submatch extraction
===================
.. include:: /manual/submatch/submatch.rst_
.. include:: /manual/submatch/submatch_example_stags.rst_
.. literalinclude:: ../examples/RE2C_LANG/submatch/01_stags.re
    :language: RE2C_LANG
.. include:: /manual/submatch/submatch_example_stags_fill.rst_
.. literalinclude:: ../examples/RE2C_LANG/submatch/01_stags_fill.re
    :language: RE2C_LANG
.. include:: /manual/submatch/submatch_example_posix.rst_
.. literalinclude:: ../examples/RE2C_LANG/submatch/03_posix.re
    :language: RE2C_LANG
.. include:: /manual/submatch/submatch_example_mtags.rst_
.. literalinclude:: ../examples/RE2C_LANG/submatch/02_mtags.re
    :language: RE2C_LANG

Storable state
==============
.. include:: /manual/state/state.rst_
.. literalinclude:: ../examples/RE2C_LANG/state/push.re
    :language: RE2C_LANG

Reusable blocks
===============
.. include:: /manual/reuse/reuse.rst_
.. literalinclude:: ../examples/RE2C_LANG/reuse/reuse.re
    :language: RE2C_LANG

Encoding support
================
.. include:: /manual/encodings/encodings.rst_

Here is an example of a lexer for Unicode identifiers encoded in UTF8.

.. literalinclude:: ../examples/RE2C_LANG/encodings/unicode_identifier.re
    :language: RE2C_LANG

Start conditions
================
.. include:: /manual/conditions/conditions.rst_

Here is an example program that uses start conditions to parse integer numbers in binary, octal, decimal and hexadecimal format:

.. literalinclude:: ../examples/RE2C_LANG/conditions/parse_u32_conditions.re
    :language: RE2C_LANG

Skeleton programs
=================
.. include:: /manual/skeleton/skeleton.rst_
.. include:: /manual/skeleton/skeleton_example.rst

Visualization and debug
=======================
.. include:: /manual/dot/dot.rst_
.. include:: /manual/dot/example.rst

More examples
=============
.. include:: /examples/examples.rst
