%{

// disable certain GCC and/or Clang warnings,  as we have no control over
// autogenerated code (Clang also understands '#pragma GCC')
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wunused-macros"
#pragma GCC diagnostic ignored "-Wmissing-variable-declarations"
#pragma GCC diagnostic ignored "-Wunreachable-code"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"

#include "src/parse/parse.h"
#include "src/msg/msg.h"
#include "src/options/opt.h"

using namespace re2c;

extern "C" {
    int yylex(context_t& context, Ast& ast);
    void yyerror(context_t& context, Ast& ast, const char*) RE2C_ATTR((noreturn));
}

%}

%start spec

%lex-param {re2c::context_t& context}
%lex-param {re2c::Ast& ast}
%parse-param {re2c::context_t& context}
%parse-param {re2c::Ast& ast}

%union {
    const re2c::AstNode* regexp;
    const re2c::SemAct* semact;
    char op;
    re2c::AstBounds bounds;
    const char* cstr;
    std::string* str;
};

%token TOKEN_CJUMP
%token TOKEN_CNEXT
%token TOKEN_CLIST
%token TOKEN_CSETUP
%token TOKEN_CZERO
%token TOKEN_CLOSESIZE
%token TOKEN_CODE
%token TOKEN_CONF
%token TOKEN_ID
%token TOKEN_FID
%token TOKEN_FID_END
%token TOKEN_LINE_INFO
%token TOKEN_REGEXP
%token TOKEN_BLOCK

%type <op>      close closes
%type <bounds>  TOKEN_CLOSESIZE
%type <semact>  TOKEN_CODE ccode
%type <regexp>  TOKEN_REGEXP trailexpr rule expr diff term factor primary
%type <cstr>    TOKEN_ID TOKEN_FID TOKEN_CNEXT TOKEN_CJUMP name

%%

spec
: /* empty */
| spec TOKEN_BLOCK {
    use_block(context, ast.temp_blockname, context.input.tok_loc());
    ast.temp_blockname.clear();
}
| spec TOKEN_CONF {
    context.input.lex_conf(context.opts);
}
| spec def
| spec rule
| spec TOKEN_LINE_INFO
;

def
: name expr enddef {
    add_named_def(context.opts.symtab, $1, $2, context.input.tok_loc(), context.input.msg);
}
/* errors */
| name expr '/' {
    context.input.msg.error(context.input.tok_loc(),
                            "trailing contexts are not allowed in named definitions");
    exit(1);
};

name
: TOKEN_ID '=' { $$ = $1; }
| TOKEN_FID
;

enddef: ';' | TOKEN_FID_END;

rule
: trailexpr TOKEN_CODE {
    find_or_add_spec(context.specs, "").rules.push_back(AstRule($1, $2));
}
| '*' TOKEN_CODE {
    find_or_add_spec(context.specs, "").defs.push_back($2);
}
| '$' TOKEN_CODE {
    find_or_add_spec(context.specs, "").eofs.push_back($2);
}
| TOKEN_CLIST trailexpr ccode {
    for (const std::string& cond : ast.temp_condlist) {
        find_or_add_spec(context.specs, cond).rules.push_back(AstRule($2, $3));
    }
    ast.temp_condlist.clear();
}
| TOKEN_CLIST '*' ccode {
    for (const std::string& cond : ast.temp_condlist) {
        find_or_add_spec(context.specs, cond).defs.push_back($3);
    }
    ast.temp_condlist.clear();
}
| TOKEN_CLIST '$' ccode {
    for (const std::string& cond : ast.temp_condlist) {
        find_or_add_spec(context.specs, cond).eofs.push_back($3);
    }
    ast.temp_condlist.clear();
}
| TOKEN_CSETUP TOKEN_CODE {
    for (const std::string& cond : ast.temp_condlist) {
        find_or_add_spec(context.specs, cond).setup.push_back($2);
    }
    ast.temp_condlist.clear();
}
| TOKEN_CZERO ccode {
    const AstNode* r = ast.nil(context.input.tok_loc());
    find_or_add_spec(context.specs, "0").rules.push_back(AstRule(r, $2));
    ast.temp_condlist.clear();
};

ccode
: TOKEN_CODE
| TOKEN_CNEXT TOKEN_CODE {
    $$ = $2;
    // parser needs to to update condition, but for the rest of the code actions are immutable
    const_cast<SemAct*>($$)->cond = $1; 
}
| TOKEN_CJUMP {
    $$ = ast.sem_act(context.input.tok_loc(), nullptr, $1, true);
};

trailexpr
: expr { $$ = ast.cap($1); }
| expr '/' expr {
    $$ = ast.cat(ast.cap($1), ast.cat(ast.tag(context.input.tok_loc(), nullptr, false), $3));
};

expr
: diff
| expr '|' diff { $$ = ast.alt($1, $3); }
;

diff
: term
| diff '\\' term { $$ = ast.diff($1, $3); }
;

term
: factor
// in POSIX concatenation is right-associative
| factor term { $$ = ast.cat($1, $2); }
;

factor
: primary
| primary closes {
    switch($2) {
    case '*':
        $$ = ast.iter($1, 0, Ast::MANY);
        break;
    case '+':
        $$ = ast.iter($1, 1, Ast::MANY);
        break;
    case '?':
        $$ = ast.iter($1, 0, 1);
        break;
    }
}
| primary TOKEN_CLOSESIZE {
    $$ = ast.iter($1, $2.min, $2.max);
}
;

closes
: close
| closes close { $$ = ($1 == $2) ? $1 : '*'; }
;

close
: '*' { $$ = '*'; }
| '+' { $$ = '+'; }
| '?' { $$ = '?'; }
;

primary
: TOKEN_REGEXP
| TOKEN_ID {
    $$ = find_def(context.opts.symtab, $1, context.input.tok_loc(), context.input.msg);
    if (Ast::needs_wrap($$)) {
        $$ = ast.ref($$, $1);
    }
}
| '(' expr ')' { $$ = ast.cap($2); }
;

%%

#pragma GCC diagnostic pop

extern "C" {
    void yyerror(context_t& context, Ast&, const char* s) {
        context.input.msg.error(context.input.tok_loc(), "%s", s);
        exit(1);
    }

    int yylex(context_t& context, Ast& ast) {
        return context.input.scan(ast);
    }
}

namespace re2c {

void parse(Scanner& input, specs_t& specs, Opt& opts, const RulesBlocks& rblocks, Ast& ast) {
    context_t context = {input, specs, opts, rblocks};
    yyparse(context, ast);
}

} // namespace re2c
